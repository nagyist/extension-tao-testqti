{"version":3,"mappings":"AAAAA,0KA6BA,uBACA,iDACA,CA7BAC,sEACAC,kIACAC,yGAgCA,qCACAC,yBAIAC,qBACA,cAOAC,eACA,sDACAC,gLACAC,qDACAA,YACAP,mBACAE,+DACA,OAEAI,cAEA,EAEA,CACA,GAEA,wBAEA,GAEAP,MCrEA,0HAEAS,gFAgCAC,iCACA,gBACA,4BACA,EACA,eACA,6DACA,EACA,iBACA,yEACA,EACA,cACA,sEACA,EACA,iBACA,oEACA,CACA,GASAC,oBACAC,aACAH,yBAEAG,cACAH,eAEAG,YACAH,mBAEAA,cACA,CASAI,+GAEAC,oCACAA,oDACAA,gDAEAC,sDAEA,GAEAf,MCzFA,8LAsDA,6CACA,gCACA,gCACA,CAgCA,kCAIA,iEAEA,iBACAgB,iCACAC,iBACAC,qBACA,GACAF,kCACAC,iBACAC,uBACA,GACAF,+BACAC,iBACAC,oBACA,GACAF,kCACAC,iBACAC,uBACA,GACAF,iCACAC,sBACAC,sBACA,GACAjB,0CACAkB,wDACAC,gBACA,mEACA,uCACA,EACAD,QACAA,6BACAA,yBACA,6BACAE,wCACAD,YAEA,GAEA,EACA,GAKA,MAJAE,wCACArB,aACAqB,yBACA,GACAA,YACA,CAxIArB,sEACAsB,8GACAC,mHACAC,yGAEAA,yBACAA,qBACAA,2BAEA,mFAKA,+BAGA,cACA,CARA,iCACAC,6DACA,iJAsCA,MA9BAC,uDACAC,wLACA,+HACAA,sLACA,OACAA,sLACA,OACAC,+EACAA,uHACAF,iCACA,gJACAC,sLACA,OACAA,0LACA,6IACAA,sLACA,OACAA,oLACA,wEACAE,+IACAA,sCACAH,qFACAC,sLACA,OACAA,wNACA,+IACAA,sLACA,OACAA,oNACA,4DACAD,MACA,GA2BA,kBA4DA,uBAEA,GAEA3B,MChJA,qEAoCA,yBACA,OACA+B,YACAC,WACAC,UACAC,SACAC,QACAC,iBACA,CACA,CA3CAnC,sEAgDA,SAMAoC,gCACA,qBACA,EAMAC,gCACA,qBACA,EAMAC,sCACA,6BACAC,UASA,MARAvC,gCACA,2BACAwC,UACAxC,qCACAuC,0BACA,EAEA,GACAA,MACA,EAMAE,oDACA,uCACAF,UAgBA,MAfAvC,gCACA,2BACAwC,UACAxC,qCACA,mBACA,0BACAA,+BACAW,cACA4B,YAEA,EACA,CACA,EAEA,GACAA,MACA,EAOAG,wDACA,mCACAH,UACAI,WASA,MARA3C,sCACA2C,UACAJ,4BAEAK,yBACAD,WAEA,GACAJ,MACA,EAOAM,uCACA,6BACA,6BACA,EAOAC,uCACA,6BACA,6BACA,EAOAC,mDACAC,0BACAJ,aAQA,MAPA5C,gCACA,2BACA,mCAEA,MADA4C,iCAGA,GACAA,OACA,EAOAK,4BACA,sCACAC,yBACA,GACA,8CACA,EAOAC,sCACA,kDACAxC,sCACAA,gBAEA,EACA,EASAyC,6CACA,gFACAC,2BACAC,sDACA,+BACA,SAEA,+CACA,cACA,SAEA,eAEA,iFACA,SAIA,mFACA,mFACA,CACA,QACA,EAMAC,wCACA,qBACA,EAOAC,iDACA,oCACA,uBACA,EAOAC,0DACA,6CACA,6BACA,EAQAC,yDACA,oCACA,cACA,cACA,kBACA,oDACA,WACA,eACA,8CAIA,mCACA,MACAC,kCACA,CACAC,6BACAC,4BACA,oCACAb,sDACA,IACAY,qBACA,OACA,uCACA,oBAGAE,8DACA,IACAD,QACA,QACA,eACA,GACA,wBACA,iBACA,KAGAE,gDACAC,4EACA,IACAC,OACAnC,UACAC,QACA,CACA,QACA,+BACA,KACAmC,0EACA,IACAD,OACAjC,OACA,CACA,QACA,kBACA,KACA,mCACAD,iEACAC,4DACA,EACA,CACA,QACA,WACA,+BAEA,EAQAmC,wDAEAC,+BAGAC,qCACAC,4CACA1B,qDA0BA,MAvBA2B,yBACAH,kBACAE,OACAF,iCAKAE,mDACAA,iBACA1B,UACA0B,sCAKA1B,UACAA,oDAEA0B,OACAA,6CAEAF,iDACAA,QACA,EAQAI,6EAEAJ,+BACAE,KACA1B,QAkCA,MA/BA6B,+BACAH,gDAEAG,6BACA7B,qDAIA2B,wBACAH,kBACAE,OACAF,0CAKAE,mDACAA,iBACA1B,UACA0B,2CAKA1B,UACAA,oDAEA0B,OACAA,6CAEAF,iDACAA,QACA,EAOAM,+CACA,oCACA,wCACA,EAOAC,wDACAN,iCACAC,uCACA9B,6BACA,6CACA,EAOAoC,8CACAP,iCACAC,uCACA9B,6BACAI,+CACAiC,6BACA,0CACA,EAOAC,2DACA,SAMA,MAJAnE,MADAX,qBACA,6BAEA,2BAEAW,aACA,EAOAoE,iCAUA,MATA/E,yBACAA,wCACAA,gDACAA,gDACAgF,+BACA,EACA,EACA,GAEAC,GACA,EAOAC,0DACAb,iCACAC,uCACA9B,6BACAI,+CAUA,MATAA,WACAA,oDAEA0B,OACAA,6CAEAW,MACAA,wCAEAA,GACA,EAMAE,kDACA,kDAiBA,MAhBAxE,sBACAyE,gBACAzE,eACAyE,eAEAzE,aACAyE,uBAGAzE,cACAyE,cAEAzE,aACAyE,aAEAA,YACAA,GACA,kBACA,EAMAC,+CACA,uDAOA,MANAD,qCACAA,kCACAA,gCACAA,8BACAA,4BACAA,gDACAA,GACA,kBACA,EAeAE,+CACAC,WACAC,UACA,mDACA,+CA6BA,MA3BAC,wCAGAD,kCACAxF,8DACA,4BAEAwF,wDAEA,8BACAxF,wEAEAwF,oFAGAA,kJACA,GAGAA,6FACA,GAEAA,oDArBAA,kCAyBAA,kCACAA,SACA,EASAE,iCACAC,UACAC,aACAC,gBACAC,WACAC,cACA,qCACA,+CAoCA,MAhCAd,cAGAjF,2DACAA,mEACAA,mEACA8F,uBACAF,aACAE,mBACAxB,sBAEAyB,6BACAF,gBACAE,yBACAnD,yBAEAjC,qBACAA,2BACAA,+BACAA,qCACAsE,mBACA/B,mBACAN,mBACA0B,aACAV,eACA,EACA+B,SACAE,gBACAD,YACA,EACA,EACA,GACAX,GACA,EAQAe,8CACA,qCACA,+CAYA,MAVAf,cACA,0CACA,yBACAA,mBACA/B,mBACAN,mBACA0B,aACAV,eACA,CACA,GACAqB,GACA,CACA,EAEA,UAEA,GAEAlF,MCtqBA,qHAQA,2CACAkG,uHACAC,qDACA,uCACA,CAEA,MAZAC,+GAYAC,oBAEA,GAEArG,MClBA,6SA2DA,6CACA,gCACA,gCACA,CAuDA,0CACAsG,iBACAC,gEACAC,4BACAC,sCACAC,0EACAD,gDAEAD,wBACAA,uBACA,qBAEA,GACAA,wBACAG,0BACA,qBAEA,GACA,6BACAC,iEACAC,eACA,GAEAC,oBACA,mBACA,6BACA,mBACA,GAEAA,eACA7G,aACA,4BACA,sBAEA,EACA,kCACA8G,qCACA,GACA,sBACA,2BACA,yBACA,0BACA,GAGA,MAFAR,wCACAA,0BACAA,YACA,CAjKA9F,2EACAR,sEACAsB,8GACAyF,6HACAC,gKACAzF,mHACAC,yGAEAA,yBACAA,qBACAA,2BAEA,mFAKA,+BAEA,4BASA,MARAE,oHACAE,sEACAA,8GACAF,iCACA,+EACAG,kIACAA,sCACAH,8DACAA,MACA,CACA,+BAEA,4BAUA,MATAA,6JACAE,yEACAA,iHACAF,iCACA,kIACAE,sEACAA,8GACAF,iCACA,+EACAA,MACA,CA9BA,iCACAD,6DACA,iJAwCA,MAVAC,8UACAC,4MACA,wJACAA,oUACA,mGACAA,sWACA,iPACAE,wIACAA,sCACAH,uCACAA,MACA,GA2BA,gBACAuF,kBACAC,0BACAC,iCACAC,YACAF,UACAG,2BACAF,mCACA,GACAD,cACAG,2BACAF,uCACA,GACAD,aACAG,2BACAF,sCACA,GACAD,SACAG,2BACAF,qCACA,EACA,EACA,EA0DA,0BAEA,GAEApH,MCzKA,+kBAwBA,6CACA,gCACA,gCACA,CAzBAS,2EACA8G,gFACArH,kIACAmG,qKACAmB,iJACAC,iJACAH,yGACAI,4IACAlG,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFAKA,MAJA,kCACAjG,+CAGA,gDACA,GA4BAkG,sBACAxH,iBAIAC,YACAwH,iCACAjH,iCACAkH,QACAzB,sDACA0B,0CACA,EACAC,0CACAC,sEACAC,gCACAC,yDACAC,yDAsBA,GAtBA,CACAlB,kBACAC,0BACAC,iCACAC,YACAF,UACAG,8BACAF,mCACA,GACAD,cACAG,8BACAF,uCACA,GACAD,aACAG,8BACAF,sCACA,GACAD,SACAG,8BACAF,qCACA,EACA,EACA,EACAY,mCACAC,yHACAV,iCACA,GACAc,cACAC,UACA,GACAL,mIACAE,+BACA,GACAE,cACAC,UACA,IAEA,yDACA,kCACA,sCACA9B,gBACA,GACA,mCACA,iBAGA,iDACA,6DACA,+BACA,yBACA,mBACA,GACA,EACA,uCACA,8DACA,2DACA,mEACA+B,wBACAC,+DACAC,QACAD,oCAEAA,gCAEA,kFACAD,wBACAG,6CACAH,oDACA,GACAV,qCACAc,yCACAC,eACAvC,gGACA0B,iDACA,EACAc,wDACA,4DACA,uBACAC,0FACAvB,uCAEAuB,8BACA,8CACA,gCACAH,yCACAZ,mEACA9F,4BACA,IACA,8DACA,8BACA,wDACA,qDACA,2BACAkG,qDACA,EACA,EAIAY,yBACA,6CACAxB,iDACA,yCACA,CACA,GAEA,aAEA,GAEAvH,MCjLA,sTAEAgJ,sEACAhC,6HACAC,gKAwBA,+BAMA,sBACA7G,cAMAC,YACAyH,yBAEAmB,uBACAC,6CACAC,+CACA,6DACA,oBACA,8BACAhC,GACAiC,MACAxC,SACAC,gBACAwC,iBACA,GACA3H,8CACAA,2CACA,kCACA,CACA,EAOA,MANA,uBACAoG,sBACAoB,4GAEAC,4DAEA,IACA,EAKAG,gBACA,yBACA,EAKAC,UAGA,MAFA,4DACA,sBACA,IACA,CACA,EAEA,uBAEA,GAEAvJ,MC3FA,kUAEAC,sEACA+I,sEACAhC,6HACAC,gKAwBA,+BAMA,uBACA7G,eAMAC,YACAyH,yBACA0B,8FACA,iHACA1B,8BACA2B,sDAEA,sDACA,6DACA,oBACA,8BACAtC,GACAiC,MACAxC,SACAC,gBACAwC,mCACA,UAaA,MATAvB,oBACA4B,+BACAzJ,4CACA,uCACA,oFACAyJ,MAEA,IAEAA,GACA,CACA,GACAhI,8CACAA,2CACA,kCACA,CACA,EAOA,MANA,uBACAoG,sBACA2B,kHAEAE,kEAEA,IACA,EAKAL,gBACA,yBACA,EAKAC,UAGA,MAFA,4DACA,sBACA,IACA,CACA,EAEA,wBAEA,GAEAvJ,MC7GA,0TAEAgJ,sEACAhC,6HACAC,gKAwBA,4BAMA,0BACA7G,mBAMAC,YACAyH,yBACA8B,wFACAH,oDACAI,mDACA,6DACA,oBACA,8BACA1C,GACAiC,MACAxC,SACAC,eACA,GACAnF,8CACAA,2CACA,kCACA,CACA,EAGA,MAFA,uBACA+H,kHACA,IACA,EAKAH,gBACA,yBACA,EAKAC,UAGA,MAFA,4DACA,sBACA,IACA,CACA,EAEA,2BAEA,GAEAvJ,MCrFA,yTAsCA,6EACA,wBACA8J,mDACAC,qGACAC,iEAOAC,gCACAC,+BACA,CACAF,wBACAG,6BACAhD,qBACAP,wBACAwC,qBACAgB,QACAf,mCACA,kDACA,8CACA,sEACA,QAEA,GACA,mBACA,CACA,uBACAY,2EACA,sBACAA,8EACA,GACAvI,4CACA2I,+BACAC,8BACA,GACA5I,gDACA6I,mCACAC,uCAEA,CA9EAvK,sEACA+G,6HACAC,gKAwBA,iBACAwD,uDACAC,0FACA,EAuDA,yBACAtK,iBAMAC,YACAyH,yBACA6C,2DACAC,yCACAC,yDAGA,GAFA,0BACA,sBACAD,oDACA,iBACAE,kFACA,MACAC,6FACAC,0EAEA,GADAD,wDACAC,4BACA,yCACAC,2BACA9D,2BACAN,gBACAD,6BACAwC,uBACA,GACA1H,kDACA2I,kDACAC,iDACA,GACA,8CACA,iDACA,IAIAY,uBAHAC,iBACAhB,eAIAiB,mBACAC,6CACAC,8DACAA,0BACAH,+BACAF,2BACA9D,uBACAN,gBACAD,0BACAwC,+CACA,GACA1H,8CACA2I,kDACAC,iDACA,GACA5I,kDACAoG,kBACAqD,qCACA,0BACA3E,wCACA+E,6BACA/E,iBACA4E,yBACAF,uBAEAE,oBACA,CACA,GAEAtD,uBACAqD,iDACAzJ,qDACAzB,aACAiL,mBACAf,uBAEAA,sBAEA,EAEA,GAEArC,uBACAqD,iDACAzJ,qDACAzB,aACAkK,qBACA,EAEA,GAEA,0CACA,oDAEAL,mDACA0B,+CACAC,0DACAD,wDACAA,yDACAC,wBAEAtB,6BACAhD,qBACAP,wBACAwC,qBACAC,mCACA,UASA,OARAvB,oDACA4B,8CACA,mEACA,sDACA,QAEA,IAEAA,GACA,CACA,uBACAwB,sBACAnE,2EACA,sBACAA,8EACA,GACArF,4CACA2I,sDACAC,qDACA,GACA5I,gDACAoG,kBACAqC,+CACAgB,kBACAA,wBAEA,GAEArD,sCACAqC,mDACAzI,uDACAyJ,+BAEA,GACAhB,mDACAzI,uDACAyJ,mCAEA,IAEA,wCAEA,4CAEA,CAEA,WACA,EAKA7B,gBACA,yBACA,EAKAC,UAIA,MAHA,gEACA,0BACA,sBACA,IACA,CACA,EAEA,0BAEA,GAEAvJ,MCzQA,oTAEAgJ,sEACAhC,6HACAC,gKAwBA,qCAMA,oBACA7G,YAMAC,OACA,8BAaA,MAZA,uBACA,sIACAmG,gBACAkF,wBACAvE,6CACAP,sDACAwC,eACAvC,eACA,GACAnF,8CACA,kCACA,GACA,IACA,EAKA4H,gBACA,yBACA,EAKAC,UAGA,MAFA,4DACA,sBACA,IACA,CACA,EAEA,qBAEA,GAEAvJ,MC/EA,uTAEAgJ,sEACAhC,6HACAC,gKAwBA,gDAMA,uBACA7G,eAMAC,OACA,8BAaA,MAZA,uBACA,sIACAmG,gBACAkF,wBACAvE,6CACAP,sDACAwC,eACAvC,eACA,GACAnF,8CACA,kCACA,GACA,IACA,EAKA4H,gBACA,yBACA,EAKAC,UAGA,MAFA,4DACA,sBACA,IACA,CACA,EAEA,wBAEA,GAEAvJ,MC/EA,+UAEAgJ,sEACA2C,6HACA3E,6HACAC,qKAyBA2E,sCACApF,wCACAqF,6BACAzL,2BACAA,MACAoG,kFAEA,EAOAsF,mCACA,6CACAtF,yCACA,EAOAuF,sCACAL,YACAA,6CACAA,+CAEA,EAOA,oBACAtL,YAMAC,OACA,eACA,2BACAyH,yBACAkE,+DAOAC,8BACA,mEACA,EAUAC,0CACA9B,kEACAf,yEACA,6DACA,oBACA,8BACAzC,SACAwC,MACAgB,KACAf,gBACAxC,eACA,GAEA,MADAsF,qCACAT,SACA,CACA,EAUAU,kDACA,6EACA,mEAQA,MAPAV,aACAhK,8CACAA,2CAGAgK,qOAEAA,SACA,EAGAW,6EAEAd,8DA4DA,MAzDAS,kFAGAK,mDACAC,6BAGAC,oDACAC,qCACA,6CAEAF,mEACA,kBACAG,oCACAP,uBAEA,GAGAI,mCAGA,iFACA,6EACAI,yBACA,0DACAX,oCACA,OACA,CACA,gEAEA,gBAQA,MALAW,8BACAC,gBACA9I,eAEA,GACAA,QACA,GACAkI,qCAGAL,gCACAA,8BACA,6CACAlF,yBACAA,gBAEA,EAEA,CACA,KACA0F,wCAEA,GACA,IACA,EAKA5C,gBACA,yBACA,EAKAC,UAGA,MAFA,4DACA,sBACA,IACA,CACA,EAEA,qBAEA,GAEAvJ,MC7NA,0TAEAgJ,sEACAhC,6HACAC,gKAyBA,0BACA7G,kBAMAC,YACAyH,yBACAkE,+DACAK,6EAEAd,8DACAqB,oDACAC,kBACAC,QACA,8BACA,8BACAlG,cACAC,eACA,GACAnF,8CACA,sCACA,EA+BA,MA1BA,uBACA,0BAGAsK,iFACAY,+BACAN,oBACAS,8BACAC,8BACApG,0DACAwC,mBACAvC,eACA,GACAnF,iDACAmL,wCACAI,qBACAH,SAEA,yCACAA,2BACAD,mBACA,GACAC,cACAG,qBACAH,SAEA,IACA,EAKAxD,gBACA,yBACA,EAKAC,UAKA,MAJA,4DACA,+DACA,0BACA,sBACA,IACA,CACA,EAEA,2BAEA,GAEAvJ,MC7GA,kUAEAgJ,sEACAvI,2EACAuG,6HACAC,gKAwBA,kDAOA,wBACA7G,gBAMAC,YACAyH,yBACAkE,+DACA,sBAGA,mCACA,0CAQA,MAPAkB,wCACA,iCACA,oCACA,0CACA,CACA,QACA,EACAA,OACA,EAgBA,MAfAlB,+FACAxF,gBACAI,8EAGAJ,0CACA,8BACAW,qBACAP,SACAwC,eACAvC,eACA,GACAnF,8CACA,kCACA,GACA,IACA,EAKA4H,gBACA,yBACA,EAKAC,UAGA,MAFA,4DACA,sBACA,IACA,CACA,EAEA,yBAEA,GAEAvJ,MCnGA,+SAEAgJ,sEACAhC,6HACAC,gKAwBA,2BAMA,eACA7G,kBAMAC,YACAyH,yBACAqF,iCACAC,wCACA,sBACA,yDACA,6DACA,oBACA,8BACAjG,GACAiC,MACAxC,SACAC,eACA,GACAnF,8CACAA,2CACA,kCACA,CACA,EAEA,MADA0L,2GACA,IACA,EAKA9D,gBACA,yBACA,EAKAC,UAGA,MAFA,4DACA,sBACA,IACA,CACA,EAEA,gBAEA,GAEAvJ,MCrFA,usCAEAqN,iJACAC,sJACAC,qKACAC,gKACAC,uIACAC,sJACAC,uIACAC,qKACAC,2JACAC,8GAIAhN,kDACAA,oDACAA,0DACAA,wDACAA,8CACAA,oDACAA,8CACAA,0DACAA,sDACAA,8CAEAC,sDAEA,GAEAf,MC9BA,iPA8DA,iDACA,iDAKA,OAKAK,OAEA,MADA0N,0BACA,IACA,EAKAC,UACA,WACA,EAKAC,YACA,aACA,EAKAC,gBACA,iBACA,EAKA5E,sBACA,0CACAyE,kCAEA,EACA,EAKAxE,UAIA,MAHA,qCACAwE,4BAEA,IACA,CACA,CACA,CAMA,MA3HAI,kJAwHAA,kCACApN,sGAEAqN,eAEA,GAEApO,MCjIA,4OAqCA,qCACA,iBACA,kDACA,MACAkK,SACA,sBACAgD,iBACA,CACAA,iDACAA,8BAEA,kCACA1G,+EAIA,CAQA,+CACA,yEACA6H,6BACA,WAEA,2DACAA,6BACA,eAEA,EACA,CAOA,4CACA,6DACA,yCAIAC,qBACAA,qBACA,YACA,GAEAA,wBAEA,EACA,CAQA,kDACA,yGACA,CAOA,mCACA,oEACA,CA7GAtF,sEACA/I,sEACAmO,4IAyBA,uCAoFAtN,oDACAA,oCACAA,oCACAA,wDACAA,gDAEAC,sDAEA,GAEAf,MC3HA,8GAuBA,iBACAI,eAMAC,OACA,qEACA,OACAkO,6FACAzG,sBACA0G,aACAC,gBACAxD,aACApE,gBACA6H,kBACAC,mBACAC,yBACAvE,yBACAC,sBACAuE,mBACAC,kBACAC,sBACAC,mBACA,SACA,CACA,CACA,EAEA,kBAEA,GAEAhP,MCzDA,6GAuBA,gBACAI,cAMAC,OACA,qEACA,OACAkO,mGACAzG,sBACA0G,aACAC,gBACAxD,aACApE,gBACA6H,kBACAC,mBACAC,yBACAvE,yBACAC,sBACAuE,mBACAC,kBACAC,sBACAC,mBACA,SACA,CACA,CACA,EAEA,iBAEA,GAEAhP,MCzDA,6GAuBA,gBACAI,cAMAC,OACA,qEACA,OAEAkO,0GACAzG,sBACA0G,aACAC,gBACAxD,aACApE,gBACA6H,kBACAC,mBACAC,yBACAvE,yBACAC,sBACAuE,cACAC,cACAC,kBACAC,iBACA,SACA,CACA,CACA,EAEA,iBAEA,GAEAhP,MC1DA,8YAEAiP,wHACAC,mHACAC,mHAIArO,wCACAA,sCACAA,sCAEAC,sDAEA,GAEAf,MChBA,kOAoCA,2BACA,qEACA,6CACA,4BACA,CAMA,MA5CAmO,kJAyCAA,8BACApN,iFAEAqO,WAEA,GAEApP,MClDA,oVAqCA,6CACA8H,kEACA,CACAuH,oBACA,SACAC,oBACAf,cAKA,OAKAlO,YACAkP,yDACAC,uCACAjB,4DACA,mDAwBA,MArBAkB,yBACAA,8BAEAH,6BACAnI,iBACAiD,QACAxD,oBACAC,0CACA,GACAnF,4CACA2I,0CACAC,yCACA,GACAhD,qFACA5F,8CAGA,6BACA4N,uBAEA,GACA,IACA,EAKApB,gBACA,iBACA,EAMAwB,iBAEA,MADAL,8BACA,IACA,EAKAM,UACA,2BACA,EAKAC,WACA,4BACA,EAKArG,UAQA,MAPAjC,0BACAiH,iDACAe,gBACAA,yBAEAA,oBACAf,cACA,IACA,CACA,CACA,CA9HAvH,6HACAoI,wHACA9H,yGAwBA,+BAsGA,2BAEA,GCnIAtH,iGACAA,MCFA,oVAEAC,sEACA4P,gKACA3P,kIA0BA,2BACAmP,8BACA,EAKA,0BACAjP,qBAIAC,YACAwH,iCACAiI,8DACA9I,0DAKAa,mCAGAb,yBACAA,uBAEAA,mBACA,wBACAA,sBACA,GAKAF,8BACAE,2BACA8I,sCACA,EACA,CACA,GAEA,aAEA,GAEA9P,MC3EA,wNAmBA,0CACA,gCACA,gCACA,CAmBA,wBACA,uBAQA,MAPAY,cACAmP,oBACAnP,cACAmP,qBACAnP,cACAmP,oBAEAA,KACA,CAjDAxI,gFACA9G,2EACAP,kIACAsB,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFAKA,MAJA,kCACAjG,+CAGA,8GACA,GAkCAsO,sBACA5P,oBACAC,YACAwH,iCACAoI,mBACA,wCACA,EACAC,mBACA,4CACA,EACArI,mCACA,uCACAoI,kBACAC,iBACA,2BACA,qCACAtP,4BACAqB,qBACA,GACAiO,iBACA,EACA,EACAnH,SACA,8DACA,+BACAoH,iCACA,oEACA,mEACA,CACA,GAEA,aAEA,GAEAnQ,MCvFA,mTAEAgJ,sEACA/I,sEACAC,kIACAkQ,wHACAC,kIACAC,iJACAC,uIACA7I,+IAwBA8I,qBAMAC,iCAMAC,gBACAC,OACAC,UACA,EACAC,SACAD,UACA,CACA,EAKAE,sBACA1Q,cAIAC,qBAiBA,6BAEAyQ,oCACA,CAMA,6BACAA,aACA,CAOA,oCACA,kDACAC,SACAA,yBACAC,OACAC,2BAEAC,2BAGA,CAYA,yEAKA,4BACAjR,sBACA+Q,+BAEA,CACA,4BACA/Q,sBACAkR,+BAEA,CAbA,YACAzM,kBACAoM,gDACA,EAcAP,yBACAa,wBACAC,mBACAC,oBACAP,mCACAA,2CACAQ,kCACAA,mCAIAD,gBACAf,wBACAa,yBAEA,EACA,CAOA,oCACAN,QACA7Q,gCACA,kCACA,QAEA,EAEA,CAQA,8CACAoR,MACApR,iCACA8Q,wDACAC,OACAC,2BAEAC,2BAGA,IAEAM,sCACAA,wCAEA,IAhIA3J,iCACA4J,oCACA3B,+DACA7H,uDACAyJ,UACAC,YACAL,UACAF,2CACAQ,aACAtJ,UACA,GAyHA8I,8CAGAK,4BACAxR,gDACAmR,0FAEAvJ,6CACA,EACA,GAIAA,2DACAgK,kGACA,4DACAA,wGACA,6CACAL,gCACA,iDACAM,sBACA,iDACAA,sBACA,2BACAN,mBACAJ,uBACAA,mBACA,EACA,CACA,GAEA,aAEA,GAEApR,MCrOA,oIAEAC,sEACAC,kIAwBA,gCACAE,oBAIAC,qBAEA,EAIA0R,2BACA,oCAIAlK,iDACA,0CACAmK,2CAGAA,2BACA,8BACA,wCAIAtN,iCACAmD,+CAGAA,0FACAA,2CACAoK,SACA,EACA,SAEA,EACA,CACA,GAEA,mBAEA,GAEAjS,MCxEA,yJAEAgJ,sEACA9I,kIAyBA,oCACAE,wBAIAC,qBACA,cACA,uCACA,cAEAyG,6BACAkC,wBACA,mCACAxD,mBACAA,2BACA,EACA,EAIAuD,4BACAlB,iCACAqK,iCACAC,8CACAA,mBACAA,kEAEAA,uCACA,qBACAC,eACAC,OACA,EACA,EAIA9I,2BACA,qCACA,4BAEA,CACA,GAEA,uBAEA,GAEAvJ,MC3EA,sHAEAC,sEACAmG,8GAuBA,sBAcAkM,4FACAzP,SACA0P,aACAC,QACA5R,KACA,qIAKA,MAJAiC,6DACA0P,sEACAC,yCACA5R,2DACA,mPAEA,wDACA,EAeA6R,8FACAC,UACAC,cACAH,QACA5R,KACAiC,QACA0P,aACA,yKASA,MARAG,4DACAC,qEACAH,2CACA5R,2DACA,oBACAiC,4DACA0P,uEAEA,kaAEA,wDACA,EAOAK,+CACA,mDACA,EAOAC,iDACA,oDACA,EAQAC,4DACAlS,MACAsD,MACA,6BACA,wCAEA,6BACA,+CAKA,GAHAM,oBACA5D,+CACAsD,2DACAA,gCACA,kBACA,qCAEA,yEACA,8CAEA,sCACA,0CAEA,CACA,QACA,EAQA6O,2DACA,SACA,6BACA,wCAEA,6BACA,+CACA,MACAvO,qBACA5D,+CACA,eACA,kBAEA,sEACA,4BAEA,qCACA,uBAGA,EASAoS,iFACAC,0DACAC,cACAC,YAEAC,6DACA,wBAUA,MATAF,YACAhO,wBAEAA,UACA/B,eACA+P,kBACAG,SACA,EACAH,aACAhO,GACA,MAbAoO,WA+BA,MAjBAC,2CAIAD,WAHAE,8BAGA,YAFA,oBAIAvT,kDACA,cACAA,0CACAkH,yCACAA,QACAgM,6CAIA,EACA,GACAA,QACA,EAOAM,uDACA,mFACAN,iBACAA,YAEA,IACA,EAOAO,+DACA,uFACAP,iBACAA,YAEA,IACA,EAOAQ,8DAEA,MADAC,mBACA,sGACA,EAOAC,sEAEA,MADAD,mBACA,qEACA,EAOAE,wDAEA,MADAF,mBACA,iEACA,CACA,EAEA,uBAEA,GAEA5T,MCjRA,wRA2FA,0CACA,gCACA,gCACA,CA5FAuH,gFACA9G,2EACAP,kIACAsB,mHACAC,yGACAsS,iJAEAtS,yBACAA,qBACAA,8BAEAkG,gFAKA,+BAEA,4BAKA,MAJAhG,cACAE,0EACAA,kHACAF,iCACAA,MACA,CAEA,+BAEA,qBAMA,MALAA,6BACAC,sHACA,MACAA,yEACA,aACAD,MACA,CAEA,+BAEA,4BAQA,MAPAA,qCACAE,qEACAA,6GACAF,iCACAG,+HACAA,sCACAH,qBACAA,MACA,CACA,+BAGA,iBACA,CAEA,+BAEA,4BAMA,MALAA,kCACAE,qEACAA,6GACAF,iCACA,UACAA,MACA,CApDA,iCACAD,6DACA,qGAyEA,MArBAC,uCACAE,wEACAA,gHACAF,iCACA,0CACAG,mIACAA,sCACAH,8BACAE,sEACAA,8GACAF,iCACA,oCACAG,6HACAA,sCACAH,oHACAG,8HACAA,sCACAH,uBACAG,8HACAA,sCACAH,oCACAA,MACA,GA6BAqS,YACAX,MACAY,uBACAC,2CACAC,eACAzL,aACA,EACA0L,KACAH,mBACAC,iDACAC,oBACAzL,wBACA,CACA,EAKA2L,iCACAjU,yBAIAC,wBACAmF,WACAqC,gCAMAyM,6CACAC,yCACAC,gCACAC,kFACAC,0CAcA,MAbAA,uCAGAA,4BACA/N,mBACAnB,eACA,wCACAA,oBAEAkP,cACAlP,uBACAA,2BACA,GACAkP,IACA,EACA,8BACA,wCACA,EAIA3L,4BACA4L,+DACA9M,gCACAqK,iCACA0C,8CACA,gDACAA,kEAEAA,uCAGArN,0DACAoN,yCAEA,EAIAE,yBACA,2DACA,EACAC,2BACA,qDACA,EAIAvL,2BACA,oBACA,CACA,GAEA,wBAEA,GAEAvJ,MCpNA,0JAEAS,2EACAP,kIACA6U,mHAuBA,4BACA3U,gBAIAC,wBACAmF,WAIAqC,gCAKAmN,qCACAC,iBACAA,uBAEA,EAVAA,gBAWA,4BAGApN,uCACAqN,aACAC,aACA3P,2BACA,uBACA0P,oBACAC,eAEAD,UAGAA,QADA,cADAC,KAEA1U,0CAEA,iBAJA0U,KAKA1U,sBAGAA,0BAGAwU,4CAEA,iCACAzP,2BACAyP,6CAEA,kCACAzP,2BACAyP,8CAEA,+BACAzP,2BACAyP,2CAEA,yFACAD,eACAxP,2BACA,wCACAA,2BACA,EACA,CACA,GAEA,eAEA,GAEAxF,MCjGA,yKAEAgJ,sEACAoM,mHACAlV,kIAwBA,iCACAE,qBAIAC,qBAUA,gCACAgV,+DACAC,yHACAD,oCACAE,eACAC,yEACAC,oEACAC,oEACAH,6BACAA,4BACAA,WACA,qBACA,GACA,yBACAA,6EAEAA,kEAGA,EACA,CAGA,+BACA,yDAGAI,4BACAA,0DAGA3M,kBACA,CAGA,iCACA,6CACA4M,cAQA,MAPAC,2BACA,qBACAR,0DACAA,wBACAO,sCAEA,GACAA,WACA,CAGA,mCACA,mDACAE,oCACAH,gDACAG,sGAEA,CACA,MAjEAjO,iCACAkO,yDACAC,uBACAC,kBACApO,sCACAqO,kBACAlN,wCACAA,sDACA,EA0DA,CACA,GAEA,oBAEA,GAEAhJ,MC3GA,qJAEAmW,mHACAjW,kIAwBA,2BACAE,eAIAC,qBACA,oCACAwH,sCACAsO,kBACA,8BACAA,iBACA,EACA,CACA,GAEA,cAEA,GAEAnW,MC9CA,sVAuDA,mCACA,eACAC,oDACA,oCAIA,MAHAmW,SACAC,YAEAD,KACA,GACAC,UACAC,mBACA,2BACAC,WAGA,CACA,4BACAC,kBACAC,mDACA,CAxEAzN,sEACA/I,sEACAyW,+FACAxW,kIACAyW,kIACAC,6HACAC,sHAuEAC,8BACA1W,wBAIAC,qBACAkW,sBACAQ,iDACA,EAIAhO,4BACAvD,WACAqC,gCACAmP,8DACA,2BACAC,eACAC,qBACAjX,qBACA8W,mBAEAI,uBACAlX,kDACA,kEACAqW,eACAc,oCACAC,iBACA,GAEAlH,oDACA,GACAmG,kBACAY,gCACA,GAGAV,+BACAK,iKAGAN,WAIAQ,uBACA,EACAP,WACA3O,kGACArC,cACA,GAEAqC,wGACAyP,yBACA,GAEAzP,oEACA0O,cACAS,qCACA,EACA,EAKAzN,2BACA,iBACA,gBAEA,GADA0N,eACA,mBACAV,eAGA,SADAgB,uCACAA,WACAD,8BAIA,CACA,GA7HAd,WAMAC,cAKAS,kBAKAD,YAKAV,SA0GA,oBAEA,GAEAvW,MCpKA,gIAEAgJ,sEACA9I,kIAuBA,2BACAE,eAIAC,wBACAmF,WACAqC,gCACA,2BACA,6GACAlB,6BACAA,mBACA,QACA6Q,0BACAhS,aACA,EACAiS,6BACAjS,cACA,EAGAqC,uFACA,EAIAkB,yBACA,uEACAgN,iCACA,EAIAxM,2BACA,sBACA,EAIAsL,SACA,qCACA,kCACA6C,oBACA,sCAEA,EAIA5C,2BACA,iDACA,EAIA6C,qBACA,aACA,EAIAC,qBACA,cACA,CACA,GAEA,cAEA,GAEA5X,MChGA,oJAEAC,sEACA+I,sEACA9I,qIAwBA2X,iBAMAC,kCAMAC,6CAMAC,+BAMAC,yBAMAC,UACAC,iBAEAC,sBAEAC,mBAEAC,SAiBAC,gBACA,EACAC,kBAMAC,yBACArY,iBAIAC,qBAaA,iCAGAqY,gBADA5Q,oDACA6Q,4BAGA7Q,uBACA8Q,+BAIAC,gCAEA,CAMA,iCACA,iCAMA,MALArS,mCACAsS,sCACAtS,+BACAuS,uCACAvS,kCACAsS,4BACA,CAKA,8BACAE,mCACAA,wEACAC,qCACA,CACA,+BACA,8CACAC,WACAC,2CACAD,oCACAA,0CAEA,CACA,0BACA,4CACA,CACA,yBACAjZ,kDACA,4CACA,uCACAmZ,gDAEA,SAGA,EACA,CACA,oCACA,uDACA,CACA,6BAIA,6BACA,CACA,2BACA,yDACA,CAMA,8BACA,kBACApY,8BAOA,MANA8G,wBACAuR,gHAEAvR,4BACAuR,mHAEAA,SACA,CAOA,qCACA,gEAEAC,yEACAC,qBACAD,mBACAA,0BACAC,kCACA,GACA,CACAD,oBACAC,qBACA,EAGA,GACA,CAQA,wCACA,0CACAC,oBACAC,SAwBA,MApBAC,kCACA,8BAGAC,mDACAF,2BACAA,kCACA,GAGAxZ,mCACA,iBACAqZ,0BACAC,kCACA,GACAC,uBACAF,oBACAC,qBACA,EACA,GACAtZ,2BACA,CAOA,0CACA,mCACAuZ,oBACAD,aAQA,MAPAD,2BACAC,kCACA,GACAC,uBACAF,oBACAC,qBACA,GACAtZ,2BACA,MAhLA4H,iCACAC,mDACA8R,uDACA1R,uCACA2R,6CACAC,qCACAC,2CACArB,sDA0KAF,yDACA3Q,mCACA,OACAA,kDACAoR,2BACAe,wBACAnS,mCACA,gDACAoS,oBACA,EACA,EACA1Q,2BACAiP,yBACA,CACA,GAEA,gBAEA,GAEAxY,MCrSA,qNAmBA,6CACA,gCACA,gCACA,CApBAuH,gFACA2S,0FACAha,kIACAsB,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFAKA,MAJA,kCACAjG,+CAGA,oCACA,GA4BAyY,iDACA5S,2CACA,EAKA6S,qCACA,qCACA,gCAEAC,sCACAC,SACAA,yDACAA,4BAEArI,SAEA,WAEAA,SAEA,EACA,EAKAsI,2BACAna,mBAIAC,wBACAmF,WACAqC,gCACA,kCACA,YAGAA,iCACArC,WACA,4BACA,wCACAd,kBACAc,oCACA2U,6BACAC,uCAEAvS,iCACA,GAEA,8BACArC,WACA,8BACAA,YACAA,qBACA,EACA,EAIAuD,yBAEA,qDACAoH,gCACA,EAIA5G,2BACA,sBACA,EAIAsL,yBACA,4DACA,EAIAC,2BACA,sDACA,EAIA6C,qBACAuC,yBACA,EAIAtC,qBACAsC,yBACA,CACA,GAEA,kBAEA,GAEAla,MCrJA,0UAgEA,gDACA,gCACA,gCACA,CAjEAuH,gFACAtH,sEACAQ,2EACA+Z,uIACAC,kIACAva,kIACAsB,mHACAC,yGACAiG,4IAEAjG,yBACAA,qBACAA,8BAEAkG,gFAKA,+BAGA,qBACA,CAEA,+BAEA,6BAIA,MAHAhG,4CACAC,kLACA,UACAD,MACA,CAEA,+BAEA,6BAIA,MAHAA,iDACAC,oLACA,UACAD,MACA,CA1BA,iCACAD,6DACA,iJA2CA,MAjBAC,2CACAE,sEACAA,8GACAF,iCACAG,iIACAA,sCACAH,sBACAG,iIACAA,sCACAH,qGACAC,4MACA,qBACAE,iIACAA,sCACAH,2GACAC,sNACA,2BACAD,MACA,GA+BA+Y,eACAC,oBACAC,aACA1F,UACA,EAMA2F,4BACAza,oBAIAC,wBACAmF,WACAqC,gCACAiT,4BACAhT,wDAGAA,2BAEA,mCACAiI,kDACAmF,sBACA,IACArN,sCACArC,+DACA,6BACAA,+DACA,IAIA,gDACA,8CAEA,EAKAuM,8BACAvM,WACAuV,WACAlT,gCACAiT,4BAOA,0DACA,sEACA,WACA,qCACAC,UACAA,WAIAlT,6CACA,0CACAiT,sEACA,EACA,GAGAhK,sBACAoE,2EACA8F,sEACAC,oEACA,2BACAhJ,SACA,0BACA6I,oEACAjT,gCACAkT,WACAjK,gBACA,EACA,GAEA,EACA,EAIA,6BACAoK,yBACArT,8FACA,EACAsT,qCACAC,YACA,GAGAN,kDACAjT,sCACAA,uCACAA,wCACArC,qBAEA,uCACAqC,sCACAA,uCACAA,gCACArC,oBAEA,GAMAqC,2CACA,qBAMA,MALArC,yDACAqC,gCACA,8BACAA,sCACA,KAGA,GAGAA,8DAEAiT,iCAGAA,mBACAtV,4CACA,kBACAqC,gEAEA,qBACAA,oBAEA,oBACAA,4BACAwT,mCACAnG,kCACA,EAEA,8BACArN,sCACA,cAGA,GACAA,wEACA0M,yCACA,CACA+G,KACA,cACAA,SAGAA,qBACA/G,6BAEA,sEACA/O,sCACAqC,4BACA,cAGA,GACAA,+FACA,kFACA0T,6BACA,GACAhH,yCACA5L,wCACA,2EAKA,MAJAd,mCACArC,4CACAqC,wDACA,KAGA,EACA,EACA0B,UACA,yCACA,EAIAR,yBACA,qDACA,eACAoH,gCAEA,CACA,GAEA,mBAEA,GAEAnQ,MC3SA,oMA2BA,0CACA,gCACA,gCACA,CA5BAS,2EACAP,kIACAsB,mHACAC,yGAEAA,yBACAA,qBACAA,2BAEA,mFACA,iCACAC,6DACA,2FAWA,MARAC,gBACAE,sEACAA,8GACAF,iCACA,oBACAE,wEACAA,gHACAF,iCACAA,MACA,QAuBAvB,qBACAob,eACAtH,2CACAgB,gIACA,EACAuG,cACA7K,eACA8K,SACAC,QACAC,wBACAC,4BACA,CACA,CACA,EACAC,cACAT,SACAU,qBACAC,mBACA,EACAC,yEACA,EACA,gCACA7b,oBAIAC,YACAwH,iCACAqU,0DACAC,gDACAC,qBACAvU,6LACA,mBACAwU,8BACA,kBACAxU,4CACAA,2CACAA,qCACAA,0CACA,GAEA,EACAA,yDACA,CACA,GAEA,mBAEA,GAEA7H,MCnGA,+JAEAC,sEACAC,kIACAoc,kIAmBA,mFAKA,4BACAlc,gBAIA2R,UAEA,+DACA,EAMA1R,OACA,sCACA,gDACAkc,qBACA,0CACA,oDACA,EACAC,yBACA,4BACA,EAEA3Q,KACA,CAGA,2EAOA4Q,4BACA,+BAGAC,iCAFAC,gFAGA,CAQAC,yBACA,qCAIA,MAHAC,gNACAC,gEACA,GACAD,oBACA,EASAE,mCACA,qCACA,+HACAC,wCACA,gBACAF,kEACA,EACA,EAGAjV,0GAKAf,mDACA7G,2BACAgd,uCAEA,EACA,EACA,CACA,GAEA,eAEA,GAEAjd,MCxHA,wKA6MA,+CACAkd,mEACAvU,kEACA,wDACAwU,mCACAC,4EAEA,MADAA,8BACAD,YACA,CACA,cACA,CAMA,yBACA,OACAtZ,WACAwZ,UACAnb,SACAob,YACAnb,OACA,CACA,CAQA,6CACA+K,4BACAhJ,iBAEAgJ,uBACAhJ,gBACAgJ,4CACAhJ,gBAGAgJ,wBACAA,kDACAhJ,kBAGAA,aACA,CAQA,iDACAgJ,4BACAhJ,iBAEAgJ,iBACAhJ,gBACAA,gBAEAgJ,kBACAhJ,kBAEAA,aACA,CAOA,0CACA,4CACA,6DAEA,MADAgB,kBACAA,GACA,KACA,CAYA,+DACAqY,2CACAC,yEACAtZ,+BACAuZ,kBACAC,UA6BA,MA5BA,kCACAD,0DACAC,sDACAxZ,yCAEAA,4BACAA,+BACAA,sCACAA,yCACAjE,yCACA0d,uDACA,wBACAA,iEAEA1d,0CACA0d,6DACA,2BACAA,uEAEA,iCACA1d,uCACA2d,8DACAzY,sEAEA,EAEA,EACA,GACAjB,KACA,CASA,kEACA,cAWA,MAVA2Z,qBACA5d,wCACA,kCACA6d,UACAA,oBACA,QAGA,GAEAA,mBACA,CAQA,iDAEAC,iBADAla,mBACA,iCAEA,CACA,CAYA,4DACAma,oCACAC,sDACA,+CACA,CAYA,4DACA,OACApa,qBACA1B,eACA+b,+BACA9W,qDACA,CACA,CAQA,6CACA,mCACA,OACAvD,qBACA1B,eACA+b,YACA9W,iBACA,CACA,CAjaAnH,sEACAQ,2EACA0d,+FACA/X,iHA6DAsU,gBACAlW,aACAoW,uBACAwD,aACA7a,aACA,EAMAoY,QACA/a,MACAyd,yBACAC,mBACA,EACAzb,SACAwb,4BACAC,sBACA,CACA,EAMAC,QAUAC,kDACAta,2DACAtD,2DAEA,MADAsD,gCACAA,KACA,EAUAwO,0DACAxO,+DACAtD,2DAEA,MADAsD,sCACAA,KACA,EAUAua,gEACAva,kEACAtD,2DAEA,MADAsD,yCACAA,KACA,CACA,EAMAwa,YAMAC,sCACA,0DACA,EASA9a,yCACA,uEACA,EASA9B,2CACA,kFACA,EASAU,yCACA,+GACA,EASAc,6CACA,2GACA,CACA,EA+NAqb,UAOAC,+EACApB,4DACAC,wDACA,8DACA,EAUApY,8CACAoN,4DACAoM,8DACA5a,+DAOA,MANAA,mCAEAA,uBADAwO,4BACA8B,yBAEAA,uBAEAtQ,KACA,EASA6a,8DACA,oEACA,yDACA,EAWAC,qEACA,iBAGA,MAFAlX,6CACAmX,2DACA,2DACA,CACA,EAEA,eAEA,GAEAjf,MCveA,+MAiBA,8CACA,gCACA,gCACA,CAkCA,0DACA,iBAKAkf,6BACAD,kBACA,qCACA,8CACA,4DAQA,2BACA,CACA,EACA,yFAEA,eACAE,mEACAC,8DACA,EAGA,uBACA,4BAIA,iCAGAH,cACA,0BAIA,mBACA,WAEA,2BACA,kBACA,eACA,CApGA1d,8GACAC,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFAKA,MAJA,kCACAjG,+CAGA,+MACA,GA4BAwW,UACAmH,YACA,EA0DA,kCAEA,GAEArf,MC5GA,2LAkBA,4CACA,gCACA,gCACA,CAwBA,yCACA,kCACA,gCACA,CAkCA,2DACAsf,SACAC,aAKAL,6BACAD,kBACA,qCACAK,6BAEAA,yBACA,6DAEA,8CACA,mBAEAE,0CAEAC,mDAEAA,+BAQA,2BACA,CACA,EACA,uFAEA,eACAN,mEACAC,kFACA,EAGA,uBACA,4BAIAH,cACA,0BAIA,mBACA,WAEA,2BACA,kBACA,eACA,CAzIAhf,sEACAsB,8GACAC,mHACAC,yGAEAA,yBACAA,qBACAA,2BAEA,mFAKA,MAJA,kCACAC,+CAGA,sQACA,GAMAD,yBACAA,qBACAA,8BAEAie,kFAKA,+BAEA,cAIA,MAHA/d,+DACAC,yEACA,iBACAD,MACA,CAXA,iCACAD,6DACA,0FAWAI,gHACAA,0BACA,EACA,GA4BAoW,UACAmH,YACA,EAmEA,gCAEA,GAEArf,MCjJA,2aAEAE,kIACAkG,8GACAuZ,uIACAC,8LACAC,uLAwBAC,YACAnB,qCACA9a,gCACA,EAKAkc,2BACA3f,mBAIAC,0BACAwH,iCACAmY,yCACAlY,iFACAtC,aACAya,kEACAC,gBACAtF,oCACApW,2BACA6a,2BACAjB,2BACA7a,4BACA,EACA4c,mDACA,uEACA,EACAC,kCACA,oIACA,EAKAC,uDACA,wDACA,EAKAnB,4BACA3K,yCACAC,gCACA5T,2DACAyf,0BACA7a,sBAEAA,qBACAA,yFAEA,EAGA,8CAGA0Z,SACArX,sCACA,EAIAkB,yBACA,qDACA,gCACA,EAIAQ,2BACA,eACA,wBAEA,kBACA,EAIAoO,qBACA,eACA,oBAEA,EAIAC,qBACA,eACA,oBAEA,CACA,GAEA,kBAEA,GAEA5X,MClIA,qIAEAC,sEACAC,kIAwBA,6BACAE,iBAIA2R,2BACA,oCAGAlK,2DACA,6BAGAyY,sFAEAzY,iDACAA,8BAIA5H,iDACAsgB,mBACA,KACA1Y,iCAJAA,oCAUAwL,OACA,EACA,EAIAhT,wBACAwH,iCACA2Y,aAGA3Y,yDACA2Y,uGACAA,aACA,oBACA3Y,kCAEAA,4CACAA,kCAGA,EACA,CACA,GAEA,gBAEA,GAEA7H,MCrFA,gFAQA,0EACA,sBACAygB,iCACAC,cACA,+DACA,gBACAA,0CAEA,GACA,oBACA,wCACAC,+CACA,CACA,qCACA,0BACAC,iCAEAD,0EACA,CAMA,MAJAE,cADA,sBACApgB,qDAEAA,4DAEAogB,YACA,CAEA,MAjCApgB,4EAiCAqgB,eAEA,GCpCA9gB,+FACAA,MCFA,8ZAiDA,6CACA,gCACA,gCACA,CA6DA,gDACA+gB,OACAC,kBAKA,yBASA9B,6DACA1Z,WACAyb,YACAC,UACAC,eACA,0BAMA,GAJA,mBADA,iBACA,EAEAC,2BAEA,yCAEA,GADAH,wDACAA,gCACA,kCACAI,yDACAC,wBACAC,4BACAC,4BACAT,6BACAC,oGACA,CAuBA,GAtBA,gBAEAE,wDACA,0FACA,GACAA,YACA,kCAEAC,eADAlhB,+CACA,qDAEA,iCASA,qEAGA,8BAEA,qKACAwhB,wBACA,6DASA,0KAEA,CAQA,qDACA,CACA,wBACA,eAEA,CACA,WACA,EAMAC,uBAWA,MAVA,iEACA,cACA,4BAMA,uBAEA,IACA,EAMAC,qBAUA,MATA,2CACA,4BAMA,sBAEA,IACA,EAUAC,6BAYA,MAXA,kEACA,YACA,8BAOA,8BAEA,IACA,CACA,iCACA,6CACA,yDACA,uBACA,0DAEA,sCACA,wFAIA,uBACA,0BACAb,qCACAC,+DACA,kCACAD,uDAEA,qCACA,qBACAc,uBACA,oFACAd,oGACA,kCACAe,2DACAC,iBACAC,YACAC,kBACA,GACAH,wBACAI,sBACAJ,wBACAA,0BACA,+BAGA,GAKA,MAJAK,qCACAliB,mBACAkiB,sBACA,GACAA,SACA,CA9SA5a,gFACAtH,sEACAmiB,wHACA7gB,8GACAC,mHACAC,yGACAqf,4IACAuB,oGACAC,+FAEA7gB,yBACAA,qBACAA,8BAEAkG,gFACA,iCACAjG,6DACA,2FA4BA,MAzBAC,qDACAE,mEACAA,2GACAF,iCACA,mBACAE,qEACAA,6GACAF,iCACA,oBACAE,sEACAA,8GACAF,iCACA,eACAE,sEACAA,8GACAF,iCACA,2CACAE,sEACAA,8GACAF,iCACA,gCACAE,sEACAA,8GACAF,iCACA,gJACAA,MACA,GAyBA4gB,cAKArK,UACAsK,mBACAC,iBACA,EAKAC,gBACAC,SACAC,YACAC,YACAC,WACAzG,SACA,EAsNA,uBAEA,GCnTArc,8FACAA,MCFA,qYAuCA,4CACA,gCACA,gCACA,CAyCA,oCAOA+iB,qBAUA7D,kCACA1Z,WACAwd,YAGAC,kEAeA,MAdAA,0BACAhjB,6CACA+iB,wCACA,GAIA/iB,oCACA,oCACA+iB,uCAEAA,yCAEA,GACArG,6CAcA,MAZA,uBACAzC,4BAEAA,4BAQA1U,+BACA0d,OACA,EACA,EAKAC,+BACA,kBACA,EAcAC,qCACA,oBACA,0DACA,8BACA,qEACAX,yCACA,2BAGAjd,+BACAA,+BAQAA,kDAOAA,yCACAyM,wBACA,yBAMAzM,0CACA,wBAMAA,yCACA,uBAMAA,wCACA,+BACAA,kBACAA,uGAGAA,oCAEA,GACA2c,mEACA,GAEAxF,mBACA,EAUA0G,iDACA,2DACA,kDACA,8DACA,0CACApjB,8CACA,2EAEA,2BACA,gFAEA,qDAOA,4CACA0c,kCAEAA,mBACA,EASA2G,qCACA,oBACA,0DACA,8BAIA,+BAEA,gDAGA9d,mCACAA,6CAOAA,oCACAyM,gBACA,EACAzM,0BACAA,0DAEA+d,SAEA,GAEA5G,iBACA,EAKA+E,uBAMA,MALAzhB,uCACAujB,iBACAA,uBAEA,GACA,IACA,EAKA7B,qBAMA,MALA1hB,uCACAujB,iBACAA,sBAEA,GACA,IACA,EAMAC,uCAgBA,MAfA,oDACA,gBACA,wBACAC,kDAEA,wBACAA,iDAOA,0CAEA,IACA,CACA,iCAEA,cACA,6BACAle,WACAgB,2BAGAmd,mDAGA,8BACAD,+CACAle,uDACAke,uCACA/c,mBACAnB,oBACA,IAIA,oBACA,+BAEA,GArRAke,gBACAC,oBAyRA,MAJAZ,mCACA9iB,mBACA8iB,qBACA,GACAA,QACA,CA7WAxb,gFACAtH,sEACAQ,2EACAc,8GACA2Y,0FACA0J,iJACApiB,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFAKA,+BAEA,6BAIA,MAHAhG,yEACAC,4LACA,oEACAD,MACA,CAXA,iCACAD,6DACA,yIAmBA,MARAC,6CACAG,0LACAA,sCACAH,+DACAE,2EACAA,mHACAF,iCACA,sCACAA,MACA,GA2BAuW,UACA2L,SACApb,WACAqb,cACA,CACA,EA2SA,sBAEA,GAEA9jB,MCrXA,6FAoCA,gDACA,oDACAwjB,+EACA,CACApjB,oBAIA2jB,uBACAlc,iDACAA,gCACA,GACAA,gCACA,EAIA+Z,6BACA,gBACA/Z,+BACA,EAIAmc,6BACAnc,uCACA,CACA,CAGA,CAEA,2BAEA,GAEA7H,MCxEA,gHA4CA+d,SAdA,6CAOA,6CACA9d,wEACAujB,wBACA3b,iFACAoc,qBACA1P,wCACAiP,sCACAS,uEACAC,uGACArc,2CACAoc,uCACA,GAEA,qEACAC,uBACA,GAEA,WACAV,4BACA,CACApjB,iBAIA2jB,uBACAI,gBACA,EAIAzC,uBAEAyC,gBACA,EAIAH,6BACAnc,gEACA,CACA,CAGA,CA9EA5H,yEAmBAsiB,eACA2B,wBA4DA,wBAEA,GAEAlkB,MCtFA,iGAsCA,yDACAgI,2CACA0K,8CACA8Q,2HACA,CACApjB,wBAIA2jB,uBACAlc,6BACA,EAIA+Z,6BACA/Z,qDACAqa,sBACAra,wCACA,MACA,CACA,CAGA,CAEA,+BAEA,GAEA7H,MCpEA,wFAkCA,oDACAwjB,4BACA,CACApjB,eAIAwhB,6BACA,oCACA,gEAEA,CACA,CAGA,CAEA,sBAEA,GAEA5hB,MCvDA,6EAEAC,yEAwBAmkB,wBACAC,cACAC,gBACAC,eACAC,eACA,EAMAC,oCACAC,mCACAC,+BACAC,8BACAC,uCACAC,gCACAC,gCACAC,qCACAC,8CACAC,mCACA,EAKAC,mBAMAC,iDACA,iCACA,mDACA,EAOAC,0EACA,eAQA,MAPAplB,2EACA,0CACA,sCAEA,MADAmW,qBAGA,GACAA,KACA,EAQAkP,8DACAC,sDACAC,aACAvlB,wCACA4L,eAEA,mBA8BA,MA7BA,qBACA4Z,gCACA,qBACAA,8CACA,mBACAA,iDACA,8CACAA,aACAxlB,cACAylB,aAEAA,CACA,EAEA7Z,iCACA0Z,oBACA,2BACA,iBAEAC,oBAEAA,iBACAA,mCAGAA,+BACAA,8CAGAA,QACA,EAQAG,mEACA,yDACA1lB,qDACA4L,YAEA5L,sGACA4L,0CAEA,iFACA,uFACA,EAUA+Z,8GAEAC,kBADA7jB,sCAeA,MAbA8jB,4DACAC,mCACAZ,gEACAnjB,aAEAA,8FACA,sBACAgkB,sDACAC,qDACAJ,4DAEA7jB,kCAEAA,QACA,EACAkkB,sFACAhU,8BACAiU,oDACAC,mCACAC,oBAUA,MATApmB,iDACAqmB,uCACAC,wCACAC,mBACAzlB,oFACAylB,gEACAH,+EAEA,GACAA,gBACA,EAQAI,oDACAvU,8BACA+T,gDACA3G,QACAoH,QACAC,oCACAzU,cACAyU,uDACAN,4EACApmB,gDACAqmB,uCACAd,0CACAoB,6BACAC,mCACAvH,QACA6F,sIACAuB,OAEA,IAEA,eACA,mBAEA,oBACA,EAOAI,oDACA5U,8BACAiU,oDACAC,mCACA,yDACA,kCACA,4CACA,EAOAW,4DACAC,sCACAC,kBACA,mBAEAA,kDACA,gFACA,kDACA,uCACA,EACA,GACAA,aAEA,EACA,CACA,EAEA,wBAEA,GAEAjnB,MClQA,2KAEAC,sEACAmG,8GACA+e,sJAmBA,WAQA+B,wCACAhiB,yBACAR,gCACA9D,6BACA8R,iCACAxO,uEACAijB,gCACA,gCAIA,GAHAA,iBACAC,wEAEA,qBACA,+FACA,wCACAljB,iBACA,gDACAA,iBAEAmjB,kEACAnjB,gBAEA,CACA,YACA,CACA,EAEA,YAEA,GAEAlE,MC7DA,iLA+BA,iDACA,gCACA,gCACA,CA6BA,yCACAkV,mEACAmS,4CACAC,yDACAC,0BACAvf,uCACAwf,8DAOA,MANAA,kBACAD,sEACAA,oBACAA,yBAGA,uGACA,CAOA,0BACA,cAQA,MAPA,yCACAvX,kDACA,uDACAA,+CACA,iBACAA,sDAEAyX,kBACAzX,oBACA,EACA,CAQA,iCACA,sFACA,cAEA,YADAxL,OAEA,gBAFAA,OAGA,SAHAA,MAIA/D,yDACA,SALA+D,OAMA,iCANAA,OAOAkjB,mIACA,UAEA,EACA,CAQA,uCACA,sEACA,8CACAC,cAGAzS,QACA,iGAEAzU,6EALAyU,OAMA,CASA,2DACAhR,sDACA0jB,sDACAD,kCACA,yBA0BA,MAzBA,0CACAJ,4IACAI,eACAJ,iFAEA,wDACA,kBACAA,qFACA,sBACAA,oFAEAI,eACAJ,oEAEA,iBACA,kBACAA,8GACA,sBACAA,6GAEAI,eACAJ,oEAGAA,2CACAA,iBACA,CA9KA9mB,2EACAonB,wHACArmB,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFAKA,+BAEA,4BAMA,MALAhG,gBACAE,uEACAA,+GACAF,iCACA,eACAA,MACA,CAbA,iCACAD,6DACA,0FAaAI,gIACAA,0BACA,EACA,GAmJAgmB,UACAC,6BACA,EAEA,eAEA,GAEA/nB,MCzLA,8DAwBA,YAEAgoB,2BACAC,UACAC,cACApR,gBACAqR,YACAC,QACA,GAEAC,2BACAJ,UACAC,cACApR,gBACAqR,YACAC,SACAE,WACAC,eACA,EACA,EAEA,aAEA,GAEAvoB,MCjDA,+SAsCA,sDAQA,8EACA0E,qCACAQ,oCACAR,4GACAqP,uEAGA,WACAyP,qDACA,CACApjB,0BAIA2jB,uBACAlc,wJACA0M,yCACAC,gCACAxM,0CACAwgB,wCACAC,0CACA7V,uDACA8V,qFACAC,2GACA,qDAEA,0BACA1W,cAEA,8GACA,iDACApK,sIACA6T,SACAC,QACAC,qBACAC,8BACA,CACA,CACA,EACA,KACA5J,UAEA,GASA,MARA2W,yCAIA3oB,mBACA4H,0CACA,EACA,GACA+gB,WACA,EACA,EAIAhH,6BACA,sBACA,EAIAoC,6BACAnc,6DACA,CACA,CAGA,CAjHA5H,sEACAQ,2EACAqnB,yGACA/T,iJACA8U,+FACAziB,8GAuBA,mGAuFA,iCAEA,GAEApG,MCzHA,2hBAuCA,sDAMA8oB,YAOAC,6DACA,gCACA,kEACA,+DACA,MACA9oB,6BAGA0c,sDACA,kCACA,yBAEA,IANAA,iBAOA,EACAqM,2DA1BAC,gBA6BA,uFACA,uEAoEA,MA9DAA,kBAMAlF,4BAQA,MAPA9jB,2DACA,iDACA,gBACA6oB,wCACAA,iCAEA,GACAC,mCACA,EAKAG,4CACA1F,+CACAsF,kBAEA,EACA,EAMApH,4BACA,0CACA,EAMAC,0BACA,yCACA,EAMAC,kCACA,6CACA,EAOAoC,kCACA,8DACA8E,gCACA,EACA,CACA,EACAG,eACA,CAzIAhpB,sEACAkpB,sJACAC,qKACAC,yLACAC,4IACAC,mMAwBA,4IA8GA,yBAEA,GAEAvpB,MCjJA,kKA2FA,uDACAwpB,WAKAC,6EACA,6BAYA,MAXApkB,+CACA,OACAqkB,gCACAxU,6CACA,8EACA,sDACA,EACA2M,YACA8H,QACA,CACA,GACAtkB,GACA,MAKA,2GACA,+BAUA,MATAA,oCACAqkB,kCACAxU,iEACA,gFACA,yFACA,EACA1Q,MACAmlB,QACA,IACAtkB,GACA,MAQA,wDAeA,uFACAme,gBACAA,6DACA,cACAA,oEACAA,+CACAA,2DAEAA,+BACAA,+CACAA,0DAEAA,oDACAA,sCACAA,+BACAA,gCACAA,4BACAA,qDACAA,gDAIA,4DACAA,iDAEAvjB,6DACAujB,+EAEA,+CAEA,MADAA,iEACAA,KACA,EA6BA,MA5BAvjB,uDACA2pB,wCACAC,SACAD,iFACAA,qBAEA,yDACA9M,8DAGAhV,8JACA+hB,6CACAL,+BAGA1lB,6DACA+lB,0CACAL,8BAIAI,mDACAC,0CACAL,+BAlBA1M,oFAqBA,GACAA,yDACA0M,MACA,CAlNAvpB,sEACAQ,2EACA6hB,+FACAnE,+FACA7B,qIAmBAQ,yEAKAyF,cAKAhE,4CAKAuL,cACAC,sBACAC,4BACAC,wBACA,EAOAC,wCACAJ,qBACAA,oBAEA7pB,yBACA4L,MAEA,IACA,EAMAse,iBACAvpB,uEACAiC,6EACA6P,gFACA8L,sEACA,EAKA,sCACA5d,+DACAiC,iEACA6P,kEACA8L,6DACA,EAsIA,gBAEA,GAEAxe,MC1NA,8hBAwBA,4DACA,gCACA,gCACA,CAzBAuH,gFACAtH,sEACAC,kIACAkqB,2JACAC,4IACAC,kIACAjkB,qKACAwhB,wHACArmB,mHACAC,yGAEAA,yBACAA,qBACAA,2BAEA,mFAKA,MAJA,kCACAC,+CAGA,+DACA,GAyBA,0CAKA,0BACAtB,aAIA2R,UACA,sCAQA,2DACAwC,yCACA7B,qCACA5O,qCACAymB,4CACAf,sDACA,gDACA,kFACAvpB,qFACAujB,+EAEA,EACA,oBACA,aACA,EACA,EAQA,sDACA,gDACA,6GACA,GACA,EAGA3b,qDACA,EAMAxH,qBAoDA,oCACA,8CAEA,8CACA,+DACA,mCACA,qBAEA,MA3DAmF,WACAqC,gCACAG,0CACA,qCACA,eACA,yEACA,qDACA,SAKAF,uBAIA0iB,sBAIAC,4CAIAC,0EAIAC,oDAIAC,+FAIAC,oBACA,oBAKA5B,+CAMA6B,kBACAjjB,+BACA,EAUA,qCAEA,0EACAA,0CACA,iCACA,kCACA,iCACA,iCAEA,+BACA,uBACA2hB,kCACAuB,gEACAC,4EACAC,yEAKA,MAJA5lB,oDACA6lB,sDACAD,mBACA,GACA5lB,GACA,MACAG,sDACA,CACA,iCACAA,gBACA+B,4GACA/B,uBAEAA,2CACA,iCACAA,8CAEAA,qBAEA,6BACAA,eAEAA,oBAEA,+BACAA,8CAEAA,oBAEA,GACA2lB,sDAEA3lB,+BACA4lB,4CACAvH,SACApb,WACAqb,sBACA,EACArB,wCACA,qCAEAjd,2CACA,sCACAyjB,+CACA,oCACAA,kDACA,mCACAA,+CACA,kCACAA,8CACA,iCACAA,kDACA,2CAEAzjB,uDACA,kCACA2lB,qCACA,8CAGA3lB,6CACAsC,4BACAtC,gDACAqc,gBACAha,iCAEA,GAGArC,oFACAwlB,0DACAC,yEACAI,kCACAC,+CAEA9lB,oFACA6lB,4HACA,OACA,WACA,WACA,IAEA,qBACA,EACA,EACA,EAIAtiB,yBACA,uDACA,sEACA,iCACAoH,qDACA,EAIA5G,2BACA,eACA,8BAEA,EAIAoO,qBACA,eACA,oBAEA,EAIAC,qBACA,eACA,oBAEA,CACA,GAEA,aAEA,GAEA5X,MCjTA,wWA8CA,yCACA,gCACA,gCACA,CA/CAuH,gFACAtH,sEACAC,kIACAsB,mHACAC,yGACA2E,8GACA0a,4IACAwB,+FACAuF,wHAEApmB,yBACAA,qBACAA,2BAEA,mFAKA,+BAEA,4BAcA,MAbAE,8CACAE,0EACAA,kHACAF,iCACA,4BACAE,0EACAA,kHACAF,iCACA,8CACAE,0EACAA,kHACAF,iCACA,mDACAA,MACA,CArBA,iCACAD,6DACA,8FAyBA,MAJAC,wFACAG,+HACAA,sCACAH,yBACAA,MACA,GAuBA,oBACA,yBACAvB,aACAC,0BACAwH,iCACA2M,gCACA+W,uBACAhX,yCACAiX,oEACA7iB,kEAeA,GAZA6L,eACA,mDAIAgX,gCACA,mEAMAjX,qCACA,yEAGA,uFACA,CAGA5L,mBACA,8DAEA,EACAd,mCACA5H,uCACA,mCACA,mCACA,iBACA,uEAEA,GACAsrB,cACA,0CACA,+BACA,UACA,OACA,KACA,CACAE,OACAvnB,KACA,qBACAmd,wDACAC,wBACAC,4BACAC,4BACAyJ,0DAGAQ,QACAA,uEAEA,wBACAlkB,yCACA,EACA,EACAwB,yBACA,uDACA,aACAyV,MACAkN,2BACAC,YACA,EACAjZ,UACAgZ,gCACAC,0BACA,EACA9oB,SACA6oB,8BACAC,YACA,EACA/qB,MACA8qB,gCACAC,0BACA,CACA,EACA,4BACAC,4BACA,IAGArkB,0CACA4I,iCACAlQ,oCACA,IACAyrB,SACA,OACA,2EACA,gFACA,EACA,CACA,GAEA,YAEA,GAEA1rB,MCjLA,0JAkCA,qBACA,sBACA,CAlCAC,sEACAqiB,+FACApiB,qIAwBAqiB,eAaAsJ,kCACAzrB,0BAIA2R,2BAIA,wDACA,EAIA1R,qBAGA,sBACAwH,+BACA,IAJAA,iCACAikB,aAIA,qEACAjkB,oDACA,wCACAikB,WACAC,kCACA,EACAC,gEAIA,MAHA1L,OACArgB,wBAEA+rB,qDACA,iBACA,8CACA,wCAGA,MAFAF,4CACAA,6EACAE,oEACA,kCACA,wCACA,qFACAC,mCACA,KACA,EACA,EACA,CACA,GAEA,yBAEA,GAEAjsB,MC5FA,qMAEAC,sEACAQ,2EACAP,kIACAilB,yJAwBAjN,WACAgU,eACA,EAMAC,6BAKA/rB,qBAKAC,YACAwH,iCACAG,0CACA8H,yDACAjI,4CACA0M,yCACA6X,8EACAvJ,0IACA,8DACAwJ,wCAEAF,4GACA,kBACA,qCACA,0DACAla,UAEAkT,mEACAlT,eAEA,6CAGApK,6CACAA,mDACAA,iCACAsJ,SACAtJ,4CACA,IAEA,CAEA,CACA,EACA,CACA,GAEA,oBAEA,GAEA7H,MCxFA,6FAiCAssB,wDACA,0BACAxG,aAEA,0BAEA,EAgBAyG,sDAoBA,gCACA,+CAEA,CAKA,gCACA,mBAEA,eAEA,wBAEA,yBAEA,CAKA,kCACA,8FACA,CAKA,+BACA,4BACA,CAKA,mCACA,+BACA,CAMA,+BACA,gCAEAC,iBAEAC,8BACA,CAOA,wCACA,2DACAC,2CACAC,gBACAC,yBAIA,CAMA,kCACA,sEACA,CAMA,wBACA,sDACA,CApGA,wDACAha,oCACA9O,wCACA+oB,sDACAC,sDACA5oB,oBACA6oB,8BACAC,6FACAC,kCACAN,oDACAH,sCACAU,oCACAC,4CA6FA,OACAC,mCACA,wBACA,EACAC,+BACA,oBACA,EACAC,gCACA,qBACA,CACA,CACA,EAEA,wBAEA,GAEAttB,MClLA,uhBAkGA,0CACA,gCACA,gCACA,CAnGAuH,gFACA9G,2EACAyZ,0FACAha,kIACAqsB,sJACAzE,yGACA1hB,8GACA2N,iJACA8T,wHACAvgB,yGACAI,4IACAlG,mHACAC,yGAEAA,yBACAA,qBACAA,2BAEA,mFAKA,+BAEA,4BAKA,MAJAE,cACAE,0EACAA,kHACAF,iCACAA,MACA,CAEA,+BAEA,qBAMA,MALAA,6BACAC,sHACA,MACAA,yEACA,aACAD,MACA,CAEA,+BAEA,4BAQA,MAPAA,qCACAE,qEACAA,6GACAF,iCACAG,+HACAA,sCACAH,qBACAA,MACA,CACA,+BAGA,iBACA,CAEA,+BAEA,4BAMA,MALAA,kCACAE,qEACAA,6GACAF,iCACA,UACAA,MACA,CApDA,iCACAD,6DACA,qGAyEA,MArBAC,uCACAE,wEACAA,gHACAF,iCACA,0CACAG,mIACAA,sCACAH,8BACAE,sEACAA,8GACAF,iCACA,oCACAG,6HACAA,sCACAH,oHACAG,8HACAA,sCACAH,uBACAG,8HACAA,sCACAH,oCACAA,MACA,QA2BAqS,aACAX,MACAY,uBACAC,2CACAqZ,iDACApZ,eACAzL,eACA,EACA0L,KACAH,mBACAC,iDACAC,oBACAzL,mBACA,CACA,EAOA8kB,yBACA,uEACA,mCACA,2CACA,EAOAC,gFAOAC,2EAQAC,4CACA,4EACAlZ,8BACAF,wCACA,+EACAC,iCACAoZ,wEACApnB,uEACA,KACAA,mDAEAA,+DACAA,yGACA,kBACAA,kIAEAA,mIAGA,EAKA,wBACApG,YAIAC,YACAwH,iCACAG,0CACAC,sEAMA4lB,qBACAtZ,yCACAC,gCACAiU,0CACA,sDACA,EAOAqF,8BACAvZ,yCACAC,gCACA9B,qCACAqb,4CACAtF,0CAGAuF,2FAGAlB,0GACApE,qFAIAiE,kDACAsB,2CACAC,8CACAC,uBACAN,cACA,oBAEAhmB,iBACA,EAEA,GADAA,iCACA,+BACA,uCACA6gB,8BACA9V,oBACA9O,2BACA+oB,gCACAC,gCACAC,yDACAC,gDACAC,kCACAe,oCACA9pB,2DACAyoB,6BACA,GACA,4CACA,+CACA9kB,oIAEAqmB,UAEA,CACAxS,SACAC,QACAC,qBACAC,mBACA,CACA,CACA,EACA,8CACA,8CACAhU,gIAEAqmB,UAEA,CACAxS,SACAC,QACAC,qBACAC,mBACA,CACA,CACA,EACA,2CACAhU,8IAEAqmB,UACA,CAEAC,mBAEA,CACA,EAGA,0CAGA,6BACAxnB,mBACA+mB,8BACA7lB,8BACA,GACA,qCACAG,+CACAV,8EACA,+BACAO,iCAEA,GACAQ,cACAC,UACA,EAEA,EACA8lB,0CAGA,eAGAvmB,8BACA8lB,oDACA,+NACA,uDACAU,oDACA/mB,sCACA8mB,8BACA,oCAEA,EACA,EAIArlB,SAEA,0DACAoH,gCACA,EAIA5G,UACAjC,sCACA,sBACA,EAIAuN,SACA4Y,4BACA,EAIA3Y,UACA4Y,6BACA,EAIA/V,OACAuC,yBACA,EAIAtC,OACAsC,yBACA,CACA,GAEA,WAEA,GAEAla,MC/XA,uMA8CA,4CACA,gCACA,gCACA,CAiCA,0FACAsuB,aAEAC,aADAC,IAmDA,MAjDAC,+CACAF,qBACAG,WACAhmB,uCACAvB,oBACA,IAEAwnB,0BACAC,gBACA1Z,gBACAqZ,gBACAM,cACAC,eACApT,UACAvU,YACAgO,eACA/N,mBACA2nB,QACA,GACA5nB,QACAgO,YACA/N,4BACA2nB,QACA,GACAC,2BACA,cACAV,YACAruB,uBACA+Q,kBACAyd,iBAEAQ,sDACAA,sEACAR,+BACA,0EACAA,kCAIA,CACA,iBACAD,0BACAvuB,sBACAuuB,iCACAF,UACAY,iBAEA,GAEAV,GACA,CAtIAjnB,gFACAtH,sEACAQ,2EACAqQ,+FACAtP,mHACAC,yGAEAA,yBACAA,qBACAA,2BAEA,mFAKA,+BAGA,eACA,CARA,iCACAC,6DACA,qGA4BA,MApBAC,0BACAE,mEACAA,2GACAF,iCACA,6CACAE,mEACAA,2GACAF,iCACA,cACAE,mEACAA,2GACAF,iCACA,MACAG,iIACAA,sCACAH,oEACAE,qEACAA,6GACAF,iCACA,eACAA,MACA,GA6FA,wBAEA,GAEA3B,MC9IA,yXAEAS,2EACAP,kIACAkG,8GACA+e,sJACAgK,sJACApb,iJAuBA,yCACA3T,6BAIAC,OAWA,sCACAkU,yCACAC,gCACA,OACAsY,mGACAsC,wGACA,CACA,CAOA,yCAEAC,mEADAC,kBAYA,MAPAA,mBAHAD,sBAEA,gBACA5uB,4GACA,gBACAA,iIAGAA,qFAPAA,2GASA6uB,iBACA,CASA,+BAIA,MAHAznB,kCAGA0nB,wDACA,mFACA,wBAGA,sBAaA,MAXAvnB,yDACAymB,gBACAC,sBACAc,yBACAC,iDACA,EACAC,2BACAD,iDACA,CACA,GAEA,qCAEAN,kFAEA,kBAEAhe,QACA0K,SACA,EACA,iBACA,EAEA,EACA,uBAEA,6BACA,UACA,MACA8T,uBACA9nB,gCACA8U,wBAEA,EACA,MA5FAnX,WACAqC,gCACAG,0CACAunB,oCACAA,sCA2FA1nB,gCAEA0nB,wDACAE,mDACA,EACA,kDACA/qB,qCACAQ,4BACAtE,iCACA4qB,wCACAjoB,mCACAqP,2DACA,sCAEA,oDACA,OAEA,8BACA,OAEA,sBACA,OAEA,8EACA,6BACA,gFACA,4BAEA,CACA,EACA,CACA,GAEA,4BAEA,GAEA5S,MCxKA,yTA8FA,0CACA,gCACA,gCACA,CA/FAuH,gFACAtH,sEACAQ,2EACAyZ,0FACAha,kIACA4nB,yGACAtmB,mHACAC,yGACA2E,8GAEA3E,yBACAA,qBACAA,8BAEAkG,gFAKA,+BAEA,4BAKA,MAJAhG,cACAE,0EACAA,kHACAF,iCACAA,MACA,CAEA,+BAEA,qBAMA,MALAA,6BACAC,sHACA,MACAA,yEACA,aACAD,MACA,CAEA,+BAEA,4BAQA,MAPAA,qCACAE,qEACAA,6GACAF,iCACAG,+HACAA,sCACAH,qBACAA,MACA,CACA,+BAGA,iBACA,CAEA,+BAEA,4BAMA,MALAA,kCACAE,qEACAA,6GACAF,iCACA,UACAA,MACA,CApDA,iCACAD,6DACA,qGAyEA,MArBAC,uCACAE,wEACAA,gHACAF,iCACA,0CACAG,mIACAA,sCACAH,8BACAE,sEACAA,8GACAF,iCACA,oCACAG,6HACAA,sCACAH,oHACAG,8HACAA,sCACAH,uBACAG,8HACAA,sCACAH,oCACAA,MACA,GAuBAiuB,2BACAxvB,mBACAC,OASA,yCACAkU,yCACAC,gCACA,OACAob,2FACAR,yGACAzG,sHACA,CACA,CACA,kBACA,4CACA3gB,uFACAxC,YAEAA,WAEA,CACA,uBACAqC,0BACA,MA3BArC,WACAqC,gCACAG,0CA+BA6nB,qCACAtb,yCACAhR,sCACAgnB,gDACA,mCACA,IACAuF,MACA,OACA,qCACA,yFACA,EACA,6BACA7b,uBACAC,qCACAC,oBACAzL,uBACA,IACA,0CACAmM,iCACAtR,sCAEA,GADAoD,mBACA,8BAEA,GADAnB,eACAjC,8DACA,2DACAsE,2HAEAgN,OAEA,CACA6G,SACAC,QACAC,qBACAC,mBACA,CACA,CACA,EACA,KACA+T,cAGA,GACA,eACAG,SACAloB,2DACArC,aACA,8BACAA,cACA,2BACAA,WACA,2BACAA,WACA,EACA,EAIAuD,yBAEA,wDACAoH,gCACA,EAIA5G,2BACA,sBACA,EAIAsL,yBACA,4DACA,EAIAC,2BACA,sDACA,EAIA6C,qBACAuC,yBACA,EAIAtC,qBACAsC,yBACA,CACA,GAEA,kBAEA,GAEAla,MC1PA,0XAgGA,0CACA,gCACA,gCACA,CAjGAuH,gFACAtH,sEACAQ,2EACAyZ,0FACAha,kIACAoH,yGACAI,4IACAqM,iJACA3N,8GACA5E,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFAKA,+BAEA,4BAKA,MAJAhG,cACAE,0EACAA,kHACAF,iCACAA,MACA,CAEA,+BAEA,qBAMA,MALAA,6BACAC,sHACA,MACAA,yEACA,aACAD,MACA,CAEA,+BAEA,4BAQA,MAPAA,qCACAE,qEACAA,6GACAF,iCACAG,+HACAA,sCACAH,qBACAA,MACA,CACA,+BAGA,iBACA,CAEA,+BAEA,4BAMA,MALAA,kCACAE,qEACAA,6GACAF,iCACA,UACAA,MACA,CApDA,iCACAD,6DACA,qGAyEA,MArBAC,uCACAE,wEACAA,gHACAF,iCACA,0CACAG,mIACAA,sCACAH,8BACAE,sEACAA,8GACAF,iCACA,oCACAG,6HACAA,sCACAH,oHACAG,8HACAA,sCACAH,uBACAG,8HACAA,sCACAH,oCACAA,MACA,GA2BAuR,wBACA9S,gBAIAC,OAwEA,yCAEA,qBACAwH,+BACA,CACA,yBACAA,qBACA,CANA,wCAOAA,iCACA,gCACAmoB,oDACAnoB,sJAEAqmB,UACA,CAEA+B,gBAGA,MA1FAzqB,WACAqC,gCACAG,0CACAC,yEAKAioB,6CACA1b,iCACA9P,oCACAyrB,8CACAxH,mHACA6C,2CACA4E,iBACAC,aAGA,iDACA,SAIA,4DACA,SAIA,yEAGA,gCACA,SAKA,GADAD,yEACAA,0FACA,QAEA,SACArc,oEAEAsc,mEACAA,yBAIA,uDACA,EAKAN,yBACAG,gBACA1qB,YAEAA,WAEA,EAGA,6BACAyO,wBACAC,+CACAC,gBACAzL,mBACA,IAuBA,qCACA/B,mBACAkB,kCACA,GACA,qCACAG,+CACAV,oFACA4oB,gDACAroB,uCAEA,GACAQ,cACAC,UACA,EAEA,EACA8lB,0CAGA2B,SACAvqB,eAGAqC,2DACArC,aACA,8BACAA,cACA,2BACAA,WACA,2BACAA,WACA,mDACA8qB,+BACA,qCACA,uDACAjC,oDACA/mB,sCACA8mB,8BACA,oCAEA,EACA,EAIArlB,yBACA,wDACAoH,gCACA,EAIA5G,2BACAjC,sCACA,sBACA,EAIAuN,yBACA,4DACA,EAIAC,2BACA,sDACA,EAIA6C,qBACAuC,yBACA,EAIAtC,qBACAsC,yBACA,CACA,GAEA,eAEA,GAEAla,MCjTA,kQA4HA,6CACA,gCACA,gCACA,CAyLA,iDACA,kCACA,gCACA,CAwdA,kCAOA,4BACA6D,iCACA5B,yCAGAyJ,wCAQAA,0CACA,CAOA,qBACA,oCAOAA,kCACA,CApCA,cAqLA,MAhJAA,uEAGA5E,wBACA,kBACA,GAGAA,qBACA,iBACA,GAGAA,0BACAtB,WAGA+qB,6BACAC,iDACAnlB,+BACAolB,uCAGA,eAGAC,uDACAC,mDACAC,gDACAC,gIACAC,uHAEAN,sBACAnlB,kBAEAolB,YAEAM,oDACA,EAGA,oBAGAR,kFACA/qB,sBACA+qB,0CACAA,wCACA/qB,oBAGA,GAGA+qB,mFACA/qB,qBACAA,8EAEA,GAGAirB,yEACA,WACAjrB,sBACAmF,2CACAnF,4CACAmF,gCACAnF,oBAEAA,gEAIA,GAGAirB,4EACAjrB,qBACAA,4EAEA,GAGAirB,8EACA,kBACAjrB,sBACA+P,0CACA,oCACAyb,0BACAxrB,2FAEA,gEACAyrB,gBAEA,kCAEAzrB,mBACAlB,cAIA,GAGAmsB,0EACA,SACAjrB,sBACAkP,eAGA,mCACAA,gCACApQ,YAGA,GAGAksB,0EACA,cACAhrB,sBACAkP,eACAwc,uBAGA7lB,qCACAA,kCACAklB,0CACA7b,8BACAA,8BAGAlP,kBAGAA,kBAEA,EACA,GAGAkG,8BAGAA,sBACA,CAx8BAnE,gFACAtH,sEACAsB,8GACAsV,mHACAzQ,8GACA5E,mHACAC,yGAEAA,yBACAA,qBACAA,2BAEA,mFAKA,+BAGA,eACA,CAEA,+BAEA,6BAoBA,MAnBAE,qLACAC,4LACA,kQACAA,8LACA,+NACAA,kLACA,+MACAA,oMACA,iOACAA,sLACA,iNACAA,sMACA,mOACAA,0LACA,8MACAA,gOACA,gOACAA,oLACA,yLACAD,MACA,CAEA,+BAGA,wDACA,CAEA,+BAGA,wBACA,CAEA,+BAEA,6BAGA,MAFAA,mMACA,oDACAA,MACA,CAEA,gCAGA,qBACA,CAEA,gCAEA,6BAGA,MAFAA,6LACA,oDACAA,MACA,CAnEA,iCACAD,6DACA,yHAyGA,MAtCAC,sEACAG,gIACAA,sCACAH,yIACAC,wNACA,sFACAA,oNACA,mCACAE,oIACAA,sCACAH,4QACAC,gMACA,kCACAA,4KACA,2BACAE,qIACAA,sCACAH,0LACAG,oIACAA,sCACAH,uCACAC,wOACA,8BACAE,qIACAA,sCACAH,uLACAG,sIACAA,sCACAH,uCACAC,sPACA,8BACAE,uIACAA,sCACAH,6QACAC,4QACA,4EACAA,4QACA,+CACAD,MACA,GAMAF,yBACAA,qBACAA,8BAEAie,kFAKA,+BAEA,4BAoBA,MAnBA/d,+DACAG,oJACAA,sCACAH,yBACAE,mEACAA,2GACAF,iCACA,+DACAE,sEACAA,8GACAF,iCACA,0DACAE,sEACAA,8GACAF,iCACA,yIACAG,sJACAA,sCACAH,gCACAA,MACA,CACA,+BAGA,cACA,CAEA,+BAGA,iBACA,CAEA,+BAEA,oCAcA,MAbAA,0IACAC,4QACA,oFACAA,4QACA,gJACAC,yEACAA,iHACAF,iCACA,cACAC,oMACA,iEACAA,oMACA,oJACAD,MACA,CAEA,+BAEA,4BASA,MARAA,0CACAE,sEACAA,8GACAF,iCACA,+EACAG,iIACAA,sCACAH,wCACAA,MACA,CACA,+BAEA,4BA4BA,MA3BAA,0EACAG,oJACAA,sCACAH,yBACAE,mEACAA,2GACAF,iCACA,uEACAE,sEACAA,8GACAF,iCACA,kEACAE,sEACAA,8GACAF,iCACA,wEACAC,iKACA,IACAA,8JACA,2EACAC,sEACAA,8GACAF,iCACA,oFACAG,gJACAA,sCACAH,yEACAA,MACA,CACA,uCAEA,4BA8CA,MA7CAA,oEACAE,oEACAA,4GACAF,iCACA,iBACAE,mEACAA,2GACAF,iCACA,uBACAE,yEACAA,iHACAF,iCACA,wFACAE,sEACAA,8GACAF,iCACA,qEACAG,wJACAA,sCACAH,+CACAG,kIACAA,sCACAH,2DACAE,sEACAA,8GACAF,iCACA,OACAC,8JACA,KACAC,qEACAA,6GACAF,iCACA,6EACAE,qEACAA,6GACAF,iCACA,mFACAE,sEACAA,8GACAF,iCACA,2CACAE,sEACAA,8GACAF,iCACA,2FACAA,MACA,CACA,gCAGA,aACA,CAEA,gCAGA,YACA,CAEA,gCAGA,6BACA,CA1KA,iCACAD,6DACA,kIA8KA,MAJAC,4DACAG,8HACAA,sCACAH,wBACAA,MACA,GA6BAwvB,WACA3sB,aACA4sB,eACAC,kBACAC,SACA,EAOAC,SACAC,gBACAC,sBACAC,0BACAJ,gBACAK,oBACA1vB,kBACAD,oBACAE,gBACA0vB,gBACAjP,YACAxO,0BACA3P,OACAga,kBACA9L,2BACA+L,gCACA,CACA,EAOAoT,wEAOAC,YACAvwB,2BACAwwB,mCACAxmB,+BACAymB,2BACAC,4CACAC,oCACAC,8DACAC,0DACAC,kEACAC,4DACAC,gCACAC,6DACAC,wDACAC,sEACAC,gEACA1vB,4BACA2vB,wDACAnwB,kCACAowB,8DACA/tB,4BACAguB,wDACAC,sDACAC,wCACAC,4BACAC,gDACAC,kCACArK,kBACA4I,2BACA0B,uCACAxB,iBACA5vB,qBACAC,mBACAoxB,4BACAC,8BACAC,+BACAC,sBACAlC,iBACAK,oBACA,EAQA8B,YACAC,OACAC,oEACA1xB,8BACAD,gCACA4xB,0BACA,EAMAC,cAMAlW,mDACAzY,cACAtE,KACAsE,MACAtE,uCACAA,OACAA,kBACAwF,yCAGA,EAOA0tB,qEACA,UAMA,MAJA3xB,OADA,qBACA4xB,sBAEAA,kBAEA5xB,KACA,EAMA6xB,mDACAze,kGACAwe,6BACA5f,KAGA,gCAGAoB,wCAGApB,mEACAoB,0EAGAwe,wEACA,kHAGA,+BACA,EAKAxoB,oCACA/F,WAGAyuB,8EAGAC,8BACAA,UACAD,iDAIA,iEACAE,oBACAC,mEACAC,+CACA7uB,uFACA,GACA,2BACA,EAMA8uB,8CACA/D,8BACAgE,6DAYA,MATAzsB,wCAGAyoB,+DAGAA,mCACAgE,6DACAhE,gCACA,IACA,EAIAiE,iCACA3d,+EACA,EAQAqI,yBACA1B,0CACA9K,mDACAqhB,8BACAhyB,YACAC,WACAC,UACAC,SACAC,OACA,EACAsyB,iEAYA,GAXA,aACA,6BAGA,iFACA,kGACA,4GACA,+EACA,4DAGA,oBACA,gCACA,kCACA,sDACA,kBACA,oDACA,4DACA,gIACA,sDACA,iDAEA,sEAEA,KACA,iCACA,kCACA,4BAUA,MANA,6EAKA,uBACA,IACA,EAOAC,mDACAlX,2EACA9K,6DACA7P,8DACAjC,6DAGA8R,mBACA7P,kBACAjC,eAGA,cAGA,iDACA+zB,QACAxgB,QACAygB,YACAD,mBAEAC,oBACAD,iBACAxgB,mBAEAygB,cACAD,oBACAxgB,sBAEAygB,eACAD,qBACAxgB,uBAEAygB,YACAD,mBACAxgB,sBAEAwgB,mBACAxgB,qBAEAygB,oBACAC,WACAD,wBAGAA,sBACAA,aACA,EACA,EAQAE,mDACA,cACAC,8CACAC,0BACA,UACAA,6CAEAD,oBACA,EAOAE,yCAEAxE,2BACAyE,sFACAC,uCACAC,mBACAC,4CAuBA,MAtBAA,oBACAD,6CAIAE,MACA,yBAIA7E,2DACA0E,iDACAtxB,mCASA,mDACAqxB,QACA,EAKAK,wCAEA9E,2BACAyE,yDACAC,uCAIA,MADA,0BACAD,QACA,EAMAM,wCACA,qFACAlkB,qCACA,EAOAmkB,yDACA,gDASA,MARAC,mBACA,uEAEAjE,UACAkE,qCAEAA,kCAEAlE,SACA,EAMA1B,6BASA,MARA,2BACApY,wBAEAA,KACA,YAEA,YAEA,IACA,CACA,EAqMA,uBAEA,GAEA3X,MCh9BA,0RAmCA,6CACA,gCACA,gCACA,CAwDA,iDACA,kCACA,gCACA,CAiDA,kCAOA,kCACAY,8CACAoyB,iFACA,2CACAzxB,8FACAA,gCAMAA,wCAGA,CAOA,yEACAA,2DACAA,sCACAA,6GACA,qDACAuD,+CACA8wB,wCACA,yDACA,IACAzuB,EACA,OACA,sBACA,GACA5F,gEACA,GACAA,4EACA,CAQA,6DACA,MACAs0B,qBACAC,kBACA,wBACA,4BACA,gBACArzB,WACA,EAwDA,MAvDAxC,0CACAA,8CACA,iBACA41B,sBACAE,cACA3uB,wBACAtC,QACA,EACAkxB,sCAEAA,yBACAD,mCAEAA,cACAjxB,QACA,EACAkxB,sCAGA/1B,+CACAg2B,wBACAC,wBAEA,iBACA/uB,eACAtD,0BACA,EACAkyB,mCACAI,4EACAF,wBACAE,sBACAA,8CACAF,kBACAE,yBACAA,yEAEAA,oBACAA,6DAGAA,iBADAF,kBACA,WACAA,gBACA,SAEA,SAEAG,qCAEAD,sBACAL,qBACAK,+BAEA,EACA,EACA,GACAH,QACA,CApHA,cA0HA,oBAMAhC,gCACAqC,kCACAC,qDACA,gCACAA,8BACAC,iGACAC,+EACA,oBACAv2B,kDAEA,GADAw2B,oFACAA,gBACA,QAEA,GACA,sFACA,CACA,EAKAnC,eAEA,WACA,EAQApV,oBACA,gFACA1B,0EACAkZ,qCACAC,+FACA,aACA,yBACA,wEAGA,yDACA,uBACA,sDACA,4DACA,kCACA,sDACA,kFACAC,+DACA,KACA,mCACA,4BAOA,MADA,wBACA,IACA,EAKA3B,iBACA,uBACA,+EACA4B,gCACAzB,wCAEA,4DACAx0B,eACA,mEASA,kDACA,CACA,EA2BA,MA1BAW,mGACA,gCACA,2BACA,mBACA,sDACA,gCACA,0BACA,mCACA,eACAkvB,uCACAM,qDACA+F,oDACA,EACA,kDACAnwB,mBAKApF,0BACA,EACA,0BACA,oDACA,2BACA,qDACA,GACAA,sBACA,CAjYAtB,sEACAQ,2EACAs2B,iJACAC,0KACA5wB,8GACA5E,mHACAC,yGAEAA,yBACAA,qBACAA,2BAEA,mFAKA,+BAGA,eACA,CARA,iCACAC,6DACA,yHAgBA,MARAC,gDACAG,gIACAA,sCACAH,4HACAC,gMACA,+SACAA,4QACA,+CACAD,MACA,GAMAF,yBACAA,qBACAA,2BAEA,qFAKA,+BAEA,qBAKA,MAJAE,oBACAG,8HACAA,sCACAH,eACAA,MACA,CACA,+BAEA,qBAKA,MAJAA,wBACAG,iIACAA,sCACAH,mBACAA,MACA,CACA,+BAEA,4BAUA,MATAA,gIACAE,sEACAA,8GACAF,iCACA,+BACAE,sEACAA,8GACAF,iCACA,2HACAA,MACA,CAEA,+BAGA,0HACA,CAzCA,iCACAD,6DACA,8FA6CA,MAJAC,2DACAG,kKACAA,sCACAH,wBACAA,MACA,QA6BAwvB,YACA3sB,aACA6sB,iBACA,EAOAS,YACAvwB,2BACAywB,2BACAE,oCACA+E,0BACAC,8CACA,EA2PA,uBAEA,GAEAl3B,MCzYA,maAyFA,yCACA,iDACA,oBACA,CAOA,mCACA,gCACAm3B,uBACAC,yCACAA,8DACAA,6DACAA,uCACA9W,oEACA6W,oBACAA,iBAEAA,iBAKA,CAOA,kCACA5iB,yCACAC,gCACA5T,iCACA8R,qCACA2kB,iGACA,yEACA,CA/HAp3B,sEACAQ,2EACA6G,yGACAI,4IACAxH,kIACAkG,8GACAkxB,oLACAC,6KAuBAvjB,aACAwjB,SACAvjB,wBACAC,mDACAC,cACAzL,0BACA,EACA+uB,WACAxjB,0BACAC,0DACAC,cACAzL,4BACA,EACAgvB,mBACAzjB,wBACAC,2DACAC,gBACAzL,4BACA,EACAivB,qBACA1jB,0BACAC,kEACAC,wBACAzL,4BACA,EACAkvB,YACA3jB,sBACAC,mCACAC,aACAzL,sBACA,EACAmvB,YACA5jB,sBACAC,mCACAC,YACAzL,sBACA,EACAovB,kBACA7jB,6BACAC,qCACAC,uBACAzL,wBACA,EACAqvB,kBACA9jB,6BACAC,qCACAC,uBACAzL,wBACA,CACA,EAqDAsvB,sBACA53B,cAIAC,qBAoBA,qCACA,wCAIA,MAHAmF,sBACAiP,yDAEAT,oBACA,CAOA,wCACA,8DAIA,MAHAxO,sBACAiP,uEAEAT,oBACA,CAMA,oCACAikB,4CACAvyB,mCACA,OACAwyB,mGACAC,8FACA,CACA,CAMA,2BACA,uCACA,uDACA,CAQA,iCAEA,MADA3yB,gBACAqC,iDACAhE,SACAu0B,IACA,mBACA,iEAGAx3B,kBAGAy3B,8DAGA7yB,0CACAA,aACA,oBAEAA,2CACAA,aACA,EACA,CAKA,2BACA,uCACA8yB,uDACAC,+DACAtH,kCACA,CACA,CAOA,kCACA,gFACAuH,UACAhzB,yBACAA,wBAEAA,yBACAA,uBAEA6yB,mEACA,MAtHA7yB,WACAqC,gCACA0M,wCACAC,gCACAxM,0CACAC,sEACA6H,8BACA,+CACA2oB,cACA,EACAC,+DACA,2EACA,yBA2GA,wFACA,mGACAC,qCACA,gCACA,gCACAnzB,eACAqC,iCAEA,qCACA,+BACAopB,uBAEA,yBACAppB,sCACA,YAGAA,4CACArC,2CACA,GACA,yBAGA,qGACA,yCACAmB,mBACAkB,sCACA,GACA,0IACA,2CACAlB,mBACAkB,mCACA,GACAG,mCACAC,sBACAX,6FACAO,mCACA,GACAQ,aACA,GAEAJ,wBACAX,+FACAO,sCACA,GACAQ,aACA,IAGAuwB,mBACA,YAIA,eACAnD,yCAGA5tB,kCACA+wB,mBACApzB,YACA6yB,qEAEA7yB,WAEA,iCACAd,qCACAQ,4BACAwN,qCACAnP,iCACAq1B,mBACAP,iGACA7yB,iDACAqzB,iDACA,GACArzB,YACA6yB,qEAEA7yB,WAEA,yCACAozB,mBACApzB,aAEA,2CACAozB,mBACApzB,cAEA,2BACAA,WACA,2BACAozB,mBACApzB,WAEA,iCACAozB,wCACAE,iBAEA,oCACAF,6CACAnD,aAEA,EACA,EAIA1sB,4BACAb,iCACA6wB,0CACAA,mDACA,EAIAxvB,2BACAjC,sCACA,wBACA,EAIAuN,8BACAhN,iCACA0M,wCACAC,gCACA,6BACA,2BACA,wBACAwkB,gDACA,6BAEA,8BAEA,qBACA,sBAGA,4BAFA,2BAKA,EAIAlkB,2BACA,8BACA,8BACA,4BACA,oBACA,4BAEA,wBACA,EAIA6C,qBACA,oCACAkhB,oBACA,2BAEA,2BAEA,yBACA,sBAGA,sBAFA,qBAIA,EAIAjhB,qBACA,2BACA,yBACA,qBACA,CACA,GAEA,aAEA,GAEA5X,MC5bA,+VA8FA,0CACA,gCACA,gCACA,CA/FAuH,gFACA9G,2EACAyZ,0FACAha,kIACA4nB,yGACAtmB,mHACAC,yGACAsS,iJACA3N,8GAEA3E,yBACAA,qBACAA,8BAEAkG,gFAKA,+BAEA,4BAKA,MAJAhG,cACAE,0EACAA,kHACAF,iCACAA,MACA,CAEA,+BAEA,qBAMA,MALAA,6BACAC,sHACA,MACAA,yEACA,aACAD,MACA,CAEA,+BAEA,4BAQA,MAPAA,qCACAE,qEACAA,6GACAF,iCACAG,+HACAA,sCACAH,qBACAA,MACA,CACA,+BAGA,iBACA,CAEA,+BAEA,4BAMA,MALAA,kCACAE,qEACAA,6GACAF,iCACA,UACAA,MACA,CApDA,iCACAD,6DACA,qGAyEA,MArBAC,uCACAE,wEACAA,gHACAF,iCACA,0CACAG,mIACAA,sCACAH,8BACAE,sEACAA,8GACAF,iCACA,oCACAG,6HACAA,sCACAH,oHACAG,8HACAA,sCACAH,uBACAG,8HACAA,sCACAH,oCACAA,MACA,GA2BAqS,YACAilB,MACAhlB,eACAC,yCACAC,gBACAzL,eACA,EACA0L,KACAH,mBACAC,+CACAC,gBACAzL,4BACA,CACA,EAOA8kB,sDACAjZ,yCACAC,gCACA5B,mEACA6B,6BACA,2CACA,EAOA,qDACA,4EACAA,8BACA0iB,4BACAA,wDACA3wB,uGAEA,EAKA,wBACApG,YAIAC,OAWA,kBACAwH,iBACA,MAZAA,iCACAkoB,YACA,oDACA,gCACA,iBAGA,eAEA,EAIA,wCACA,kCACAlb,+BACAN,wCACAC,gCACA5B,mEACA8V,iGACA/hB,mBACA,gCACA,eACA+hB,uBACA7gB,uFAEAgN,OACA,CAEAqkB,SAGA,GACAnJ,SACA,eACAloB,8BACA,kBACA0M,yCACAC,gCACA5B,mEACA+a,mCACA,CACA,oIACA,EAIA5kB,yBACA,wDACAoH,gCACA,EAIA5G,2BACA,sBACA,EAIAsL,yBACA,4DACA,EAIAC,2BACA,sDACA,EAIA6C,qBACAuC,yBACA,EAIAtC,qBACAsC,yBACA,CACA,GAEA,WAEA,GAEAla,MClQA,yMAEAC,sEACAQ,2EACAP,kIACAilB,yJAmBA3U,gCAMA2oB,iCAKA/4B,yBAKAC,YACAwH,iCACAG,0CACA8H,8BAgCA,MA/BAjI,+CACA0M,yCACA6X,8EACA,gEACA,yBAEA,kEACAC,wCAEA8M,4HACA,qBACA,qCACA,0DACAlnB,UAEAkT,4CACAlT,eAEA,6CAEApK,6CACAA,4FACAA,iCACAsJ,SACAtJ,4CACA,IAEA,CAEA,CACA,GACA,IACA,CACA,GAEA,wBAEA,GAEA7H,MCnFA,oIAEAS,2EACAP,qIAyBAk5B,8DAOAC,sCAEA,MADA1yB,2BACAyyB,WACA,EAMAE,iCAKAl5B,yBAIAC,qBACA,aACA,EAIAkJ,2BACA,cACA,EAIAsL,yBACA0kB,oDACA,EAIAzkB,2BACAykB,uDACA,CACA,GAEA,wBAEA,GAEAv5B,MChFA,wHAEAE,kIAmBA,qCACAE,yBAIAC,qBACA,2DACAm5B,6CACAD,6EACA,kBACAE,sBAEA,EACA,EACA,CACA,GAEA,wBAEA,GAEAz5B,MC1CA,0QAEAC,sEACAQ,2EACA6G,yGACAI,4IACAtB,8GACAlG,qIAwBAsQ,yBAMAC,qCAMAiK,eAEAgf,6BAEAC,4BACA,EAKAC,0BACAx5B,kBAIAC,OAoBA,2BAEA,oHACA,CAKA,8BACAw5B,kBACAr0B,YAEAA,WAEA,CACA,wBACAA,2BAGAA,mDACAs0B,eACAC,mBAEAC,oBAEA,CACA,8BACAx0B,0BAGAA,sDACA,CACA,4BACA,aACAA,2BAGAy0B,sDACAz0B,qBACAA,sBACAsC,kCACAmyB,yBACA,kDACA,6BACA,gCACA,iCACAttB,0CACAA,iBAEA,GAEA,CACA,6BACA,aACAnH,2BAGAy0B,sDACAz0B,mDACAA,sBACAA,oBACAy0B,yBACA,wCACA,8BACA,oCACA,oEAEA,GACA,MAvFAz0B,WACAqC,gCACAsI,gEACAnI,0CACAC,iEACAH,wDAGA,2DACAmM,qBACAC,8BACAC,iBACAzL,4BACA,GA6EA,mCACA/B,mBACAkB,2CACA,GAGAG,kCACA/H,gDACAqH,8EAEAO,oCACA,GACAQ,aACA,EACA,GAIA,eAGAR,8FAEArC,oEACAA,qCAIAq0B,mBACAr0B,iBAJAA,YAMA,0CACAA,aACA,2CACAA,eACAw0B,mBACA,GAGAlzB,sCACA+yB,mBACAK,cAEA,GAEApzB,2CACAgzB,gBACAE,mBAEA,EACA,EAIAzwB,2BACAjC,mCACA,EAIAuN,yBACA,oBACA,EAIAC,2BACA,qBACA,EAIA6C,qBACA,kBACA,EAIAC,qBACA,kBACA,CACA,GAEA,iBAEA,GAEA5X,MC5OA,qOAoBA,wCACA,gCACA,gCACA,CAwBA,4CA4CA,gCACA,6EACA,cACAuwB,6BACAA,qDACA5pB,oBACAA,mBACAnB,aACA,EACA,2BACA,iCACA+qB,gCACA,mCACA,CAxDA,GACA4J,aACAC,SAKArK,+BACA,mBACA,cAEA,WAEA,EAKAsK,yBACA,mCAIA,MAHAlqB,kCACAA,gDACA,2BACA,IACA,EAKAmqB,qBACA,mCAIA,MAHAnqB,+BACAA,qDACA,2BACA,IACA,CACA,EApCAoqB,cAkHA,MArDAA,gBAIA1lB,yBACA,oEACAjI,6CACAutB,YACAK,yCACA5tB,4BACA,sBACAutB,kCACA,GACA,2BACA,EAIArlB,2BACA,oEACA0lB,4CACAL,gCACAG,cACAA,cACA,GACAH,YACA,2BACA,EAKAM,uCACA,sCACA,wBACA,GACA,YACA,EAKAC,4CACA3qB,gBACAA,qCACA,yBACA9P,sDACAq6B,aAEA,EACA,CACA,EACAK,yBACAJ,aACA,CAjKAt6B,sEACAsH,gFACAozB,8GACA5D,iJACAv1B,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFAKA,MAJA,kCACAjG,+CAGA,yFACA,GAuBAmW,oBA2HA,2BAEA,GAEA7X,MCzKA,0UAEAS,2EACAP,kIACAoH,yGACAI,4IACAtB,8GACAw0B,wKAyBApqB,6BAMAC,yCAMAoqB,cAKAngB,eACAogB,wBACAC,qBACA,EAKAnzB,sBACAxH,sBAIAC,qBAQA,2BAEA,6IACA,6DACA,CACA,yCACA,8DACA,uDACA,CACA,8BACAw5B,kBACAr0B,YAEAA,WAEA,CACA,wBACA+0B,kCAGAS,iBAFAC,eAIA,CACA,yBACA,4CACAhoB,kCACAsnB,uBACAzqB,mCACAyqB,gDAEA/0B,qBACAA,qBACA,CACA,0BACA,4CACAyN,kCACAsnB,oCACAM,kDAEAN,wBACA/0B,sBACAA,mBACA,MAjDAA,WACAqC,gCACAG,0CACA8H,8DACA7H,wEACA8N,mDACA,qDA8CA,2DACA7B,2BACAC,kBACAF,yBACAvL,yBACA,GAGA,mCACA/B,mBACAkB,2CACA,GACAG,kCACAC,wBACAX,+FACAO,2CACA,GACAQ,cACAC,UACA,GAKA,eAGAT,oCACA,4CACAoL,kCACAnD,kCACA+qB,uBAEAK,oBACA,0CACAA,qBACA11B,aACA,oCACAw1B,gBACA,2CACAx1B,eACAw1B,gBACA,yCACAnB,mBACAK,cAEA,GAEApzB,uCACAk0B,gBACA,EACA,EAIAzxB,2BACAjC,qCACA,EAIAuN,yBACA,oBACA,EAIAC,2BACA,qBACA,EAIA6C,qBACA,kBACA,EAIAC,qBACA,kBACA,CACA,GAEA,aAEA,GAEA5X,MC3MA,qVAuCA,4CACA,gCACA,gCACA,CA8CA,mDACA,yBACAm7B,oBAEAC,oBADAzyB,YAEA0yB,kBAGAC,sDAGAC,MAIAC,yBACA,CACAC,YACA,cACAC,8CACA,IACA16B,QACA,OACA,eACA,yBACA06B,wCACAA,sDACA,EAMA3M,QACA,0CACA,0CACA,6BACA,YACA,qBACA,EAMA4M,iBACA,kBACA,EAMAC,0BACA,4BAGA,0FACA,OAMA,GAFAj1B,oBACAA,mBACA,oBACA,OACA,KACAk1B,qCAEAC,qDACA,IACA96B,QACA,QACA,kCACA,GACAm6B,0DACA,YACA,oBACA,qBACA,EAIAY,sBACA,iCACApzB,aACA,8BAEA,EAIAqzB,4BAEA,yDACA,OACA,KAGAC,0CACA,CACAC,uBACA,mBACAC,2CACA,IACAn7B,QACA,QACA,oCACA,wFACA,GACAm7B,2CACAhB,+BACA,oBAEA,EAQAiB,eACA,MACAC,kBACA,cAGA,GAFA1zB,iFACAA,oCACAA,aACA,MACA3H,SACAs7B,GACA,cASA,MARA/0B,sDACAg1B,8BACAA,aACAA,gCACA,oBACAA,iBAEA,qBAEA,CACA,uBACA,WACA,EAIAC,0BACArB,sCACA,mBACA,EAMAsB,0BACA,yBACA,MACAhB,YACA,cACAL,sBACA,qDACA,IACAp6B,QACA,QACA,eACA,yBACA06B,qCACAA,sDACA,WACA,EAOAgB,yBACArB,mBACAkB,wBACA,EAOAI,mCACA,0BACAp1B,+CACA,EAIAoa,OACA,MACA0a,kBACA,cACAE,cACAA,oBACA5zB,iFACAA,iBACA,yCACA,EAMAi0B,kBACAj2B,sBACA,mCACA,2BACA,yBACA41B,aACA,4CAEAA,cACA,0CAEA,EAIAM,gBACA,mCACA,kDACA,WACA,EAIAC,iBACA,qCACA,sCAGAC,YACA,mBAEA,EAIAC,oBAEAC,oBACA,CACAC,EACAC,CACA,qBACAC,4DACA,4CACA,CACA,EACAC,2CA8FA,MA7FAC,6BACAC,4CACAF,2DACA,iDACA,2EAEAG,8CACA,sBACA,0BACA,IACAC,KACAC,gBACAC,gBACAtC,iCACAhpB,GACA,mBACA,SACAorB,4DAEAj3B,4BACAo3B,iDACAC,+CACAC,uDACAC,kDACAC,2CACAC,uDACA5C,iCACA70B,oCAGA,oDACAguB,cACA0J,eACAC,UACAC,yBACAC,aACAZ,OACAa,QACAjsB,MACAksB,QACA,CACA,EACAC,8BACAzgB,8CACA0gB,6BACA,4BACA,CACA,GACAC,4CACA,oCACAC,mBACAv+B,WACA,8BACA,GAGA49B,2BACAY,WACAC,aACAC,OACAC,oBACAC,mBACA,EACAtd,0BACAud,OACA,qCAGArB,qCAEAE,gEACAC,+CACAE,iDACA1B,kDACAA,oCACAjmB,qDACA,mBACA,GACAijB,oDAGA,qBACA,wBACA,yCACA,wBACA,yCACA,2BACAiE,iDACA,yBACA,YACAjE,sDACA,GACA8D,0BACAA,YACA,CAvbA91B,gFACA9G,2EACAe,mHACAC,yGACAF,8GACAm9B,yGACAnB,kIACAD,kIACAhnB,yGAEA7U,yBACAA,qBACAA,2BAEA,mFACA,iCACAC,6DACA,wGAkBA,MAfAC,iMACAC,gLACA,mOACAA,8KACA,kJACAA,kMACA,2LACAA,oMACA,4RACAA,4NACA,2OACAA,sLACA,6KACAA,gLACA,uGACAD,MACA,QAuBA+Y,gBACA2hB,6CACAZ,gCACAgC,SACAC,kBACAC,mBACAtC,eACAhpB,MACA,EACA6sB,iBACAC,2BACA,EAmXA,8BAEA,GAEAn/B,MC/bA,wGA4BAo/B,mCACA,CACAj8B,UACA,6BACA,CACAk8B,iBACA,gBACA,EACAC,oBACAC,QACAC,gBACA,IACA,IACA,cACA,CACAC,WACA,sFACAC,8DACA,OACAv8B,WACAnC,oCACAs7B,kCACA,CACA,EASAqD,4CACA,MACAlmB,KACA,sGACA,gDACA,EAOA,mCACA,MACAmmB,mBACAC,gBACA,KACAC,gBACAC,0BACAC,eACA,IACA,IACA,WACA,uDACA,IACA1D,GACA,OACA,WACA,qGACA,EAEA,0BAEA,GAEAt8B,MC/FA,yhBAEAC,sEACAQ,2EACA6G,yGACAI,4IACAxH,kIACAkG,8GACAY,6HACAC,gKACAg5B,gKACAC,qKAqBA1vB,sBACAC,kCAKA,0BACArQ,eAIAC,YACAwH,iCACAG,0CACAC,yEACAo1B,cACA8C,iBACAC,iCACAjwB,sDACAkwB,iDACAC,mDACAC,2DACA,IACAv/B,QACA,OACA,eACA,eACA,mCACAmG,qBACAiC,8BACAxC,8FACAC,gBACAuD,QACAa,YACA,iBACAoyB,6BACA,4BACAx1B,0CAEA,uBACAw1B,6BACA,gCACAx1B,8CAEA,sBACAw1B,4BACAx1B,mDAEA,kBACAqa,gBACA,kCACA,4BAEA,IACA,2CACAmb,mCACA,oCACAmD,yEACA,CACAx/B,QACA,oCACAA,wCACA,2BAEA,CACA,EACA,EAMAy/B,qBACA,kBACA,2DACApD,gEACA,yBACAx1B,2CAEA,SACA,CACA,mBACA,EAQA64B,4HAKAxG,kBACAwG,eACA,YAEA,WAEA,EAOAC,kBACAP,wBACA,qBACA,2BACA,qBACA/C,2BACAA,mBAEA,EAOAuD,mBACA,0BACA,4BACA,+BACA,2BACA,sBACA,sBACAvD,2CACAA,qBACAA,qBAGA,EAKAwD,gBACA,2BACA,yBACAD,gBACA,4BAEAD,eACA,2BAGA,EAGA,2DACAhV,qCACA1X,uBACAE,kBACAzL,0BACAwL,iCACA,GAGA,2BACAvN,mBACAkB,2CACA,GAGAG,kCACA/H,0CACAqH,sEACA,6EAGA,mEACAO,0CACA,GACAQ,aACA,EACA,GAIA6xB,eACA,eACA,YAGAryB,8BACAqyB,eACA,cACA,oCACA,aACA,qCACA0G,gBACA,cACA,mCACAF,gBACAG,YAEA,2CACA,6BACA,yBACA,oCACAL,yEACA,CACAx/B,QACA,oCACA,iCAIA,YAHA,kDACAw/B,iCAIA,CACAnD,6BACA,CAEA,wBACA,wBAGA8C,yIACA7D,gEACA,IACA6D,wBAKAM,mDACA,YACA,0BACA,4BACAI,gBARAD,oBACA,aASA,EACA,EAIAr3B,UACAjC,qCACA,EAIAuN,SACA,oBACA,EAIAC,UACA,qBACA,EAIA6C,OACA,kBACA,EAIAC,OACA,kBACA,CACA,GAEA,aAEA,GAEA5X,MClTA,yLAwBA,+CACA,gCACA,gCACA,CAsCA,mCACA,6BAqCA,MAhCA8gC,4CAOAC,8BACAv7B,WACAw7B,oCAQA,MAPA,mEACA,+BACA,wBACA/gC,mBACAuF,8BACA,UAEA,IACA,CACA,0DACAA,WACAgB,2BACAwF,oCACAxF,oCACAA,mDACAG,mBACAnB,cACA,4CACAmB,mBACAnB,cACA,EACA,UACAs7B,wBACA,CAtGA7gC,sEACAuB,mHACAC,yGACAw/B,iJAEAx/B,yBACAA,qBACAA,8BAEAkG,gFACA,iCACAjG,6DACA,wGAQA,MALAC,mJACAC,sNACA,gGACAA,kMACA,4EACAD,MACA,GAuBA+Y,eACAwmB,aACAC,aACAC,uBACAC,UACAC,aACAC,aACAC,aACAC,WACAtC,4BACA9sB,OACAorB,QACAiE,gBACA,EA+CA,8BAEA,GAEA1hC,MC9GA,sUAEAC,sEACAQ,2EACA6G,yGACAI,4IACAxH,kIACAyhC,kIACAv7B,iHAwBAoK,2BAMAC,uCAMAiK,eACAskB,MACA4C,MACA,EAKAC,2BACAzhC,oBAIAC,OAOA,mBACAshC,uCACAn8B,sBACAA,qBAKAA,uBACA,2BACAA,sCACAA,8BACAA,cAEA,wBACAA,sBACAA,uBAMAA,yBACA,SACAs8B,oBACAC,6BACA,EACA,CAsCA,qBAEA,qHACA,CAKA,wBACAC,YACAx8B,YAEAA,WAEA,MArFAA,WACAqC,gCACAsI,gEACAnI,0CACAF,wDACAG,sEA+BA,cAGA,2DACAgM,uBACAvL,mBACAwL,qCACAC,gBACA,GAGA,mCACAxN,mBACAkB,2CACA,GAGAG,kCACA/H,gDACAqH,gFAEAO,oCACA,GACAQ,aACA,EACA,GAIA,eAsBAR,8EACArC,aACA,2CACAA,eAEAvF,8BACA,GAEA6G,sCACAk7B,cACA,uBACAx8B,qBAEAA,6BACAy8B,UACA,gBACAhiC,+BAGA,EACA,EAIAsJ,2BACAjC,qCACA,EAIAuN,yBACA,oBACA,EAIAC,2BACA,qBACA,EAIA6C,qBACA,kBACA,EAIAC,qBACA,kBACA,CACA,GAEA,kBAEA,GAEA5X,MC1MA,qeA0BA,8CACA,gCACA,gCACA,CA3BAuH,gFACAtH,sEACAQ,2EACAyhC,sJACAC,+KACAC,wMACA96B,yGACAI,4IACAxH,kIACAkG,8GACA5E,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFAKA,MAJA,kCACAjG,+CAGA,qDACA,GA4BA2gC,mBACAZ,WACAJ,UACAhvB,OACAorB,QACA0B,4BACAmD,qBACA,EAMAC,6BACAd,WACAJ,SACA,qBAMAmB,iCACAnB,UACAI,WACAgB,YACAC,OACAC,SACA,CACA,CACA,qBAKAF,0BACAriC,kBAIAC,qBAYA,wCACAkU,yCACAkU,0CACAjU,gCACA,OACAiuB,6EACAG,gFACAC,uFACA,CACA,CAMA,qBAKA,2CACA,sEACA,CAKA,wBACAb,YAEAx8B,YAEAA,WAEA,CAOA,kCACA,2CACA,uBACAjC,uBACAu/B,oCACAC,gCACAA,4HACAx/B,mBACAu/B,+BACAC,8BAEAD,0BACAC,8BAEAv9B,oCACAs8B,mCACAkB,WACAjB,6CACAkB,iCACA,oCACAz9B,qBACAA,oBACA,wBACAA,sBACAA,qBACA,6BACA,WACA,EACA,CAKA,4BACA,gCACAA,gBAEAA,6BACAA,uBAEAA,uBAIAsC,gBACAuS,0EACA6oB,wBACA,aAEAA,iBACA,GAEAA,kBAIA,MA5GA19B,WACAqC,gCACAK,gCACAF,0CACAF,wBACAG,sEA0GA,2DACAgM,qBACAC,4BACAC,aACAzL,qBACA,GACA,+CAGA,qBAGA,mCAEAnB,qDAGAZ,mBACAkB,sCACA,GACAG,kCACAC,wBACAX,+FACAO,qCACA,GACAQ,cACA86B,4BACA,GAKAjJ,eACA,eAGAryB,8EACArC,aACA,2CACAA,eACAA,kBAEAA,0BACAA,qBAEA,mCACAw8B,aACAoB,kBAEA,EACA,EAIAr6B,yBACA,oCACAb,2DACA,EAIAqB,2BACAjC,sCACA,mCACA,iBACA,yBAEA,EAIAuN,yBACA,oBACA,EAIAC,2BACA,sBACA,iBACA,sBAEA,EAIA6C,qBACA,kBACA,EAIAC,qBACA,mBACA,iBACA,sBAEA,CACA,GAEA,iBAEA,GAEA5X,MCrTA,2SA+BA,2CACA,gCACA,gCACA,CAhCAuH,gFACA9G,2EACAP,kIACAga,0FACAmpB,uIACA/7B,yGACAI,4IACAlG,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFACA,iCACAjG,6DACA,wGAUA,MAPAC,iIACAC,0MACA,qGACAA,kLACA,uFACAA,8KACA,0BACAD,MACA,GA2BA2hC,uBACAljC,eAIAC,OAWA,qBACA,8CACA,8CACA,gCACA,KAGAkU,yCACAgvB,uCACA,mCACA,CAKA,wBACAvB,YACAx8B,YAEAA,WAEA,CAKA,yBACA,gCAEA0U,yBACAA,2BAMA1U,uBAJAA,4BACAA,qBACAg+B,kCAKA,MAjDAh+B,WACAqC,gCACAG,0CACAC,sEACAu7B,sCAgDA,2DACAvvB,kBACAC,4BACAC,WACAzL,kBACA,GAGA,mCACAlD,sCACAA,oDACAA,qEACAA,wEACAA,sEACAg+B,qCAGAh+B,mCACA0U,uBACA1U,qBACA,GAGAA,mCACA,8BACA89B,UACA99B,eACAA,sBACAqC,gDACAy7B,eACA,mBACAppB,uBACA1U,aACA,oBACA0U,uBACA1U,aACA,GAEA,EACA,GAGA,mCAEA+B,iEAGAZ,mBACAkB,mCACA,GACAG,kCACAC,wBACAX,+FACAO,kCACA,GACAQ,aACA,GAKA6xB,eACA,eAGAryB,8EACArC,aACA,2CACAA,cACA,gCACAw8B,aACAyB,eAEA,EACA,EAIAl6B,2BACAjC,qCACA,EAIAuN,yBACA,oBACA,EAIAC,2BACA,YACAoF,uBAEA,sBACA,qBACA,EAIAvC,qBACA,kBACA,EAIAC,qBACA,YACAsC,uBAEA,kBACA,CACA,GAEA,cAEA,GAEAla,MCzOA,wTAgCA,yCACA,gCACA,gCACA,CA+BA,2BACAka,mCACAtS,4BACAL,0FACA,CAOA,2BACA2S,mCACAtS,4BACAL,6CACA,CAQA,+BACA,yDAIA,MAHAm8B,YACAC,kBAEAD,SACA,CAOA,iCAIA,4BACA/8B,6BACAA,mBACA,IANAi9B,kCACAC,+IACAC,uCAKAl8B,0GACAA,qHACA,CAMA,8BACA,sCACAA,yDACA,CAvHAL,gFACAtH,sEACAia,0FACA6pB,kIACAC,8GACA9jC,kIACAsB,mHACAC,yGAEAA,yBACAA,qBACAA,8BAEAkG,gFACA,iCACAjG,6DACA,2FAYA,MATAC,gOACAE,sEACAA,8GACAF,iCACA,8HACAE,wEACAA,iHACAC,sCACAH,4FACAA,MACA,GA4BA6O,4BAiEAuzB,gDAKA,kCACA3jC,gBAIAC,qBAUA,6BACA,gCACA4jC,gBACAz+B,sCACA0+B,mBACA1+B,sCAEA,IAhBAA,WACAqC,gCACA8C,uBAeA,eACAA,cACAw5B,wCACAC,oCACAp4B,uCACA,EACA,2BACA81B,gCACAkB,WACAqB,cACAC,cACA,GAGAz8B,kDACArC,aACA,8BACAA,iJACA,oCACA++B,mBACA,GACAC,qBACA,wBACAC,mBACA,wBACAA,mBACA,2CACAj/B,cACA,2CACA++B,mBACA,EACA,EAIAx7B,2BAIAQ,2BACA,gEACA,aACA,sBAEA,sBACA,8BAEA,iBACA,gBACA,EAIAsL,2BAIAC,2BACA2vB,mBACA,EAIA9sB,uBAIAC,qBACA6sB,mBACA,CACA,GAEA,qBAEA,GAEAzkC,MCpOA,2KAoCA,wBACA,GACA0kC,cADAC,EAEA,mCACAD,wCAEA,gBACA,CAKA,4BAEAxiB,sBACAoZ,2BACA,MACA,CAWA,4CAKA7yB,YAOAm8B,kBAKAC,oCACAlZ,kDACAmZ,6DACAC,oDACAC,eACA,GAgCA,MA7BAh8B,iDACA47B,yCACAC,gDACAI,mBAEA,GAIAj8B,iDACA47B,wCACAC,+CAEA,GAKA,gEACA77B,4CACA47B,iBACAM,yCAEA,GAMAC,YAIAtwB,yBACApM,UACA,EAIAqM,2BACArM,UACA,EAKAu5B,+BACA,cACA,EAKAoD,qDASA,MARAR,qBACAA,gBACA,sBACA57B,0DAEA,oBACAA,yDAEA,IACA,EAIAq8B,+BACAT,eAeA,4BAdAtJ,sBAKA4J,+CACA,4BACAL,+CACA,4BACAI,oBAEA,6BAVA,4BACAJ,gDACA,4BACAI,mBAYA,EAKAK,0CACAC,uBACAV,yCAEA,EAKAW,6BACA,0CACA,EAIAC,2CACAZ,kCACAvJ,2BACA,EAKAoK,uBACA,iBACA,CACA,EACA,CA5MAzlC,sEACA+I,sEACAm8B,mHACAQ,8JAmBAT,kBACA5J,UACA,mFAsLA,MArLAA,iCAqLAsK,sBAEA,GAEA5lC,MCpNA,gKAEA2lC,8JA0BAE,iBAMAC,uDACA,OAUAC,gDACA,mCAEA,MADAF,uBACAG,EACA,EAMAC,mDACA,sCACA,sBACA,EACA,EAKAC,iDACA,mBACA,EAKAC,iDACA,sBACA,EAKAC,yDACA,4BACA,EAKAC,+BACA,0BACA,EAKA3f,uBAEA,MADAmf,iBACA,IACA,CACA,CACA,EAEA,4BAEA,GAEA7lC,MCvGA,wZAEAgJ,sEACA/I,sEACAQ,2EACA6b,kIACApc,kIACAoH,yGACAI,4IACA4+B,mHACAR,0KACA1/B,8GAuBA,0BACAhG,mBAKA2R,2BACA,oCAGAlK,qDACA,EAKAxH,qBA0FA,2BAEA,qHACA,CAKA,wBACAw5B,kBACAr0B,YAEAA,WAEA,CAOA,oBACA,yDACA,MAhHAA,WACAqC,gCACAG,0CACAC,sEACA,qBACA,gDAMA,yCA0GA,MAvGA49B,8BACAla,+BACAmZ,kCACAC,qCACA59B,qBACA,GAGA,+DACA+M,2BACAC,mBACAF,4BACAsyB,MACAC,gBACAp/B,mCACA,EACAsB,oBACA,GACA,iEACAwL,wCACAC,kBACAF,0BACAsyB,MACAn/B,gDACA,EACAsB,2BACA,GAGA,2CAEA/B,mBACAkzB,mBACA55B,+DACAwmC,sBACAA,oBAEA,EAEA,GACA,yCACA9/B,mBACAkzB,oBACA55B,+DACAwmC,sBACAA,0BAEA,GACA5+B,4BAEA,GACAG,kCACAC,wBACAX,+FACAuyB,mBACA55B,+DACAwmC,sBACAA,oBAEA,EAEA,GACAp+B,cACAC,UACA,GAKA,eAkCAo+B,2CAQA,sCACAD,UACAE,uBACA1zB,QAGA0G,WACA8sB,4CAHAA,8CAKA,gCACAE,uCACA9M,yCACA/c,0EACA8pB,+CAGA,CAOA,mBACA,8DACA,oEACA,2BACA,0BACA,yBACA,8BACA,mCAGA,sDACA,8CACA,EACA,CASA,mCACA,mBACA3zB,SAGA0G,WACA8sB,4CAHAA,8CAKAA,SACAG,mDACArB,QACAzoB,kEACA+pB,iBACAJ,6BAEA,mBAGAA,kCACA,gCACA,EACA,GAbA9pB,mBAcA,CAGA9U,8EACArC,cACAq0B,mBACA55B,+DACAwmC,sBACAA,oDAEA,EAEA,iCAEAxzB,mDADAgU,YAEAhU,4BACA4zB,iBACAhB,2CAEAiB,sBAGA7f,uDAGAhnB,iDACA,sEAEA8mC,kBACAA,6CACApb,+BACAmZ,kEACA39B,mBACA,IAEA4/B,yBAEAD,oCACA,GAEA,iCAEA,iDACAL,sBACAA,+BACAjhC,yBACAA,uDACAA,sBACAqhC,gBACA,uBACArhC,0BACAA,wDACAA,mBACA,EAEA,wCACAwhC,SACA,yCACA,gBACA,2CACAxhC,eACAq0B,mBACA55B,+DACAwmC,sBACAA,mEAEA,EAEA,EACA,EACA,EAIAl9B,2BACAjC,sCACA0B,+BACA,EAIA6L,yBACA,yBACA,0BACA,EAIAC,2BACA,0BACA,2BACA,EAIA6C,qBACA,uBACA,wBACA,EAIAC,qBACA,uBACA,wBACA,CACA,GAEA,aAEA,GAEA5X,MCnWA,wSAEAgJ,sEACA/I,sEACAQ,2EACAP,kIACA+mC,6HACA3/B,yGACAI,4IACAw/B,wHAuBA,qCACA9mC,yBAIA2R,2BAEA,+DACA,EAIA1R,qBA0BA,2BACA,qDACA,CAKA,wBACA,0CACA6mC,gCACAn3B,2BACAo3B,iCAEAA,gCAEA,CAMA,iCACAC,yBACAC,kCACAt3B,4BACAq3B,UACAnnC,mBACAmnC,qDACA,GAEA5hC,cACAA,4CAEA6hC,qCACAx/B,oEAEAy/B,2CACAC,4BACAA,mBAEAA,mBAEA,EACA,IApEA/hC,WACAgL,0BACA3I,gCACAG,0CACAC,sEACA,oCACA,yDACA8H,QACAy3B,mBACAC,gBACAC,gBACA,EACAJ,kBACAx3B,8BACAm3B,8DAEA,iDAuJA,MAtJAn3B,4EACA63B,eAqDAC,eACAA,uBACA73B,wCACAA,yCACAo3B,mCAEAS,wBACA3nC,iDACA8P,4BACA5I,YACAC,oBACA,EACA,IAKA,8DACA6M,yBACAC,4CACAC,gBACAzL,mBACA,uBACAkwB,mBACApzB,WAEA,0BACAmB,mBACAkB,+CACA,4BACAA,mEACA,6BACAA,oEACA,GAGAkI,8CACA,8DACA83B,cACA5zB,iBACAC,kBACAC,eACAzL,oBACA,GACAo/B,uCACAA,kCACA,gCACAnhC,mBACAnB,6BACA,cACA2hC,oBACA,GACAp3B,+BACA+3B,kCACA,aACA,GAEAR,+BACA,GACAt/B,kCACAC,wBACAX,+FACAO,+CACA,GACAQ,aACA,GAGAuwB,mBACA,YAIA,eAGA/wB,oCACA+wB,kBACApzB,YAEAA,WAEA,8BACAA,cACA2hC,gCACA,+BACA3hC,aACA,2CACAA,cACA,6CACA,+BACAA,4BAEA,qDACAA,uCACA,GACAqC,yEACArC,6BACAA,+DACAuiC,gDACAZ,wBAEA,EACA,EACA,EAIA59B,2BAGA,MAFA09B,oDACA3/B,sCACA,mFACA,gDACA,EACA,EAIAuN,yBACA,wBACA,EAIAC,2BACA,yBACA,EAIA6C,qBACA,sBACA,EAIAC,qBACA,sBACA,CACA,GAEA,wBAEA,GAEA5X,MCrQA,8VAqEA,0DAyBA,gCACA,GACAgoC,UACAC,uBACAC,qCACAC,mDACA,+BACAloC,+DACAmoC,aACA5hC,qCAEA,EACA,EACA6hC,kDACA7hC,4BACA8hC,2BACAC,sBACA,GACA/hC,gCACA,CACA,EAnBA8zB,KAuBA,MAHAA,2CACAkO,oBACAjL,oCACAjD,4BACA,+BACA,2BACA,4BACA,yBAEA9zB,4FACAiiC,iBACA,EAIA,+BACAC,iBACAC,cACAC,yBACAC,0CACA,2BACA,yHACAC,4BACAC,6BACAC,0BACAH,0CACAD,yBACAF,iBACAC,cACA,2BACA,SACA,CAUA,sCACA,GACAM,aACAC,6CACA,+BACA,gCACA,mCACA,mGACA1iC,4BACA,+BACA,EACA2iC,yCACA,+BACA,yBACA,yGACA3iC,+BACA,sBACA,qBACA,gCAEA,EACA4iC,iDACA,+BACAC,cAEAC,eACA9iC,sCACAA,2CACA+iC,0BACAlI,8BACAI,gCACA,0CACA,6CACA,gDACA,0CACA,GACA8H,+BACAlI,4BACAI,8BACAhE,4BACAprB,0BACA,EACA,EACAm3B,iDACAD,8BACAA,kCACA,CACA,EA9CAE,QAkDA,MAHAA,oDACAC,uBACAnM,uCACAkM,+BACA,cACAjjC,2BAGAmjC,0DACAC,qBACArB,6BACA,GACA/hC,sHACAiiC,kBACAjjC,uBACA,wDACAA,qBACA,qBACA,6BACAkjC,iBACAC,cACAE,sBACA,yBACA,gFAEAhlC,iCACAA,iCACAA,iCACAA,gCACA,2BACA,0BAGAgmC,oBACAnB,iBACAC,cAGAmB,iBACA,SACA,CAWA,iCAIApB,6BACAnL,yCACAmM,yBACAK,2CACA,mDACAC,KAYA,MAXAA,OACA9M,mCACAC,wFACAkE,kDACAI,iIACA,EAMAuI,IACA,CACA,0BACA,+BACAC,qBACA1B,sBACA,GACA/hC,oCACAA,4CACAA,cACA0jC,iBACA,GACA1jC,0BACA,6BACAmiC,cACAF,kBACAI,yCACA,2DACAhlC,iCACAA,iCACAsmC,sCACAA,sCACAA,uCACAA,yCACAC,wBACA,2BACA1B,yBACAC,cACAE,0CACAC,2BACA,SACA,CAKA,wBACAH,0BACApL,sCACAD,6CACA,cACA92B,2BACA6jC,sBACA9B,4BACA,GACA/hC,4BACAA,wCACAA,8CACAiiC,iBACA,GACAjiC,gCACAG,oBACAnB,qBACA,EACA,SACA,CAOA,2BACAqkC,4BACAnB,yBACAC,qBACA,CACA,8BACAE,uBACAD,yBACA,CACA,gCACA0B,wBACA,CACA,mCACAA,2BACA,CAQA,kCACArqC,iCACAA,0DACAsE,+BAEA,EACA,CAQA,2BACA6lC,yBACAtB,4BACAC,6BACAC,yBACA,CACA,kCACAH,sBACA,CACA,qCACA5oC,iCACAsE,cACAA,oCAEA,EACA,CACA,sCACAmkC,WACAA,8JAEA,CACA,mCACAC,QACAA,8KAEA9kC,2CAEA,CAMA,6BACAsmC,+CACAA,6CACAtmC,yDAEAsmC,8CACAA,6CAEAA,qDACAA,oDAEAA,2FACAA,2CACAA,yCACAtmC,qDAEAsmC,4CACAA,2CAEAA,4CACAA,2CAEAA,sFACA,CAQA,8CACAA,+BACAI,SACAJ,gFACAtmC,uBAEAsmC,gFACAtmC,0CAEA,CAQA,+CACAsmC,+BACAK,SACAL,2CAEAA,yEAEA,CAQA,iDACAA,kCACAI,SACAJ,4CACAA,mCAEAA,4EAEA,CAQA,8CACAA,8BACAK,UACAL,2EACAtmC,uBAEAsmC,2EACAtmC,yCAEA,CAgBA,8BAEA4mC,YACAtjC,OACAujC,OACAr4B,OACAisB,SACAC,UACAd,OACA,EACAkN,cACAt4B,OACAisB,SACAC,UACAd,OACA,EACAmN,cACApJ,kCAEAyG,uBACA,gGACA,EAEAC,4CACA,2BACA30B,oBACAk2B,gFACA,EAGAoB,kEACA,qGACA,EAEAC,8DACAC,+BACAX,wBACA,CACA,GAGAK,YACAtjC,QACAujC,OACAr4B,OACAisB,SACAC,UACAd,OACA,EACAkN,cACAt4B,OACAisB,SACAC,UACAd,OACA,EACA+D,kCACAyG,uBACA,sHACA,EACAC,4CACA,2BACA30B,oBACAk2B,wIACA,EACAqB,8DACAC,+BACAC,gCACAZ,wBACA,CACA,GAGAK,YACAtjC,QACAujC,OACAr4B,OACAisB,wBACAC,yBACAd,OACA,EACAkN,cACAt4B,OACAisB,SACAC,UACAd,OACA,EACA+D,qCACAyJ,kBACAhD,uBACA,gJACA,EACAC,4CACA,2BACA30B,oBACAk2B,wIACA,EACAqB,8DACAE,gCACAE,kCACAd,wBACA,CACA,GAGAK,YACAtjC,OACAujC,OACAr4B,OACAisB,SACAC,UACAd,OACA,EACAkN,cACAt4B,OACAisB,SACAC,UACAd,OACA,EACA+D,qCACAyG,uBACA,0HACA,EACAC,4CACA,2BACA30B,oBACAk2B,+GACA,EACAoB,kEACA,wGACA,EACAC,8DACAI,kCACAd,wBACA,CACA,GAGAK,YACAtjC,OACAujC,OACAr4B,OACAisB,SACAC,yBACAd,sBACA,EACAkN,cACAt4B,OACAisB,SACAC,UACAd,OACA,EACAwN,kBACAhD,uBACA,wHACA,EACAC,4CACA,2BACA30B,oBACAk2B,mKACA,EAEAoB,0DACA,uFACA,yCACA,4FACA,EACAC,4DACAE,gCACAG,uBACAf,wBACA,CACA,GAGAK,YACAtjC,QACAujC,OACAr4B,OACAisB,SACAC,UACAd,OACA,EACAkN,cACAt4B,OACAisB,SACAC,UACAd,OACA,EACA+D,qCACAyG,uBACA,yHACA,EACAC,4CACA,2BACA30B,oBACAk2B,iKACA,EACAqB,8DACAI,kCACAE,+BACAhB,wBACA,CACA,GAGAK,YACAtjC,OACAujC,OACAr4B,OACAisB,SACAC,UACAd,OACA,EACAkN,cACAt4B,OACAisB,SACAC,UACAd,OACA,EACAwK,uBACA,iGACA,EACAC,4CACA,2BACA30B,oBACAk2B,mKACA,EACAoB,0DACA,mGACA,EACAC,4DACAM,+BACAhB,wBACA,CACA,GAGAK,YACAtjC,QACAujC,OACAr4B,OACAisB,SACAC,UACAd,OACA,EACAkN,cACAt4B,OACAisB,SACAC,UACAd,OACA,EACA+D,kCACAyG,uBACA,+FACA,EACAC,4CACA,2BACA30B,oBACAk2B,iKACA,EACAqB,8DACAC,+BACAK,+BACAhB,wBACA,CACA,EACA,CACA,gCACAiB,yBACA/Q,oDACAmP,4DACA,CACA,CACA,8BACAF,gCACAhB,eACA,GACAgB,qCACAhB,oBACA,EACA,CAjtBA,GACA8C,aAGA9B,gBAJA+B,aAEA5C,UACAC,OA4aA,iCACAwB,iCACAA,0FACA,EAgYA,MAzFAA,yDACAtmC,kDACAsjB,+CACAokB,YACAjK,yDACAE,2DACAgK,mEACAC,0CACA,EAEAH,cACAjrC,qBACA,cAUA,MATA,yCACAqrC,qBACAC,qBACAC,wBACAC,eACAlD,6BACAnjC,YACAA,qBACA,GACA,IACA,EACAuD,mCAKA,MAJA8gC,oCACAnB,6BACAC,0BACAmB,kBACA,IACA,EACAvgC,2BAKA,MAJAsgC,wBACAN,kBACAb,eACAC,YACA,IACA,EACAhxB,qBAKA,MAJAkyB,qBACAnB,iBACAC,cACA,2BACA,IACA,EACA/wB,qBAKA,MAJAiyB,qBACAnB,iBACAC,cACA,2BACA,IACA,EAcAmD,8CACA3B,0CACAtmC,sCAGAsmC,2CACAA,4EACAA,gFACAA,2CACA4B,oBACAjC,iBACA,EACAkC,uCACA,iBACA,EACAC,mCACA,eACA,EACA3pC,6BACA,eACA,CACA,EACAq4B,wBACAwK,yBACAmG,YACA,CAv3BAtiC,sEACA/I,sEACA06B,8GACAwK,mHACApO,iJACAuG,kIACAoM,kIACAlB,kIACAjL,qIAmBA2O,oBACAC,eACAC,gBACAC,eACAC,cACA,EACAjjC,iBACAkjC,SACAC,SACAC,UACAC,SACA,EACAh8B,gBACAi8B,gBACAC,iBACAC,oBACAC,kBACA,EACA5N,iBACAC,2BACA,EACAoM,WAy0BA,0BAEA,GAEAvrC,MC/3BA,6UA6DA,mCACA,gDACAonC,uCACA2F,qEAEA,OACAZ,sFACAC,gBAEAC,4BACAC,sBACA,CACA,CACA,iCACA,gDACAlF,uCACA9O,qCACA0U,sDACAC,oDACAC,cAEAT,oDACAC,kDACA,OACAH,sEACAC,SACAC,cACAC,aACA,CACA,CACA,8CACA,4CACA,uDACA,CA5FAzsC,sEACAQ,2EACAP,kIACAoH,yGACAI,4IACAtB,8GACA+mC,mKAwBA38B,0BAMAC,sCAMA28B,aACAT,gBACAC,gBACAC,mBACAC,kBACA,EAkDAllC,sBACAxH,mBAIAC,qBAcA,qBAEA,oHACA,CACA,wBACA2hC,YACAx8B,YAEAA,WAEA,CACA,sBACAA,sCACA6nC,sCACAC,0BAEAC,YAEAC,WAEA,CACA,oBACAhoC,yBACAA,sBACAA,oBACA,CACA,qBACAA,sCACAA,yBAEAA,oBACAA,qBACA,CACA,uCACA2kC,yCACAtmC,qCACA2B,sEACA,MAlDAA,WACAqC,gCACAG,0CACAC,qEACAkI,gEACA,mGACAq9B,WACA,UA8CA,2DACAt5B,wBACAC,8BACAF,sBACAvL,sBACA,GAGA,mCACA/B,mBACAkB,2CACA,GACAG,kCACAC,wBACAX,+FACAO,2CACA,GACAQ,cACAC,UACA,GAKA,eAGAT,kEACAylC,yBACA,0CACA9nC,aACA,2CACAA,eACAgoC,WACA,yCACAxL,aACAyL,YAEA,EACA,EAIAlkC,2BACA,4BACAjC,qCACA,EAIAuN,yBACA,oBACA,EAIAC,2BACA,qBACA,EAIA6C,qBACA,kBACA,EAIAC,qBACA,kBACA,CACA,GAnLAuyB,oBAqLA,aAEA,GAEAnqC,MC3OA,oPA8aA+d,4BA9YA,kDACA,gCACA,gCACA,CAmGA,uCAoNA,mCACA,kBACA2vB,uDACAC,+EACAA,uBACA1tC,mCACA0tC,iDAEA1tC,oCACA0tC,oDAIA,CAKA,iCACA,gCACA,OAEA,kCACA,iCACA/mC,uBACA45B,uCACAoN,wCACAC,sCACA,sDAEA,GADAjnC,yDACA,oCAEA,GADAknC,wBACAC,UACA,mCACA5mC,WACA,GACA6mC,+BACAA,gCACA,KACAD,mCACAvN,uDACAyN,gBACA9mC,YACA0mC,UACAD,UACA,EAGA,CAGAE,sBACAI,uBAEA,CAKA,gCACAC,wBACA5U,8DACA,CAKA,mCACAA,iEACA,CAKA,0BACAt5B,kCACA,CAOA,gCACA,uEACA,CAKA,0BACAytC,UACAA,qBACAjoB,+BACA,EAEA,CAKA,yBACA,kBACAioB,WACAU,4DACAV,mDACAA,kCAEA,CAKA,yBACA,6BAGA,0BACA5M,kEACAA,oEACA,CAKA,qBACA4M,4BACAW,qCACAC,uCACAZ,wDAEA,CAKA,sBACA,aACAA,6BACA7pC,2CACAA,6CACAA,4CACAqqC,6CAEA,CAKA,0BACAK,qDACA,CAKA,yBACAb,4BACAa,0CACAC,aAEAloB,cAEAmoB,iBAEAC,UACA,GAGAC,sBACA,CAKA,wBACAJ,sBACAK,yBACA,CASA,oEACAC,SACA3wB,gBAKA,MAJA4wB,cACAD,iCACA3wB,uEAEA6wB,sBACA,CAQA,kCACA,OAYA,MATA7R,QACAC,OACAuQ,UACAA,qCAEAsB,kCACAtB,UACAA,wCAEAsB,EACA,CASA,6CACAC,iBACAC,gBACAle,oBACAme,wBA4BA,MAzBAF,iCACA,2BACAG,qBACAD,4BAIA,GAGAA,cAGAA,gBACAF,cACAhvC,uCAEA,GADAgvC,iCACA,cACA,QAEA,IAGAA,YAEAA,KACA,IAtdAI,iDACAC,6CACAC,6CACAC,+CACAC,4CACAC,yCACAC,iBACAjC,cACAa,cAEAN,aAEA2B,gGAKA1B,0BAKA2B,qCACA,gBACA,EAKAC,+BACA,iCACA,EAQAC,yCAeA,MAdArC,WACAA,4BACAA,0BACAiB,uBAMA,8CACA,eAEAgB,uBAEA,IACA,EAOAK,8BAcA,MAbAnuB,4BACA4tB,kCAEAQ,iBACAC,gBACAC,gBACAC,aAMA,+BACA,IACA,EAOAC,6BAIA,MAHApR,yBACA,wCAEA,IACA,EAMAqR,yBACA,iCACA,EAMAC,2BACA,kCACA,EAOAC,4BACA,aACA9C,WACA7pC,6BACA6pC,qBACAr7B,kBACAorB,mBACA,GAEA,EAOAgT,kCACA,OACAp+B,gFACAorB,8EACA,CACA,EAMAve,yBAkBA,MAjBAwuB,8BACAA,0DACAA,wCACAA,oFACAA,gDACAA,+CACAgD,YACAT,iBACAG,aACAD,gBACAQ,iBAKA,wBAEA,IACA,CACA,iBAMAC,4EAMAC,wDACA7f,2BACA8f,oCACAlD,mCACAG,oBAGAL,6DACAK,0CACAC,6BACA7mC,WACA,GACA6mC,kCACAA,iCAGA+C,4BAGAhD,kCACA/c,+CACAid,gBACA9mC,YACA0mC,uBACAD,qBACA,GAGAM,wBAEA,MAhMAG,+BAEAvN,yBA8gBA,MAlEAA,wFAEAkQ,8BACAxqC,2BACAA,yCACA0nC,wEACA1oC,WACA+qB,6BACA,2BAGA0gB,kDACAC,oDACAxD,UACA1c,oBACAmgB,gCACAC,oCACAjN,mCACA,EACAwL,iBAGApf,sFACAkJ,uBACAj0B,cACA,GAGA+qB,qFACAkJ,uBACAj0B,aACA,GAGA+qB,mEACAkJ,uBACAj0B,YACAA,qBACA,GAGA+qB,4DACA8gB,6GACA,GACAC,iBACAnB,gBACAF,gBACA,wBACAW,kBACAW,gBACAP,8BACA,wBACAQ,eACAR,8BACA,2BACAQ,eACA7B,iBACAjC,cACAa,cACAyC,iCACA,oCACA,oCACAZ,YACA,0BACAD,eACA,gCACAjC,cACA,CA/pBA3mC,gFACAtH,sEACAsB,8GACAC,mHACAC,yGACAw/B,iJAEAx/B,yBACAA,qBACAA,8BAEAkG,gFACA,iCACAjG,6DACA,uIAcA,MAXAC,mEACAE,sEACAA,8GACAF,iCACA,mMACAC,8LACA,wHACAA,8LACA,wIACAA,oMACA,6EACAD,MACA,GA4BA8vC,qDAMAC,iBAOAC,kBAMAC,oBAMAC,kBAMAC,kBAMAC,6BAMAr3B,eACAmH,mBACAmwB,yBACAC,yBACAC,aACAC,yBACAzC,WACA,EACA0C,+BACAlR,aACAC,aACAC,uBACAC,mCACAI,gDACAH,yCACAE,sDACArC,4BACA9sB,OACAorB,OACA,EA0iBA,4BAEA,GAEAz9B,MCvqBA,kVAEAC,sEACAQ,2EACAP,kIACAoH,yGACAI,4IACA2qC,0KACAjsC,iHAwBAoK,wBAMAC,oCAMAC,gBACA4hC,UAEAC,UAEAC,WACA,EAKAC,yBACAryC,iBAIAC,qBAaA,6BACA,eAoCA,MAnCA6tC,kBACA/9B,qDACA+9B,sCACA8D,8BACAC,8BACAC,gCACA3wC,WACAugC,6BACAC,sCACA,CACA,wBAIAv8B,8BACA,wBAIAA,8BACA,6BAKAA,oCACA,yBACAktC,eACA,yBAKAltC,kCAEA0oC,cACA,CAMA,qBAEA,mHACA,CAKA,wBACAlM,YACAx8B,YAEAA,WAEA,CAKA,2BACAA,2BACAA,wBACAktC,gBAEAC,gBAGA,CAMA,yBACAC,oBACA1E,6BACAA,sBAEA1oC,qBACAqC,iDACArC,0BACA,CAMA,yBACAA,2BACAA,sBACAqC,kDACAqmC,8CACAA,qBAEA,MA9GA1oC,WACAqC,gCACAG,0CACA8H,+DACA7H,gEACA,wBA4GA,2DACAgM,kBACAC,8CACAxL,4BACAyL,WACA,GAGA,uCACAslB,uBACA5xB,2CACA,GAGAG,kCACA/H,gDACAqH,6EAEAO,oCACA,GACAQ,aACA,EACA,GAIA6xB,eACA,eAGAryB,WAEAf,yBACAozB,eACA10B,cACA,8BACA0oC,gBACAA,oDAEA,0CACA1oC,aACA,2CACAA,yBACAktC,gBAEAltC,cACA,2BACA0oC,gBACAA,yBAEAA,mBACA,GAGApnC,sCACAk7B,aACA6Q,iBAEA,qCACA7Q,gEACA4Q,4BAEA,sCACA5Q,gEACA4Q,6BAEA,wCACAptC,yBACAktC,eAEA,EACA,EAIAnpC,2BACAjC,kCACA,EAIAuN,yBACA,oBACA,EAIAC,2BACA,qBACA,EAIA6C,qBACA,kBACA,EAIAC,qBACA,kBACA,CACA,GAEA,gBAEA,GAEA5X,MC1RA,6RAsIA+d,SApIA/U,sEACAvI,2EACAqyC,wHACAxrC,yGACAI,4IACAxH,kIACAkG,mHA2BA2sC,cAMAC,aAMAtpB,WACAupB,SACAC,SACA,EAOAC,qCACApmC,0BACAqmC,wBACAC,2DACAA,YACAP,8CACA/lC,iCAEA+lC,gDACA/lC,+BAEA+lC,mCACA,EAMAQ,qBACAR,0BACA,EAOAS,uBACA,qBACAC,MACAA,yBACAA,iBACAA,qBAEA,EAKA,wBACApzC,YAIAC,YACAwH,iCACAG,0CACAC,sEACAwrC,+DAMA/S,iBAEAt6B,uGACA,CAKA8zB,kBACAwG,eAEA,YAEA,WAEA,EACAgT,iBACA,wBACA,0BACA1E,wBACA2E,qCACAC,iCACAC,+BACA,6EACA,qBACAP,6BAEAH,0CAEAM,8EAGAF,+BACA,uCACAK,gDACAC,kDACA,4CACA,CACA,EACAvD,YACA,+BACAoD,aAEA,EACAnD,aACA,+BACAmD,cAEA,EAMAI,iBACA,sBACAX,yCAEA,EAGA,kEACAl/B,kBACAC,qBACAC,aACA,GACA,iEACAF,iBACAC,oBACAC,UACA,GAGA,iCACAxN,mBACAkB,iCACA,GAGA,kCACAlB,mBACAkB,kCACA,GACAG,mCACAC,oBACAX,qFACAO,iCACA,GACAQ,aACA,GAEAJ,qBACAX,sFACAO,kCACA,GACAQ,aACA,IAKA6xB,eACA,eAGAryB,8BACA,mBACAqyB,eACA,cACA,wBACA,kCACA,gCACA,aACA,yBACA,aACA,qCACA,cACA,yFACA,EAIA3wB,UACAjC,qCACA,EAIAuN,SACA,2BACA,2BACA,EAIAC,UACA,4BACA,4BACA,EAIA6C,OACA,yBACA,yBACA,EAIAC,OACA,yBACA,yBACA,CACA,GAEA,WAEA,GC3QA,gOACA,63OCDA5X","names":["define","_","pluginFactory","ckEditor","name","init","isIOSDevice","$input","$cke","__","getJumpElementFactory","getItemStatus","item","isReviewPanelHidden","exports","Object","selector","eventName","eventParam","$link","handleLink","activationKeys","jumplinksBox","component","Handlebars","Helpers0","helpers","buffer","escapeExpression","helper","stack1","questions","answered","flagged","viewed","total","questionsViewed","getJumps","getParts","getSections","result","sections","getActiveItem","getNextSections","canList","section","getJump","getPart","getSection","parts","getItem","identifier","getItemCategories","hasItemCategory","taoPrefix","categories","getTestStats","getPartStats","getSectionStats","getScopeStats","testStats","position","isLinear","linearPartIndex","inaccessibleParts","countOfInaccessibleUnasweredQestions","stats","countOfInaccessibleFlaggedQestions","getScopeMap","scopeMap","jump","part","scope","getScopeMapFromContext","context","getItemPart","getItemSection","getItemAt","items","getItemIdentifier","each","callback","map","updateItemStats","computeItemStats","acc","computeStats","patch","self","targetMap","currentMap","reindex","offset","offsetPart","offsetSection","lastPartId","lastSectionId","createJumpTable","reviewEnabled","itemReviewEnabled","mapHelper","isReviewPanelEnabled","ESK_KEY_CODE","shortcutsBox","$element","$closeBtn","$keyNavigationItems","e","elements","propagateTab","on","cursor","keyNavigator","navigableDomElement","shortcutsGroups","id","label","shortcuts","shortcut","$$1","jumplinksFactory","shortcutsFactory","namespaceHelper","Template","plugin","testRunner","config","questionStatus","testRunnerOptions","pluginShortcuts","areaBroker","getJumpElement","shortcutsConfig","avoidInput","prevent","elem","panelJumplink","enabled","text","currentItem","updatedConfig","announcedText","$announce","render","$","$headerBar","$headerElements","registerHeaderNavigator","group","defaultPosition","getNavigators","destroy","$navigationBar","$toolbarElements","pos","registerToolbarNavigator","$topToolbar","registerTopToolbarNavigator","$navigatorTree","$enabledItems","navigableItems","getItemFromNavigable","navigable","itemsNavigator","loop","keyNextItem","keyPrevItem","keyNavigators","managedNavigators","filters","enabledItems","$panel","$navigator","isFizzyLayout","initFizzy","$testStatusHeader","navigableTestStatus","keepState","itemListingVisited","filtersNavigator","currentFilter","$filters","navigableFilters","filter","$trees","navigableTrees","navigator","scrollHelper","addLabelledByAttribute","value","removeLabelledByAttribute","manageLabelledByAttribute","$content","getQtiChoice","addNavigator","_this","addInputsNavigator","$qtiInteractions","$itemElement","$choiceInput","choiceType","$nav","$inputs","input","$qtiChoices","$lastParent","list","$parent","choiceNavigator","setupListNavigator","element","$jumpLinksBox","$links","headerNavigation","toolbarNavigation","topToolbarNavigation","navigatorNavigation","pageNavigation","rubricsNavigation","itemNavigation","linearItemNavigation","stimulusNavigation","jumpLinks","strategy","getName","getConfig","getTestRunner","providerRegistry","strategyFactory","allowedToNavigateFrom","$elt","strategies","autoFocus","wcagBehavior","flatNavigation","keyNextGroup","keyPrevGroup","keyNextTab","keyPrevTab","keyNextContent","keyPrevContent","defaultMode","linearMode","nativeMode","modeFactory","contentNavigatorType","groupNavigator","navigationMode","navigationConfig","document","setMode","getMode","isActive","keyNavigatorFactory","pluginConfig","state","header","updateTitle","updateState","$container","dialogAlert","dialogConfirm","shortcutRegistry","globalShortcut","pluginName","actionPrefix","defaultOptions","alert","focus","confirm","dialog","handle","accept","closeAccept","closeReject","reject","dialogShortcut","stack","opened","removeHandle","closeDialogs","testOptions","alerts","confirms","propagate","addHandle","closeLast","install","dataIsObject","resolve","itemRunner","$modalsContainer","startClosed","top","isLeavingSection","sectionStats","nbItems","isLeavingTestPart","testPart","testPartStats","isLast","isFirst","isLastOf","isFirstOf","getSiblingItems","itemId","previous","siblings","itemChain","next","directions","size","direction","getNextItem","getPreviousItem","isMovingToNextItem","params","isMovingToPreviousItem","isJumpingToItem","navigationHelper","buttonData","control","title","icon","end","itemInlineMessage","createOkButton","testContext","testMap","dataType","$btn","$navigationContainer","$inlineContainer","enable","disable","feedback$1","closeCurrent","currentFeedback","message","type","typeCaster","$itemContainer","contentHeight","$item","isScrollable","selectedHeight","containerParent","$testRunnerSections","extraHeight","$gridRows","$qtiContent","$contentArea","gridRowBottomMargin","qtiItemPadding","adaptItemHeight","loadingBar","found","removed","feedback","nextStep","inlineMode","messagePlugin","module","inlineMessage","alertMessage","autoscroll","modalFeedback","defineMode","createMessages","isDestroyed","renderedFeedbacks","renderingQueue","dom","inline","destroyFeedback","tFeedbacks","shield","unshield","overlayConfig","show","hide","ns","noLabelCls","noLabelHoverCls","labelHiddenCls","separatorCls","defaults","collapseTools","collapseNavigation","collapseInOrder","hover","collapseOrder","$window","collapser","allCollapsibles","getCollapsiblesFromConfig","getSortedCollapsiblesFromDom","getUnsortedCollapsiblesFromDom","expandedWidth","collapsedWidth","availableWidth","previousAvailableWidth","toCollapse","collapseNeeded","toExpand","$controls","$elements","extraWidth","_allCollapsibles","order","$controlElements","key","collapseCls","$actionsBar","$toolbox","$navigation","buildCollapsiblesList","toggleCollapsibles","hider","blankifyLinks","mathify","require","MathJax","rubricBlock","pollingFactory","waitingDialog","defaultConfig","checkInterval","indicator","connectivity","proxy","waiting","waitContent","proceedContent","action","interval","autoStart","reasons","flags","args","dialogMessage","dialogConfig","buttons","labels","ok","cancel","pauseContext","category","subCategory","originalMessage","returnToHome","reloadPage","processError","error","loggerFactory","getItemAttempt","getPositiveNumber","getItemDuration","durationStore","Promise","updateDuration","currentUpdatePromise","logger","addDurationToCallActionParams","itemDuration","getDuration","currentTestPart","fixedTestMap","fixedCurrentItem","reached","completed","fixedMap","scopedMap","categoriesToMatch","matchSize","updateStats","matchCategories","expectedCategories","matched","Math","patterns","pattern","ratio","format","showTotal","long","short","scopes","test","testSection","indicators","percentage","progress","isMatchedCategories","statsComputer","computeIndicator","computeProgress","progressData","update","$label","$bar","showLabel","count","rendererApi","children","slice","Template$1","progressHelper","percentageRendererFactory","positionRendererFactory","renderers","progressbar","testRunnerConfig","rendererFactory","progressConfig","hiddenByQuestions","hiddenByCategories","isProgressbarHidden","data","channel","isLeaving","timeArr","timeArgArr","answeredMessage","questionsMessage","timerMessage","getTimerMessage","$time","$timeScreenreader","encodedTime","warningId","warningMessage","parseInt","time","hours","minutes","seconds","screenreaderWarningId","start","stop","complete","level","countdownTooltip","trigger","theme","placement","setTimeout","countdown","timeEncoder","tooltip","moment","precision","showBeforeStart","displayWarning","warningTimeout","info","success","warning","danger","timerbox","updating","timerIdsToRemove","results","getTimers","addTimer","updateTimer","removeTimer","deindex","timer","toggleZenMode","$zenModeToggler","$countdownContainer","countdownFactory","zenMode","startHidden","setUp","tearDown","consumedExtraTime","lastConsumedExtraTime","applyExtraTime","responseCardinalities","single","multiple","ordered","record","interactionMinConstraintProperties","matchInteraction","choiceInteraction","orderInteraction","associateInteraction","hottextInteraction","hotspotInteraction","graphicOrderInteraction","graphicAssociateInteraction","selectPointInteraction","currentItemHelper","getDeclarations","getResponseDeclaration","toResponse","mappedCardinality","response","transform","v","isQtiValueNull","isQuestionAnswered","fullyAnswered","defaultValue","constraintValue","currentCardinality","responses","guessInteractionConstraintValues","itemBody","interactions","constraintValues","attributes","qtiClass","constraintProperty","isAnswered","empty","declarations","baseType","cardinality","getStimuliHrefs","getTextStimuliHrefs","stimuli","textStimuli","getInstantStats","options","partiallyAnsweredIsAnswered","sync","submitButtonLabel","itemsCountMessage","messageEnabled","messageHeaderTpl","msg","flaggedCount","unansweredCount","statsHelper","messages","getExitMessage","testSession","initial","interacting","suspended","closed","itemSession","solution","notSelected","timerConfig","itemIdentifier","endTestWarning","noExitTimedSectionWarning","movePromise","states","actives","applyToStrategies","availableStrategies","strategyHandler","getActives","extraTimeStrategy","enforcedStayStrategy","guidedNavigationStrategy","timeoutStrategy","warnSectionLeavingStrategy","timers","constraintsWarnings","threshold","shown","constraintData","newTimer","scopeMapping","assessmentTest","assessmentSection","assessmentItemRef","getScope","warningMessages","getStrategyHandler","timerboxFactory","timersFactory","timeConstraints","contextualWarnings","warnings","warningsForScreenreader","guidedNavigation","restoreTimerFromClient","questionsStats","handleError","updatedTimers","statsScope","unansweredQuestions","remainingTime","timeStore","ariaHidden","screenreaderNotifcationTimeoutId","clearTimeout","updateTitles","currentPart","$timer","attribute","className","titles","itemTraceVariables","variables","ITEM_START_TIME_CLIENT","tracesStore","traceData","allowPartial","allowSkipping","isInteracting","currenItem","toBoolean","nextWarningHelper","warnBeforeNext","shouldWarnForUnansweredItems","hasFlagged","unansweredOnly","hasUnanswered","nextItemWarning","nextPartWarning","nextPart","remainingAttempts","testPartId","warnBeforeEnd","warnBeforeEndPart","shouldWarnBeforeEndPart","shouldWarnBeforeEnd","shouldWarnBeforeNext","specificTitle","createElement","enableElement","disableElement","updateElement","nextItem","isLastItem","doNext","nextItemPosition","unansweredWarning","warningScope","enableNav","triggerNextAction","registerShortcut","kbdShortcut","accepted","content","dlg","checkboxParams","checked","dialogOptions","heading","autoRender","autoDestroy","close","onOkBtn","$checkbox","refuse","dialogConfirmNext","nextSectionWarning","itemPartiallyAnswered","customNextMessage","testStore","submitChecked","store","submitUnchecked","err","nextSection","isWarnSectionLeavingEabled","source","toggle","previousItemWarning","triggerAction","canDoPrevious","currentSection","previousSection","previousPart","doPrevious","$component","$filterBar","$tree","$infoAnswered","$infoViewed","$infoAll","$infoUnanswered","$infoFlagged","$linearState","$target","flagItem","mode","_defaults","canCollapse","preventsUnseen","hidden","_cssCls","active","collapsed","collapsible","disabled","unseen","_iconCls","_selectors","filterBar","tree","collapseHandle","linearState","infoAnswered","infoViewed","infoUnanswered","infoFlagged","infoPanel","infoPanelLabels","tabInfoAll","tabInfoUnanswered","tabInfoFlagged","partLabels","sectionLabels","itemLabels","itemIcons","activeItem","icons","linearStart","counters","collapsiblePanels","notFlagged","notAnswered","notInformational","informational","_filterMap","all","unanswered","filtered","navigatorApi","getProgressionTotal","progression","setItemFlag","$items","filterCb","$section","$itemsFound","$filtered","updateConfig","scopeClass","autoScroll","totalQuestions","getScopedMap","cls","itm","counter","writeCount","$place","display","select","selected","hierarchy","previousPosition","$previous","open","openSelected","openOnly","togglePanel","collapseSelector","panel","scrollContainer","displaySectionTitles","displayItemTooltip","fizzySection","fizzyMap","dataItem","nonInformationalCount","fizzyItem","disableUnseenItems","updatedMap","updatedItem","updatedScopeMap","updatedFizzyMap","updatedItemData","activeItemId","isSkipaheadEnabled","renderItemButtonListComponents","previousItem","$closeButton","componentFactory","itemButtonListFactory","closeButton","itemButtonListContainer","button","$button","markReviewCategory","defaultNavigatorFactory","fizzyNavigatorFactory","setFlag","unsetFlag","setFlagBookmarked","unsetFlagBookmarked","showReview","hideReview","showTestOverview","hideTestOverview","review","currentContext","reviewScreen","markReview","flag","updateButton","itemPosition","flagStatus","isHidden","defaultOpen","navigatorConfig","previousItemPosition","isPluginAllowed","canFlag","flagCurrentItem","$panelContainer","isItemFlagged","skip","doSkip","validateResponses","warnMessage","warnListener","warnBeforeLeaving","window","rightClickEvents","event","removeEliminationsOnClose","restoreEliminationsOnOpen","eliminator","isPluginEnabled","isEliminable","enableEliminator","disableEliminator","$choices","togglePlugin","allMasks","maskApi","reveal","mask","answerMasking","$choiceInteractions","getMasksState","setMasksState","statifier","answerMaskingFactory","itemStates","restoreStateOnToggle","restoreStateOnMove","disableMasking","enableMasking","togglePluginButton","currentPlayback","mediaContentData","playbackRate","selection","spec","clearAPIPElements","elementClass","$contentNodes","getCurrentItem","handleContentNodeClick","$currentTarget","selectedItemIndex","initDefaultModeItem","initItemWithTextSelection","currentSelection","commonAncestorContainer","selectedItem","initNextItem","activeElementClass","url","audio","initDefaultModePlayback","setMediaContentData","setPlaybackRate","setTTSStateOnContainer","togglePlayback","toggleSFHMode","toggleSettings","isSettings","handleResize","offsetFromRight","x","y","maxXPosition","ttsComponent","makePlaceable","makeStackable","container","left","maxPlaybackRate","minPlaybackRate","$closeElement","$dragElement","$playbackElement","$sfhModeElement","$sliderElement","$settingsElement","manualStart","restrict","restriction","elementRect","right","bottom","onmove","yOffset","interact","interaction","animate","connected","range","min","max","step","stackingOptions","stackingScope","getTTSItemData","contentLinkInfo","relatedElementInfo","spoken","audioFileInfo","fileHref","elementId","getTTSItemOrder","accessibilityInfo","accessElement","inclusionOrder","textGraphicsDefaultOrder","elementOrder","ttsComponentFactory","ttsApipDataProvider","ttsApipData","createNavigationGroup","$navigationGroupElement","groupNavigationId","$navigationElements","$currentElement","getTTSComponent","isConfigured","enablePlugin","disablePlugin","toggleTool","dynamicComponentInstance","preview","delay","dynamicComponent","draggable","resizable","preserveAspectRatio","width","minWidth","maxWidth","minHeight","height","previewDelay","maskComponent","foo","areaMasking","renderTo","draggableContainer","isEnabled","addMask","calculatorFactory","basicCalculatorFactory","scientificCalculatorFactory","defaultCalcConfig","proportionalResize","bodmasCalcConfig","scientificCalcConfig","calculator","maths","degree","bodmas","scientific","factory","calcConfig","replace","alternativeTemplate","buildCalculator","allowIn","toggleCalculator","stackerFactory","comment","contextOptions","stacker","toggleComment","isVisible","hidePanel","namespace","stopEvents","hideViewer","viewerFactory","pdfViewer","showPanel","resizeViewer","$overlay","$title","fitToWidth","allowSearch","displayViewer","initPanelEvents","hideIfVisible","allRanges","i","isHighlighting","highlightHelper","containerSelector","containersBlackList","clearOnClick","discardSelection","prevSelection","eventifier","toggleHighlighting","highlight","restoreIndex","index","getIndex","clearHighlights","getId","highlighterFactory","testHighlighterFactory","highlighters","highlighterCollection","addHighlighter","hl","getHighlighterById","getAllHighlighters","getItemHighlighter","getNonItemHighlighters","getLength","itemHelper","aria","pressed","instance","getStore","highlightsIndex","highlighterStore","hasHighlights","loadHighlight","stimHighlighter","saveAll","themeHandler","themeLoader","changeTheme","$qtiItem","previousTheme","allMenuEntries","menuEntry","availableThemes","defaultTheme","selectedTheme","reloadThemes","themesConfig","role","themeEntry","itemThemeId","maskAPI","place","placeOverlay","styleResizableEdges","isResizable","addResizeControll","$resizeControll","class","makeResizable","bringAllToFront","innerDrag","closer","invokeOnOverlays","invokeOnMasks","applyTransformsToOverlays","applyTransformsToInnerDrag","applyTransformsToCloser","overlayAPI","transformOverlay","restoreOverlay","appendVisualGuides","borderWidth","borderOffset","visualGuides","removeVisualGuides","overlay","makeDraggable","pointerEventsPrefix","$moveIcon","invokeOnAll","applyTransforms","dragRestriction","rect","$dragIcon","background","dimensions","applyTransformsToMasks","$closeIcon","invokeOn","fromTop","fromLeft","createPart","edges","edgesBorders","addOverlay","beforeResize","onResize","setTopHeight","setRightWidth","resizeControll","setBottomHeight","setInnerHeight","setLeftWidth","allParts","compoundMask","constrains","minBottomHeight","minTopHeight","createCompoundMask","createVisualGuides","createInnerDragHandle","createCloser","setTransforms","correctTransforms","getDimensions","getPosition","defaultDimensions","outerWidth","outerHeight","innerWidth","innerHeight","outerX","outerY","innerX","innerY","dragMinWidth","dragMinHeight","resizeHandleSize","innerDragHeight","lineHeight","paddingLeft","paddingTop","textPadding","compoundMaskFactory","maskOptions","containerWidthHasChanged","transformMask","openMask","closeMask","toggleMask","controls","$clonedTarget","scrollLeft","scrollTop","scrollOffsetsChanged","scrollId","scrollData","scrolling","magnifierPanel","updateScrollPositions","$newZoomLevel","targetWidth","targetHeight","observer","childList","characterData","subtree","setScrollingListener","removeScrollingListener","delta","actualSize","coordinate","el","$node","$root","indexes","$this","initConfig","zoomLevelMin","zoomLevelMax","zoomLevelStep","zoomLevel","maxRatio","$initTarget","dynamicComponentConfig","getZoomLevel","getTarget","setTarget","zoomTo","applyZoomLevel","showZoomLevel","updateMaxSize","updateZoom","zoomBy","zoomIn","zoomOut","zoomAt","translate","applySize","applyScrolling","updateMagnifier","scrollingListenerCallback","scrollingTop","scrollInClone","dynamicComponentContext","dx","dy","$inner","$zoomLevel","findSourceNode","createObserver","startObserver","stopObserver","screenRatio","debounceDelay","scrollingDelay","defaultBaseSize","defaultLevelMin","defaultLevelMax","defaultLevel","levelMin","levelMax","levelStep","baseSize","dynamicComponentDefaultConfig","magnifierPanelFactory","zoomMin","zoomMax","zoomStep","magnifier","hideMagnifier","showMagnifier","getMagnifierPanel","toggleMagnifier","transformer","standard","increment","lower","upper","_setZoomLevel","newScale","isOverZoom","_resetZoom","forceRepaint","sel","testRunnerContainer","zoomAction","before","sx","sy","zoomReApply"],"sources":["../runner/plugins/content/accessibility/focusOnFirstField.js","../runner/plugins/content/accessibility/jumplinks/helpers.js","../runner/plugins/content/accessibility/jumplinks/jumplinks.js","../runner/helpers/map.js","../runner/helpers/isReviewPanelEnabled.js","../runner/plugins/content/accessibility/jumplinks/shortcuts.js","../runner/plugins/content/accessibility/jumplinks/plugin.js","../runner/plugins/content/accessibility/keyNavigation/strategies/headerNavigation.js","../runner/plugins/content/accessibility/keyNavigation/strategies/toolbarNavigation.js","../runner/plugins/content/accessibility/keyNavigation/strategies/topToolbarNavigation.js","../runner/plugins/content/accessibility/keyNavigation/strategies/navigatorNavigation.js","../runner/plugins/content/accessibility/keyNavigation/strategies/pageNavigation.js","../runner/plugins/content/accessibility/keyNavigation/strategies/rubricsNavigation.js","../runner/plugins/content/accessibility/keyNavigation/strategies/itemNavigation.js","../runner/plugins/content/accessibility/keyNavigation/strategies/linearItemNavigation.js","../runner/plugins/content/accessibility/keyNavigation/strategies/stimulusNavigation.js","../runner/plugins/content/accessibility/keyNavigation/strategies/jumpLinks.js","../runner/plugins/content/accessibility/keyNavigation/strategies/index.js","../runner/plugins/content/accessibility/keyNavigation/strategiesManager.js","../runner/plugins/content/accessibility/keyNavigation/helpers.js","../runner/plugins/content/accessibility/keyNavigation/modes/defaultMode.js","../runner/plugins/content/accessibility/keyNavigation/modes/linearMode.js","../runner/plugins/content/accessibility/keyNavigation/modes/nativeMode.js","../runner/plugins/content/accessibility/keyNavigation/modes/index.js","../runner/plugins/content/accessibility/keyNavigation/modesManager.js","../runner/plugins/content/accessibility/keyNavigation/keyNavigation.js","css!taoQtiTest/runner/plugins/content/accessibility/css/key-navigation","../runner/plugins/content/accessibility/keyNavigation/plugin.js","../runner/plugins/content/accessibility/mainLandmark/header.js","../runner/plugins/content/dialog/dialog.js","../runner/plugins/content/dialog/exitMessages.js","../runner/plugins/content/dialog/itemAlertMessage.js","../runner/helpers/navigation.js","../runner/plugins/content/dialog/itemInlineMessage.js","../runner/plugins/content/feedback/feedback.js","../runner/plugins/content/itemScrolling/itemScrolling.js","../runner/plugins/content/loading/loading.js","../runner/plugins/content/modalFeedback/modalFeedback.js","../runner/plugins/content/overlay/overlay.js","../runner/plugins/content/responsiveness/collapser.js","../runner/plugins/content/rubricBlock/rubricBlock.js","../runner/plugins/controls/connectivity/connectivity.js","../runner/plugins/controls/connectivity/pauseOnError.js","../runner/plugins/controls/duration/duration.js","../runner/plugins/controls/progressbar/progress.js","../runner/plugins/controls/progressbar/renderer/percentage.js","../runner/plugins/controls/progressbar/renderer/position.js","../runner/plugins/controls/progressbar/progressbar.js","../runner/plugins/controls/testState/testState.js","../runner/helpers/getTimerMessage.js","../runner/plugins/controls/timer/component/css/countdown!css","../runner/plugins/controls/timer/component/countdown.js","../runner/plugins/controls/timer/component/css/timerbox!css","../runner/plugins/controls/timer/component/timerbox.js","../runner/plugins/controls/timer/strategy/enforcedStay.js","../runner/plugins/controls/timer/strategy/extraTime.js","../runner/plugins/controls/timer/strategy/guidedNavigation.js","../runner/plugins/controls/timer/strategy/timeout.js","../runner/helpers/currentItem.js","../runner/helpers/stats.js","../runner/helpers/messages.js","../runner/config/states.js","../runner/plugins/controls/timer/strategy/warnSectionLeaving.js","../runner/plugins/controls/timer/strategy/strategyHandler.js","../runner/plugins/controls/timer/timers.js","../runner/plugins/controls/timer/plugin.js","../runner/plugins/controls/title/title.js","../runner/plugins/controls/trace/itemTraceVariables.js","../runner/plugins/navigation/allowSkipping.js","../runner/plugins/navigation/next/nextWarningHelper.js","../runner/plugins/navigation/next.js","../runner/plugins/navigation/next/dialogConfirmNext.js","../runner/plugins/navigation/next/linearNextItemWarning.js","../runner/plugins/navigation/nextSection.js","../runner/plugins/navigation/previous.js","../runner/plugins/navigation/review/navigator.js","../runner/plugins/navigation/review/navigatorFizzy.js","../runner/plugins/navigation/review/review.js","../runner/plugins/navigation/skip.js","../runner/plugins/navigation/validateResponses.js","../runner/plugins/navigation/warnBeforeLeaving.js","../runner/plugins/security/disableRightClick.js","../runner/plugins/tools/answerElimination/eliminator.js","../runner/plugins/tools/answerMasking/answerMasking.js","../runner/plugins/tools/answerMasking/plugin.js","../runner/plugins/tools/apipTextToSpeech/textToSpeech.js","../runner/plugins/tools/apipTextToSpeech/ttsApipDataProvider.js","../runner/plugins/tools/apipTextToSpeech/plugin.js","../runner/plugins/tools/areaMasking/mask.js","../runner/plugins/tools/areaMasking/areaMasking.js","../runner/plugins/tools/calculator.js","../runner/plugins/tools/comment/comment.js","../runner/plugins/tools/documentViewer/documentViewer.js","../runner/plugins/tools/highlighter/highlighter.js","../runner/plugins/tools/highlighter/collection.js","../runner/plugins/tools/highlighter/plugin.js","../runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher.js","../runner/plugins/tools/lineReader/compoundMask.js","../runner/plugins/tools/lineReader/plugin.js","../runner/plugins/tools/magnifier/magnifierPanel.js","../runner/plugins/tools/magnifier/magnifier.js","../runner/plugins/tools/zoom.js","onLayerEnd0.js","module-create.js"],"sourcesContent":["define('taoQtiTest/runner/plugins/content/accessibility/focusOnFirstField',['lodash', 'taoTests/runner/plugin', 'ckeditor'], function (_, pluginFactory, ckEditor) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    ckEditor = ckEditor && Object.prototype.hasOwnProperty.call(ckEditor, 'default') ? ckEditor['default'] : ckEditor;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018 (original work) Open Assessment Technologies SA;\r\n     */\n\n    /**\r\n     * Check if client uses the iOS device.\r\n     *\r\n     * @returns {*|boolean}\r\n     */\n    function isIOSDevice() {\n      return /(iPhone|iPad)/i.test(navigator.userAgent);\n    }\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var focusOnFirstField = pluginFactory({\n      name: 'focusOnFirstField',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var self = this;\n\n        /**\r\n         * When an Item is loaded - if we set the focus on any input then the ipad sets the focus on the\r\n         * keyboard, so the windows lose focus\r\n         * and we get an error message for the test in fullscreen mode\r\n         */\n        if (!isIOSDevice()) {\n          this.getTestRunner().after('renderitem', function () {\n            var $input = self.getAreaBroker().getContentArea().find('.qti-itemBody').find('input, textarea, select').not(':input[type=button], :input[type=submit], :input[type=reset]').first();\n            var $cke = $input.closest('.qti-interaction').find('.cke');\n            if ($cke.length) {\n              _.delay(function () {\n                ckEditor.instances[$cke.attr('id').replace(/^cke_/, '')].focus();\n              }, 100);\n            } else {\n              $input.focus();\n            }\n          });\n        }\n      }\n    });\n\n    return focusOnFirstField;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/jumplinks/helpers',['exports', 'i18n'], function (exports, __) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Returns factory-like object.\r\n     *\r\n     * @param {AreaBroker} broker\r\n     *\r\n     * @returns {Object} - when you access properties it returns the corresponding element and move the focus on it.\r\n     *  List of availiable properties\r\n     *      - question\r\n     *      - navigation\r\n     *      - toolbox\r\n     *      - teststatus\r\n     */\n    const getJumpElementFactory = broker => ({\n      get container() {\n        return broker.getContainer();\n      },\n      get question() {\n        return broker.getContainer().find('.content-wrapper').first();\n      },\n      get navigation() {\n        return broker.getNavigationArea().find(':not(.hidden)[tabindex]').first();\n      },\n      get toolbox() {\n        return broker.getToolboxArea().find(':not(.hidden)[tabindex]').first();\n      },\n      get teststatus() {\n        return broker.getPanelArea().find(':not(.hidden)[tabindex]').first();\n      }\n    });\n\n    /**\r\n     * Returns testrunner item status.\r\n     *\r\n     * @param {Object} item - testrunner item\r\n     *\r\n     * @returns {String} - localized string.\r\n     */\n    const getItemStatus = item => {\n      if (item.flagged) {\n        return __('Flagged for review');\n      }\n      if (item.answered) {\n        return __('Answered');\n      }\n      if (item.viewed) {\n        return __('Not answered');\n      }\n      return __('Not seen');\n    };\n\n    /**\r\n     * Detects if review panel hidden or not.\r\n     *\r\n     * @param {TestRunner} testRunner\r\n     *\r\n     * @returns {Boolean}\r\n     */\n    const isReviewPanelHidden = testRunner => testRunner.getAreaBroker().getPanelArea().find('.qti-navigator').is('.hidden');\n\n    exports.getItemStatus = getItemStatus;\n    exports.getJumpElementFactory = getJumpElementFactory;\n    exports.isReviewPanelHidden = isReviewPanelHidden;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/jumplinks/jumplinks',['lodash', 'ui/component', 'handlebars', 'lib/handlebars/helpers'], function (_, component, Handlebars, Helpers0) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\n    function program1(depth0,data) {\n      \n      \n      return \"hidden\";\n      }\n\n      buffer += \"<nav class=\\\"jump-links-box\\\" aria-label=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Jump Menu\", options) : helperMissing.call(depth0, \"__\", \"Jump Menu\", options)))\n        + \"\\\">\\r\\n    <ul>\\r\\n        <li class=\\\"jump-link-item\\\">\\r\\n            <button data-jump=\\\"question\\\" class=\\\"jump-link\\\" >\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Jump to:\", options) : helperMissing.call(depth0, \"__\", \"Jump to:\", options)))\n        + \" <b>\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Question\", options) : helperMissing.call(depth0, \"__\", \"Question\", options)))\n        + \" - \";\n      if (helper = helpers.questionStatus) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.questionStatus); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</b></button>\\r\\n        </li>\\r\\n        <li class=\\\"jump-link-item\\\">\\r\\n            <button data-jump=\\\"navigation\\\" class=\\\"jump-link\\\" >\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Jump to:\", options) : helperMissing.call(depth0, \"__\", \"Jump to:\", options)))\n        + \" <b>\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Navigation\", options) : helperMissing.call(depth0, \"__\", \"Navigation\", options)))\n        + \"</b></button>\\r\\n        </li>\\r\\n        <li class=\\\"jump-link-item\\\">\\r\\n            <button data-jump=\\\"toolbox\\\" class=\\\"jump-link\\\" >\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Jump to:\", options) : helperMissing.call(depth0, \"__\", \"Jump to:\", options)))\n        + \" <b>\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Toolbox\", options) : helperMissing.call(depth0, \"__\", \"Toolbox\", options)))\n        + \"</b></button>\\r\\n        </li>\\r\\n        <li class=\\\"jump-link-item \";\n      stack1 = helpers.unless.call(depth0, (depth0 && depth0.isReviewPanelEnabled), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\" >\\r\\n            <button data-jump=\\\"teststatus\\\" class=\\\"jump-link\\\" >\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Jump to:\", options) : helperMissing.call(depth0, \"__\", \"Jump to:\", options)))\n        + \" <b>\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test Status and Structure\", options) : helperMissing.call(depth0, \"__\", \"Test Status and Structure\", options)))\n        + \"</b></button>\\r\\n        </li>\\r\\n        <li class=\\\"jump-link-item\\\">\\r\\n            <button data-jump=\\\"shortcuts\\\" class=\\\"jump-link\\\" >\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Jump to:\", options) : helperMissing.call(depth0, \"__\", \"Jump to:\", options)))\n        + \" <b>\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Open Keyboard Shortcuts\", options) : helperMissing.call(depth0, \"__\", \"Open Keyboard Shortcuts\", options)))\n        + \"</b></button>\\r\\n        </li>\\r\\n    </ul>\\r\\n</nav>\\r\\n\";\n      return buffer;\n      });\n    function jumplinksTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Default config values, see below.\r\n     */\n    const defaults = {};\n\n    /**\r\n     * Creates and initialize the jumplinks component.\r\n     * Please not the component IS NOT rendered.\r\n     * You'll have to render it by yourself.\r\n     *\r\n     * @returns {jumplinks} the component, initialized and rendered\r\n     */\n    function jumplinksFactory(config) {\n      /**\r\n       * @typedef {Object} jumplinksBox\r\n       */\n      const jumplinksBox = component({}, defaults).on('render', function () {\n        // handle related Jump Links\n        const behavior = [{\n          selector: '[data-jump=question] ',\n          eventName: 'jump',\n          eventParam: 'question'\n        }, {\n          selector: '[data-jump=navigation]',\n          eventName: 'jump',\n          eventParam: 'navigation'\n        }, {\n          selector: '[data-jump=toolbox]',\n          eventName: 'jump',\n          eventParam: 'toolbox'\n        }, {\n          selector: '[data-jump=teststatus]',\n          eventName: 'jump',\n          eventParam: 'teststatus'\n        }, {\n          selector: '[data-jump=shortcuts]',\n          eventName: 'shortcuts',\n          eventParam: 'shortcuts'\n        }];\n        _.forEach(behavior, linkDescription => {\n          const $link = this.getElement().find(linkDescription.selector);\n          const handleLink = () => {\n            this.trigger(linkDescription.eventName, linkDescription.eventParam);\n            this.getElement().find(':focus').blur();\n          };\n          if ($link) {\n            $link.on('click', handleLink);\n            $link.on('keyup', event => {\n              const activationKeys = [32, 13]; // link can be activated by click or enter/space keys\n              if (activationKeys.includes(event.keyCode)) {\n                handleLink();\n              }\n            });\n          }\n        });\n      });\n      jumplinksBox.setTemplate(jumplinksTpl);\n      _.defer(() => {\n        jumplinksBox.init(config);\n      });\n      return jumplinksBox;\n    }\n\n    return jumplinksFactory;\n\n});\n\n","define('taoQtiTest/runner/helpers/map',['lodash'], function (_) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * @typedef {Object} itemStats\r\n     * @property {Number} questions - the number of questions items\r\n     * @property {Number} answered - the number of answered questions\r\n     * @property {Number} flagged - the number of items flagged for review\r\n     * @property {Number} viewed - the number of viewed items\r\n     * @property {Number} total - the total number of items\r\n     * @property {Number} questionsViewed - the number of viewed questions\r\n     */\n\n    /**\r\n     * Gets an empty stats record\r\n     * @returns {itemStats}\r\n     */\n    function getEmptyStats() {\n      return {\n        questions: 0,\n        answered: 0,\n        flagged: 0,\n        viewed: 0,\n        total: 0,\n        questionsViewed: 0\n      };\n    }\n\n    /**\r\n     * Defines a helper that provides extractors for an assessment test map\r\n     */\n    var map = {\n      /**\r\n       * Gets the jumps table\r\n       * @param {Object} map - The assessment test map\r\n       * @returns {Object}\r\n       */\n      getJumps: function getJumps(map) {\n        return map && map.jumps;\n      },\n      /**\r\n       * Gets the parts table\r\n       * @param {Object} map - The assessment test map\r\n       * @returns {Object}\r\n       */\n      getParts: function getParts(map) {\n        return map && map.parts;\n      },\n      /**\r\n       * Get sections table\r\n       * @param {Object} map - The assessment test map\r\n       * @returns {Object} the sections\r\n       */\n      getSections: function getSections(map) {\n        var parts = this.getParts(map),\n          result = {};\n        _.forEach(parts, function (part) {\n          var sections = part.sections;\n          if (sections) {\n            _.forEach(sections, function (section) {\n              result[section.id] = section;\n            });\n          }\n        });\n        return result;\n      },\n      /**\r\n       * Get active item from the test map\r\n       * @param {Object} mapWithActive - The assessment test map which has active part/section/item marked\r\n       * @returns {Object} the active item\r\n       */\n      getActiveItem: function getActiveItem(mapWithActive) {\n        var parts = this.getParts(mapWithActive),\n          result = {};\n        _.forEach(parts, function (part) {\n          var sections = part.sections;\n          if (sections) {\n            _.forEach(sections, function (section) {\n              if (section.active) {\n                const items = section.items;\n                _.forEach(items, function (item) {\n                  if (item.active) {\n                    result = item;\n                  }\n                });\n              }\n            });\n          }\n        });\n        return result;\n      },\n      /**\r\n       * Return the list of remaining sections.\r\n       * @param {Object} map - The assessment test map\r\n       * @param {String} sectionId - The next sections will be gathered once this sectionId has been reached\r\n       * @returns {Object} the next sections\r\n       */\n      getNextSections: function getNextSections(map, sectionId) {\n        var sections = this.getSections(map),\n          result = {},\n          canList = false;\n        _.forEach(sections, function (section) {\n          if (canList) {\n            result[section.id] = section;\n          }\n          if (section.id === sectionId) {\n            canList = true;\n          }\n        });\n        return result;\n      },\n      /**\r\n       * Gets the jump at a particular position\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Number} position - The position of the item\r\n       * @returns {Object}\r\n       */\n      getJump: function getJump(map, position) {\n        var jumps = this.getJumps(map);\n        return jumps && jumps[position];\n      },\n      /**\r\n       * Gets a test part by its identifier\r\n       * @param {Object} map - The assessment test map\r\n       * @param {String} partName - The identifier of the test part\r\n       * @returns {Object}\r\n       */\n      getPart: function getPart(map, partName) {\n        var parts = this.getParts(map);\n        return parts && parts[partName];\n      },\n      /**\r\n       * Gets a test section by its identifier\r\n       * @param {Object} map - The assessment test map\r\n       * @param {String} sectionName - The identifier of the test section\r\n       * @returns {Object}\r\n       */\n      getSection: function getSection(map, sectionName) {\n        var parts = this.getParts(map);\n        var section = null;\n        _.forEach(parts, function (part) {\n          var sections = part.sections;\n          if (sections && sections[sectionName]) {\n            section = sections[sectionName];\n            return false;\n          }\n        });\n        return section;\n      },\n      /**\r\n       * Gets a test item by its identifier\r\n       * @param {Object} map - The assessment test map\r\n       * @param {String} itemIdentifier - The identifier of the test item\r\n       * @returns {Object}\r\n       */\n      getItem(map, itemIdentifier) {\n        const jump = _.find(this.getJumps(map), {\n          identifier: itemIdentifier\n        });\n        return this.getItemAt(map, jump && jump.position);\n      },\n      /**\r\n       * Gets a test item by its identifier\r\n       * @param {Object} map - The assessment test map\r\n       * @param {String} itemIdentifier - The identifier of the test item\r\n       * @returns {String[]} the raw list of categories\r\n       */\n      getItemCategories(map, itemIdentifier) {\n        const item = this.getItem(map, itemIdentifier);\n        if (item && Array.isArray(item.categories)) {\n          return item.categories;\n        }\n        return [];\n      },\n      /**\r\n       * Check if an item has a category\r\n       * @param {Object} map - The assessment test map\r\n       * @param {String} itemIdentifier - The identifier of the test item\r\n       * @param {String} category - the category to check\r\n       * @param {Boolean} [fuzzyMatch=false] - if true the prefix or the case doesn't matter\r\n       * @returns {String[]} the raw list of categories\r\n       */\n      hasItemCategory(map, itemIdentifier, category) {\n        let fuzzyMatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        const taoPrefix = 'x-tao-option-';\n        const categories = this.getItemCategories(map, itemIdentifier);\n        if (!category || !category.length) {\n          return false;\n        }\n        const exactMatch = categories.includes(category);\n        if (exactMatch) {\n          return true;\n        }\n        if (fuzzyMatch) {\n          //check by adding the prefix first\n          if (!category.startsWith(taoPrefix) && category.includes(`${taoPrefix}${category}`)) {\n            return true;\n          }\n\n          //compare without the prefix and any case system\n          const normalize = elt => elt.replace(taoPrefix, '').replace(/[-_\\s]/g, '').toLowerCase();\n          return categories.some(itemCategory => normalize(itemCategory) === normalize(category));\n        }\n        return false;\n      },\n      /**\r\n       * Gets the global stats of the assessment test\r\n       * @param {Object} map - The assessment test map\r\n       * @returns {itemStats}\r\n       */\n      getTestStats: function getTestStats(map) {\n        return map && map.stats;\n      },\n      /**\r\n       * Gets the stats of the test part containing a particular position\r\n       * @param {Object} map - The assessment test map\r\n       * @param {String} partName - The identifier of the test part\r\n       * @returns {itemStats}\r\n       */\n      getPartStats: function getPartStats(map, partName) {\n        var part = this.getPart(map, partName);\n        return part && part.stats;\n      },\n      /**\r\n       * Gets the stats of the test section containing a particular position\r\n       * @param {Object} map - The assessment test map\r\n       * @param {String} sectionName - The identifier of the test section\r\n       * @returns {itemStats}\r\n       */\n      getSectionStats: function getSectionStats(map, sectionName) {\n        var section = this.getSection(map, sectionName);\n        return section && section.stats;\n      },\n      /**\r\n       * Gets the stats related to a particular scope\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Number} position - The current position\r\n       * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\r\n       * @returns {itemStats}\r\n       */\n      getScopeStats: function getScopeStats(map, position, scope) {\n        var jump = this.getJump(map, position);\n        switch (scope) {\n          case 'section':\n          case 'testSection':\n            return this.getSectionStats(map, jump && jump.section);\n          case 'part':\n          case 'testPart':\n            return this.getPartStats(map, jump && jump.part);\n\n          // During calculation stats for this case,\n          // we are considiring all unanswered inaccessible items as answered\n          case 'testWithoutInaccessibleItems':\n            {\n              const testStats = this.getTestStats(map);\n              const {\n                position: currentPartPosition,\n                isLinear: isCurrentPartLinear\n              } = this.getPart(map, jump && jump.part);\n              const parts = Object.values(this.getParts(map)).filter(_ref => {\n                let {\n                  position: partPosition\n                } = _ref;\n                return partPosition < currentPartPosition;\n              }).sort((a, b) => b - a);\n\n              // Find the neirest part to which test taker can not navigate\n              const linearPartIndex = isCurrentPartLinear ? 0 : parts.findIndex(_ref2 => {\n                let {\n                  isLinear\n                } = _ref2;\n                return isLinear;\n              });\n              if (linearPartIndex === -1) {\n                return testStats;\n              }\n\n              // Calculate all unanswered and flagged questions in inaccessible parts\n              const inaccessibleParts = parts.slice(linearPartIndex);\n              const countOfInaccessibleUnasweredQestions = inaccessibleParts.reduce((acc, _ref3) => {\n                let {\n                  stats: {\n                    questions,\n                    answered\n                  }\n                } = _ref3;\n                return acc + (questions - answered);\n              }, 0);\n              const countOfInaccessibleFlaggedQestions = inaccessibleParts.reduce((acc, _ref4) => {\n                let {\n                  stats: {\n                    flagged\n                  }\n                } = _ref4;\n                return acc + flagged;\n              }, 0);\n              return Object.assign({}, testStats, {\n                answered: testStats.answered + countOfInaccessibleUnasweredQestions,\n                flagged: testStats.flagged - countOfInaccessibleFlaggedQestions\n              });\n            }\n          default:\n          case 'test':\n            return this.getTestStats(map);\n        }\n      },\n      /**\r\n       * Gets the map of a particular scope from a particular position\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Number} position - The current position\r\n       * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\r\n       * @returns {object} The scoped map\r\n       */\n      getScopeMap: function getScopeMap(map, position, scope) {\n        // need a clone of the map as we will change some properties\n        var scopeMap = _.cloneDeep(map || {});\n\n        // gets the current part and section\n        var jump = this.getJump(scopeMap, position);\n        var part = this.getPart(scopeMap, jump && jump.part);\n        var section = this.getSection(scopeMap, jump && jump.section);\n\n        // reduce the map to the scope part\n        if (scope && scope !== 'test') {\n          scopeMap.parts = {};\n          if (part) {\n            scopeMap.parts[jump.part] = part;\n          }\n        }\n\n        // reduce the map to the scope section\n        if (part && (scope === 'section' || scope === 'testSection')) {\n          part.sections = {};\n          if (section) {\n            part.sections[jump.section] = section;\n          }\n        }\n\n        // update the stats to reflect the scope\n        if (section) {\n          section.stats = this.computeItemStats(section.items);\n        }\n        if (part) {\n          part.stats = this.computeStats(part.sections);\n        }\n        scopeMap.stats = this.computeStats(scopeMap.parts);\n        return scopeMap;\n      },\n      /**\r\n       * Gets the map of a particular scope from a current context\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Object} context - The current session context\r\n       * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\r\n       * @returns {object} The scoped map\r\n       */\n      getScopeMapFromContext: function getScopeMapFromContext(map, context, scope) {\n        // need a clone of the map as we will change some properties\n        var scopeMap = _.cloneDeep(map || {});\n        var part;\n        var section;\n\n        // gets the current part and section\n        if (context && context.testPartId) {\n          part = this.getPart(scopeMap, context.testPartId);\n        }\n        if (context && context.sectionId) {\n          section = this.getSection(scopeMap, context.sectionId);\n        }\n\n        // reduce the map to the scope part\n        if (scope && scope !== 'test') {\n          scopeMap.parts = {};\n          if (part) {\n            scopeMap.parts[context.testPartId] = part;\n          }\n        }\n\n        // reduce the map to the scope section\n        if (part && (scope === 'section' || scope === 'testSection')) {\n          part.sections = {};\n          if (section) {\n            part.sections[context.sectionId] = section;\n          }\n        }\n\n        // update the stats to reflect the scope\n        if (section) {\n          section.stats = this.computeItemStats(section.items);\n        }\n        if (part) {\n          part.stats = this.computeStats(part.sections);\n        }\n        scopeMap.stats = this.computeStats(scopeMap.parts);\n        return scopeMap;\n      },\n      /**\r\n       * Gets the test part containing a particular position\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Number} position - The position of the item\r\n       * @returns {Object}\r\n       */\n      getItemPart: function getItemPart(map, position) {\n        var jump = this.getJump(map, position);\n        return this.getPart(map, jump && jump.part);\n      },\n      /**\r\n       * Gets the test section containing a particular position\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Number} position - The position of the item\r\n       * @returns {Object}\r\n       */\n      getItemSection: function getItemSection(map, position) {\n        var jump = this.getJump(map, position);\n        var part = this.getPart(map, jump && jump.part);\n        var sections = part && part.sections;\n        return sections && sections[jump && jump.section];\n      },\n      /**\r\n       * Gets the item located at a particular position\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Number} position - The position of the item\r\n       * @returns {Object}\r\n       */\n      getItemAt: function getItemAt(map, position) {\n        var jump = this.getJump(map, position);\n        var part = this.getPart(map, jump && jump.part);\n        var sections = part && part.sections;\n        var section = sections && sections[jump && jump.section];\n        var items = section && section.items;\n        return items && items[jump && jump.identifier];\n      },\n      /**\r\n       * Gets the identifier of an existing item\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Number|String} position - The position of the item, can already be the identifier\r\n       * @returns {String}\r\n       */\n      getItemIdentifier: function getItemIdentifier(map, position) {\n        var item;\n        if (_.isFinite(position)) {\n          item = this.getItemAt(map, position);\n        } else {\n          item = this.getItem(map, position);\n        }\n        return item && item.id;\n      },\n      /**\r\n       * Applies a callback on each item of the provided map\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Function} callback(item, section, part, map) - A callback to apply on each item\r\n       * @returns {Object}\r\n       */\n      each: function each(map, callback) {\n        if (_.isFunction(callback)) {\n          _.forEach(map && map.parts, function (part) {\n            _.forEach(part && part.sections, function (section) {\n              _.forEach(section && section.items, function (item) {\n                callback(item, section, part, map);\n              });\n            });\n          });\n        }\n        return map;\n      },\n      /**\r\n       * Update the map stats from a particular item\r\n       * @param {Object} map - The assessment test map\r\n       * @param {Number} position - The position of the item\r\n       * @returns {Object}\r\n       */\n      updateItemStats: function updateItemStats(map, position) {\n        var jump = this.getJump(map, position);\n        var part = this.getPart(map, jump && jump.part);\n        var sections = part && part.sections;\n        var section = sections && sections[jump && jump.section];\n        if (section) {\n          section.stats = this.computeItemStats(section.items);\n        }\n        if (part) {\n          part.stats = this.computeStats(part.sections);\n        }\n        if (map) {\n          map.stats = this.computeStats(map.parts);\n        }\n        return map;\n      },\n      /**\r\n       * Computes the stats for a list of items\r\n       * @param {Object} items\r\n       * @returns {itemStats}\r\n       */\n      computeItemStats: function computeItemStats(items) {\n        return _.reduce(items, function accStats(acc, item) {\n          if (!item.informational) {\n            acc.questions++;\n            if (item.answered) {\n              acc.answered++;\n            }\n            if (item.viewed) {\n              acc.questionsViewed++;\n            }\n          }\n          if (item.flagged) {\n            acc.flagged++;\n          }\n          if (item.viewed) {\n            acc.viewed++;\n          }\n          acc.total++;\n          return acc;\n        }, getEmptyStats());\n      },\n      /**\r\n       * Computes the global stats of a collection of stats\r\n       * @param {Object} collection\r\n       * @returns {itemStats}\r\n       */\n      computeStats: function computeStats(collection) {\n        return _.reduce(collection, function accStats(acc, item) {\n          acc.questions += item.stats.questions;\n          acc.answered += item.stats.answered;\n          acc.flagged += item.stats.flagged;\n          acc.viewed += item.stats.viewed;\n          acc.total += item.stats.total;\n          acc.questionsViewed += item.stats.questionsViewed;\n          return acc;\n        }, getEmptyStats());\n      },\n      /**\r\n       * Patch a testMap with a partial testMap.\r\n       *\r\n       * If the currentMap is null or the scope is test,\r\n       * we just use the partialMap as it is.\r\n       *\r\n       * Indexes, position and stats will be (re)built.\r\n       *\r\n       * @param {Object} currentMap - the map to patch\r\n       * @param {Object} partialMap - the patch\r\n       * @param {String} partialMap.scope - indicate the scope of the patch (test, part or section)\r\n       * @returns {Object} the patched testMap\r\n       * @throws {TypeError} if the partialMap is no a map\r\n       */\n      patch: function patch(currentMap, partialMap) {\n        var self = this;\n        var targetMap;\n        if (!_.isPlainObject(partialMap) || !partialMap.parts) {\n          throw new TypeError('Invalid test map format');\n        }\n        if (!currentMap || partialMap.scope === 'test') {\n          targetMap = _.cloneDeep(partialMap);\n        } else {\n          targetMap = _.cloneDeep(currentMap);\n          _.forEach(partialMap.parts, function (partialPart, targetPartId) {\n            if (partialMap.scope === 'part') {\n              //replace the target part\n              targetMap.parts[targetPartId] = _.cloneDeep(partialPart);\n            }\n            if (partialMap.scope === 'section') {\n              _.forEach(partialPart.sections, function (partialSection, targetSectionId) {\n                //replace the target section\n                targetMap.parts[targetPartId].sections[targetSectionId] = _.cloneDeep(partialSection);\n\n                //compte new section stats\n                targetMap.parts[targetPartId].sections[targetSectionId].stats = self.computeItemStats(targetMap.parts[targetPartId].sections[targetSectionId].items);\n              });\n            }\n            //compte new/updated part stats\n            targetMap.parts[targetPartId].stats = self.computeStats(targetMap.parts[targetPartId].sections);\n          });\n          //compte updated test stats\n          targetMap.stats = this.computeStats(targetMap.parts);\n        }\n\n        //the updated map can have a different size than the original\n        targetMap = this.reindex(targetMap);\n        return targetMap;\n      },\n      /**\r\n       * Rebuild the indexes, positions of all map parts.\r\n       * Then recreate the jump table.\r\n       *\r\n       * @param {Object} map - the map to reindex\r\n       * @returns {Object} the brand new map\r\n       * @throws {TypeError} if the map is no a map\r\n       */\n      reindex: function reindex(map) {\n        var offset = 0;\n        var offsetPart = 0;\n        var offsetSection = 0;\n        var lastPartId;\n        var lastSectionId;\n        if (!_.isPlainObject(map) || !map.parts) {\n          throw new TypeError('Invalid test map format');\n        }\n\n        //remove the jump table\n        map.jumps = [];\n\n        //browse the test map, by position\n        _.sortBy(map && map.parts, 'position').forEach(function (part) {\n          _.sortBy(part && part.sections, 'position').forEach(function (section) {\n            _.sortBy(section && section.items, 'position').forEach(function (item) {\n              if (lastPartId !== part.id) {\n                offsetPart = 0;\n                lastPartId = part.id;\n                part.position = offset;\n              }\n              if (lastSectionId !== section.id) {\n                offsetSection = 0;\n                lastSectionId = section.id;\n                section.position = offset;\n              }\n              item.position = offset;\n              item.index = offsetSection + 1;\n              item.positionInPart = offsetPart;\n              item.positionInSection = offsetSection;\n              map.jumps[offset] = {\n                identifier: item.id,\n                section: section.id,\n                part: part.id,\n                position: offset\n              };\n              offset++;\n              offsetSection++;\n              offsetPart++;\n            });\n          });\n        });\n        return map;\n      },\n      /**\r\n       * Create the jump table for a test map\r\n       *\r\n       * @param {Object} map - the map\r\n       * @returns {Object} the brand new map with a jump table\r\n       * @throws {TypeError} if the map is no a map\r\n       */\n      createJumpTable: function createJumpTable(map) {\n        if (!_.isPlainObject(map) || !map.parts) {\n          throw new TypeError('Invalid test map format');\n        }\n        map.jumps = [];\n        this.each(map, function (item, section, part) {\n          var offset = item.position;\n          map.jumps[offset] = {\n            identifier: item.id,\n            section: section.id,\n            part: part.id,\n            position: offset\n          };\n        });\n        return map;\n      }\n    };\n\n    return map;\n\n});\n\n","define('taoQtiTest/runner/helpers/isReviewPanelEnabled',['taoQtiTest/runner/helpers/map'], function (mapHelper) { 'use strict';\n\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    /**\r\n     * Tells if the review panel is enabled\r\n     * @returns {Boolean}\r\n     */\n    function isReviewPanelEnabled(runner) {\n      const reviewEnabled = mapHelper.hasItemCategory(runner.getTestMap(), runner.getTestContext().itemIdentifier, 'reviewScreen', true);\n      const itemReviewEnabled = runner.getOptions().review.enabled;\n      return reviewEnabled && itemReviewEnabled;\n    }\n\n    return isReviewPanelEnabled;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/jumplinks/shortcuts',['i18n', 'lodash', 'ui/component', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'handlebars', 'lib/handlebars/helpers'], function (__, _, component, keyNavigator, navigableDomElement, Handlebars, Helpers0) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"\\r\\n        <div class=\\\"shortcuts-group-wrapper\\\">\\r\\n            <h3 class=\\\"shortcuts-group-title\\\">\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</h3>\\r\\n            <ul class=\\\"shortcuts-group-list\\\">\\r\\n                \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.shortcuts), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n            </ul>\\r\\n        </div>\\r\\n        \";\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"\\r\\n                <li class=\\\"shortcut-item\\\">\\r\\n                    <span class=\\\"shortcut-item-shortcut\\\">\\r\\n                        <kbd>\";\n      if (helper = helpers.shortcut) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.shortcut); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</kbd>\\r\\n                    </span>\\r\\n                    <span class=\\\"shortcut-item-action\\\">\\r\\n                        \";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\r\\n                    </span>\\r\\n                </li>\\r\\n                \";\n      return buffer;\n      }\n\n      buffer += \"<div class=\\\"shortcuts-list-wrapper\\\">\\r\\n    <div class=\\\"shortcuts-list\\\" role=\\\"dialog\\\" aria-modal=\\\"true\\\" aria-labelledby=\\\"jumplinks/shortcuts-heading\\\"\\r\\n        aria-describedby=\\\"jumplinks/shortcuts-description\\\">\\r\\n        <h2 class=\\\"shortcuts-list-title\\\" id=\\\"jumplinks/shortcuts-heading\\\">\\r\\n            \"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Keyboard Navigation\", options) : helperMissing.call(depth0, \"__\", \"Keyboard Navigation\", options)))\n        + \"\\r\\n        </h2>\\r\\n        <div id=\\\"jumplinks/shortcuts-description\\\">\\r\\n            <p class=\\\"shortcuts-list-description\\\">\\r\\n                \"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Keyboard shortcuts for the Accessibility Tools are available to the Test-taker.\", options) : helperMissing.call(depth0, \"__\", \"Keyboard shortcuts for the Accessibility Tools are available to the Test-taker.\", options)))\n        + \"\\r\\n            </p>\\r\\n            <p class=\\\"shortcuts-list-description\\\">\\r\\n                \"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"You can magnify the content by up to 200%. Check your browser settings to find out how to do it.\", options) : helperMissing.call(depth0, \"__\", \"You can magnify the content by up to 200%. Check your browser settings to find out how to do it.\", options)))\n        + \"\\r\\n            </p>\\r\\n        </div>\\r\\n        <button aria-label=\\\"Close dialog\\\" class=\\\"btn-close small\\\" data-control=\\\"close-btn\\\" type=\\\"button\\\">\\r\\n            <span class=\\\"icon-close\\\"></span>\\r\\n        </button>\\r\\n        \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.shortcutsGroups), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n    </div>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function shortcutsTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Default config values, see below.\r\n     */\n    const defaults = {\n      shortcutsGroups: [{\n        id: 'navigation-shortcuts',\n        label: __('Navigation shortcuts'),\n        shortcuts: [{\n          id: 'next',\n          shortcut: 'ALT + Shift + N',\n          label: __('Go to the next question')\n        }, {\n          id: 'previous',\n          shortcut: 'ALT + Shift + P',\n          label: __('Go to the previous question')\n        }, {\n          id: 'current',\n          shortcut: 'ALT + Shift + Q',\n          label: __('Go to the current question')\n        }, {\n          id: 'top',\n          shortcut: 'ALT + Shift + T',\n          label: __('Go to the top of the page')\n        }]\n      }]\n    };\n\n    /**\r\n     * Creates and initialize the shortcuts component.\r\n     * Please not the component IS NOT rendered.\r\n     * You'll have to render it by yourself.\r\n     *\r\n     * @param {Object} config\r\n     * @returns {shortcutsBox} the component, initialized and rendered\r\n     */\n    function shortcutsBoxFactory(config) {\n      const ESK_KEY_CODE = 27;\n      const shortcutsBox = component({}, defaults).on('render', function () {\n        const $element = this.getElement();\n        const $closeBtn = $element.find('.btn-close');\n        const $keyNavigationItems = this.getElement().find('.shortcuts-list, .btn-close');\n        $closeBtn.on('click', () => this.trigger('close'));\n        // handle overlay click\n        $element.on('click', e => {\n          if ($element.is(e.target)) {\n            this.trigger('close');\n          }\n        });\n        $element.on('keyup', e => {\n          if (e.keyCode === ESK_KEY_CODE) {\n            this.trigger('close');\n          }\n        });\n        this.navigator = keyNavigator({\n          elements: navigableDomElement.createFromDoms($keyNavigationItems),\n          propagateTab: false\n        })\n        // keep cursor at close button\n        .on('tab', function () {\n          this.setCursorAt(1);\n        }).on('shift+tab', function () {\n          this.setCursorAt(1);\n        })\n        // prevent focus move from shortcuts modal\n        .on('blur', () => {\n          _.defer(() => {\n            if (!this.navigator.isFocused()) {\n              this.navigator.focus();\n            }\n          });\n        }).on('activate', function (cursor) {\n          cursor.navigable.getElement().click();\n        });\n        this.navigator.first();\n      }).on('destroy', function () {\n        this.navigator.destroy();\n        this.getElement().remove();\n      });\n      shortcutsBox.setTemplate(shortcutsTpl);\n      shortcutsBox.init(config);\n      return shortcutsBox;\n    }\n\n    return shortcutsBoxFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/jumplinks/plugin',['i18n', 'jquery', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/isReviewPanelEnabled', 'taoQtiTest/runner/plugins/content/accessibility/jumplinks/helpers', 'taoQtiTest/runner/plugins/content/accessibility/jumplinks/jumplinks', 'taoQtiTest/runner/plugins/content/accessibility/jumplinks/shortcuts', 'util/shortcut', 'util/namespace', 'handlebars', 'lib/handlebars/helpers'], function (__, $$1, pluginFactory, isReviewPanelEnabled, helpers, jumplinksFactory, shortcutsFactory, shortcut, namespaceHelper, Handlebars, Helpers0) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    isReviewPanelEnabled = isReviewPanelEnabled && Object.prototype.hasOwnProperty.call(isReviewPanelEnabled, 'default') ? isReviewPanelEnabled['default'] : isReviewPanelEnabled;\n    jumplinksFactory = jumplinksFactory && Object.prototype.hasOwnProperty.call(jumplinksFactory, 'default') ? jumplinksFactory['default'] : jumplinksFactory;\n    shortcutsFactory = shortcutsFactory && Object.prototype.hasOwnProperty.call(shortcutsFactory, 'default') ? shortcutsFactory['default'] : shortcutsFactory;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers);  \n\n\n      return \"<div class=\\\"jump-links-container\\\"></div>\\r\\n\";\n      });\n    function containerTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Creates the JumpLinks plugin.\r\n     * adding jumplinks accessibility feature for quick navigation\r\n     */\n    var plugin = pluginFactory({\n      name: 'jumplinks',\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        const item = testRunner.getCurrentItem();\n        const config = {\n          isReviewPanelEnabled: isReviewPanelEnabled(testRunner),\n          questionStatus: helpers.getItemStatus(item)\n        };\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n        const areaBroker = this.getAreaBroker();\n        const getJumpElement = helpers.getJumpElementFactory(areaBroker);\n        const shortcutsConfig = navigator.appVersion.indexOf(\"Mac\") !== -1 ? {\n          shortcutsGroups: [{\n            id: 'navigation-shortcuts',\n            label: __('Navigation shortcuts'),\n            shortcuts: [{\n              id: 'next',\n              shortcut: 'OPTION + Shift + N',\n              label: __('Go to the next question')\n            }, {\n              id: 'previous',\n              shortcut: 'OPTION + Shift + P',\n              label: __('Go to the previous question')\n            }, {\n              id: 'current',\n              shortcut: 'OPTION + Shift + Q',\n              label: __('Go to the current question')\n            }, {\n              id: 'top',\n              shortcut: 'OPTION + Shift + T',\n              label: __('Go to the top of the page')\n            }]\n          }]\n        } : {};\n        if (testRunnerOptions.allowShortcuts) {\n          pluginShortcuts.goToTop && shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.goToTop, this.getName(), true), function () {\n            $$1('[tabindex]').first().focus();\n          }, {\n            avoidInput: true,\n            prevent: true\n          });\n          pluginShortcuts.goToQuestion && shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.goToQuestion, this.getName(), true), function () {\n            getJumpElement.question.focus();\n          }, {\n            avoidInput: true,\n            prevent: true\n          });\n        }\n        this.jumplinks = jumplinksFactory(config).on('render', () => {\n          this.jumplinks.on('jump', jumpTo => {\n            const $element = getJumpElement[jumpTo];\n            $element.focus();\n          });\n          this.jumplinks.on('shortcuts', () => {\n            if (this.shortcuts) {\n              return;\n            }\n            this.shortcuts = shortcutsFactory(shortcutsConfig);\n            this.shortcuts.render(this.getAreaBroker().getControlArea());\n            this.shortcuts.on('close', () => {\n              this.shortcuts.destroy();\n              this.shortcuts = null;\n            });\n          });\n        }).on('update', function update(params) {\n          this.trigger('changeReviewPanel', params.isReviewPanelEnabled);\n          this.trigger('changeQuesitionStatus', params.questionStatus);\n        }).on('changeReviewPanel', function changeReviewPanel(enabled) {\n          const elem = this.getElement();\n          const panelJumplink = elem.find('[data-jump=\"teststatus\"]').parent();\n          if (enabled) {\n            panelJumplink.removeClass('hidden');\n          } else {\n            panelJumplink.addClass('hidden');\n          }\n        }).on('changeQuesitionStatus', function changeQuesitionStatus(questionStatus) {\n          const elem = this.getElement();\n          const text = `${__('Question')} - ${questionStatus}`;\n          elem.find('[data-jump=\"question\"] > b').text(text);\n        });\n        testRunner.on('renderitem', () => {\n          const currentItem = testRunner.getCurrentItem();\n          const updatedConfig = {\n            isReviewPanelEnabled: !helpers.isReviewPanelHidden(testRunner) && isReviewPanelEnabled(testRunner),\n            questionStatus: helpers.getItemStatus(currentItem)\n          };\n          const announcedText = __('Item %s loaded', currentItem.position);\n          let $announce = $$1('[aria-live=polite][role=alert]').first();\n          if ($announce.length !== 1) {\n            $announce = $$1('<div aria-live=\"polite\" role=\"alert\" class=\"visible-hidden\"></div>');\n            $$1('main').first().append($announce);\n          }\n          $announce.text(announcedText);\n          this.jumplinks.trigger('update', updatedConfig);\n        }).on('tool-flagitem', () => {\n          const currentItem = testRunner.getCurrentItem();\n          const questionStatus = helpers.getItemStatus(Object.assign({}, currentItem, {\n            flagged: !currentItem.flagged\n          }));\n          this.jumplinks.trigger('changeQuesitionStatus', questionStatus);\n        }).on('tool-reviewpanel', () => {\n          const wasHidden = helpers.isReviewPanelHidden(testRunner);\n          this.jumplinks.trigger('changeReviewPanel', wasHidden);\n        }).after('renderitem', () => {\n          getJumpElement.question.attr('tabindex', '-1').focus();\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        const jumplinksContainer = $$1(containerTpl());\n        $$1('.content-wrap').prepend(jumplinksContainer);\n        this.jumplinks.render(jumplinksContainer);\n      }\n    });\n\n    return plugin;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/headerNavigation',['jquery', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function ($, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The identifier the keyNavigator group\r\n     * @type {String}\r\n     */\n    const groupId = 'header-toolbar';\n\n    /**\r\n     * Key navigator strategy applying onto the header bar.\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var headerNavigation = {\n      name: 'header',\n      /**\r\n       * Builds the header navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        const config = this.getConfig();\n        // we need a global selector as there is currently no way to access the delivery frame from the test runner\n        const $headerBar = $('header');\n        const $headerElements = $headerBar.find('a:visible');\n        const registerHeaderNavigator = (id, group, $elements) => {\n          const elements = navigableDomElement.createFromDoms($elements);\n          if (elements.length) {\n            const navigator = keyNavigator({\n              id,\n              group,\n              elements,\n              propagateTab: false,\n              defaultPosition: 0\n            });\n            helpers.setupItemsNavigator(navigator, config);\n            helpers.setupClickableNavigator(navigator);\n            this.keyNavigators.push(navigator);\n          }\n        };\n        this.keyNavigators = [];\n        if (config.flatNavigation) {\n          $headerElements.each((index, element) => registerHeaderNavigator(`${groupId}-${index}`, $headerBar, $(element)));\n        } else {\n          registerHeaderNavigator(groupId, $headerBar, $headerElements);\n        }\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.keyNavigators.forEach(navigator => navigator.destroy());\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return headerNavigation;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/toolbarNavigation',['lodash', 'jquery', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function (_, $, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The identifier the keyNavigator group\r\n     * @type {String}\r\n     */\n    const groupId = 'bottom-toolbar';\n\n    /**\r\n     * Key navigator strategy applying onto the tools bar\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var toolbarNavigation = {\n      name: 'toolbar',\n      /**\r\n       * Builds the toolbar navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        const config = this.getConfig();\n        const $navigationBar = this.getTestRunner().getAreaBroker().getContainer().find('.bottom-action-bar');\n        let $toolbarElements = $navigationBar.find('.action:not(.btn-group):visible, .action.btn-group .li-inner:visible');\n        if (config.reverseBottomToolbar) {\n          $toolbarElements = $($toolbarElements.get().reverse());\n        }\n        const registerToolbarNavigator = (id, group, $elements) => {\n          const elements = navigableDomElement.createFromDoms($elements);\n          if (elements.length) {\n            const navigator = keyNavigator({\n              id,\n              group,\n              elements,\n              propagateTab: false,\n              defaultPosition(navigableElements) {\n                let pos = 0;\n\n                // search for the position of the \"Next\" button if any,\n                // otherwise take the position of the last element\n                if (config.autoFocus) {\n                  pos = navigableElements.length - 1;\n                  _.forEach(navigableElements, (navigable, i) => {\n                    const $element = navigable.getElement();\n                    if ($element.data('control') === 'move-forward' || $element.data('control') === 'move-end') {\n                      pos = i;\n                    }\n                  });\n                }\n                return pos;\n              }\n            });\n            helpers.setupItemsNavigator(navigator, config);\n            helpers.setupClickableNavigator(navigator);\n            this.keyNavigators.push(navigator);\n          }\n        };\n        this.keyNavigators = [];\n        if (config.flatNavigation) {\n          $toolbarElements.each((index, element) => registerToolbarNavigator(`${groupId}-${index}`, $navigationBar, $(element)));\n        } else {\n          registerToolbarNavigator(groupId, $navigationBar, $toolbarElements);\n        }\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.keyNavigators.forEach(navigator => navigator.destroy());\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return toolbarNavigation;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/topToolbarNavigation',['jquery', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function ($, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The identifier the keyNavigator group\r\n     * @type {String}\r\n     */\n    const groupId = 'top-toolbar';\n\n    /**\r\n     * Key navigator strategy applying onto the top toolbar' bar.\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var topToolbarNavigation = {\n      name: 'top-toolbar',\n      /**\r\n       * Builds the top toolbar navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        const config = this.getConfig();\n        const $topToolbar = this.getTestRunner().getAreaBroker().getContainer().find('.top-action-bar');\n        const $toolbarElements = $topToolbar.find('.timer-toggler');\n        const registerTopToolbarNavigator = (id, group, $elements) => {\n          const elements = navigableDomElement.createFromDoms($elements);\n          if (elements.length) {\n            const navigator = keyNavigator({\n              id,\n              group,\n              elements,\n              propagateTab: false\n            });\n            helpers.setupItemsNavigator(navigator, config);\n            helpers.setupClickableNavigator(navigator);\n            this.keyNavigators.push(navigator);\n          }\n        };\n        this.keyNavigators = [];\n        $toolbarElements.each((index, element) => registerTopToolbarNavigator(`${groupId}-${index}`, $topToolbar, $(element)));\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.keyNavigators.forEach(navigator => navigator.destroy());\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return topToolbarNavigation;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/navigatorNavigation',['lodash', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function (_, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * List of CSS selectors for the navigables\r\n     * @type {Object}\r\n     */\n    const selectors = {\n      filters: '.qti-navigator-filters .qti-navigator-filter',\n      enabledItems: '.qti-navigator-tree .qti-navigator-item:not(.disabled) .qti-navigator-label'\n    };\n\n    /**\r\n     * For 'fizzy' navigator layout, builds the navigator navigation strategy.\r\n     *\r\n     * @returns {keyNavigationStrategy}\r\n     */\n    function initFizzy(config, $panel, $navigator, keyNavigators, managedNavigators) {\n      let itemsNavigator;\n      const $navigatorTree = $panel.find('.qti-navigator-tree');\n      const $enabledItems = $navigator.find('.qti-navigator-tree .buttonlist-item:not(.disabled) .buttonlist-btn');\n      const navigableItems = navigableDomElement.createFromDoms($enabledItems);\n\n      /**\r\n       * Get item wrapper from navigable button\r\n       * (`navigable`: '.buttonlist-btn'; `parent()`: '.buttonlist-item')\r\n       * @returns {jQuery}\r\n       */\n      const getItemFromNavigable = navigable => {\n        return navigable.getElement().parent();\n      };\n      if (navigableItems.length) {\n        itemsNavigator = keyNavigator({\n          id: 'navigator-items',\n          elements: navigableItems,\n          group: $navigatorTree,\n          loop: true,\n          defaultPosition(navigableElements) {\n            let pos = _.findIndex(navigableElements, navigable => {\n              const $parent = getItemFromNavigable(navigable);\n              if ($parent.hasClass('buttonlist-item-active') && $parent.is(':visible')) {\n                return true;\n              }\n            });\n            return pos >= 0 ? pos : 0;\n          }\n        }).on('focus', cursor => {\n          getItemFromNavigable(cursor.navigable).addClass('key-navigation-highlight');\n        }).on('blur', cursor => {\n          getItemFromNavigable(cursor.navigable).removeClass('key-navigation-highlight');\n        });\n        helpers.setupItemsNavigator(itemsNavigator, {\n          keyNextItem: config.keyNextItem,\n          keyPrevItem: config.keyPrevItem\n        });\n        helpers.setupClickableNavigator(itemsNavigator);\n        keyNavigators.push(itemsNavigator);\n        managedNavigators.push(itemsNavigator);\n      }\n    }\n\n    /**\r\n     * Key navigator strategy applying onto the navigation panel.\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var navigatorNavigation = {\n      name: 'navigator',\n      /**\r\n       * Builds the navigator navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        const config = this.getConfig();\n        const $panel = this.getTestRunner().getAreaBroker().getPanelArea();\n        const $navigator = $panel.find('.qti-navigator');\n        const isFizzyLayout = $navigator.hasClass('qti-navigator-fizzy');\n        this.managedNavigators = [];\n        this.keyNavigators = [];\n        if ($navigator.length && !$navigator.hasClass('disabled')) {\n          if (isFizzyLayout) {\n            initFizzy(config, $panel, $navigator, this.keyNavigators, this.managedNavigators);\n          } else {\n            const $testStatusHeader = $navigator.find('.qti-navigator-info.collapsible > .qti-navigator-label');\n            const navigableTestStatus = navigableDomElement.createFromDoms($testStatusHeader);\n            $testStatusHeader.addClass('key-navigation-actionable');\n            if (navigableTestStatus.length) {\n              const testStatusNavigation = keyNavigator({\n                keepState: config.keepState,\n                id: 'navigator-test-status',\n                propagateTab: false,\n                elements: navigableTestStatus,\n                group: $testStatusHeader\n              });\n              helpers.setupItemsNavigator(testStatusNavigation, {\n                keyNextItem: config.keyNextTab || config.keyNextItem,\n                keyPrevItem: config.keyPrevTab || config.keyPrevItem\n              });\n              this.keyNavigators.push(testStatusNavigation);\n              this.managedNavigators.push(testStatusNavigation);\n            }\n            let filtersNavigator;\n            let itemsNavigator;\n            //the tag to identify if the item listing has been browsed, to only \"smart jump\" to active item only on the first visit\n            let itemListingVisited = false;\n            //the position of the filter in memory, to only \"smart jump\" to active item only on the first visit\n            let currentFilter;\n            const $filters = $navigator.find(selectors.filters);\n            const navigableFilters = navigableDomElement.createFromDoms($filters);\n            if (navigableFilters.length) {\n              filtersNavigator = keyNavigator({\n                keepState: config.keepState,\n                id: 'navigator-filters',\n                propagateTab: false,\n                elements: navigableFilters,\n                group: $navigator.find('.qti-navigator-filters')\n              });\n              helpers.setupItemsNavigator(filtersNavigator, {\n                keyNextItem: config.keyNextTab || config.keyNextItem,\n                keyPrevItem: config.keyPrevTab || config.keyPrevItem\n              });\n              helpers.setupClickableNavigator(filtersNavigator);\n              if (config.keepState) {\n                filtersNavigator.on('focus', cursor => {\n                  if (config.keepState) {\n                    const $element = cursor.navigable.getElement();\n                    const filter = $element.data('mode');\n                    $element.click();\n                    if (currentFilter !== filter) {\n                      itemListingVisited = false;\n                    }\n                    currentFilter = filter;\n                  }\n                });\n              }\n              if (config.keyNextContent) {\n                filtersNavigator.on(config.keyNextContent, elem => {\n                  if (helpers.allowedToNavigateFrom(elem) && itemsNavigator) {\n                    _.defer(() => {\n                      if (itemListingVisited) {\n                        itemsNavigator.first();\n                      } else {\n                        itemsNavigator.focus();\n                      }\n                    });\n                  }\n                });\n              }\n              if (config.keyPrevContent) {\n                filtersNavigator.on(config.keyPrevContent, elem => {\n                  if (helpers.allowedToNavigateFrom(elem) && itemsNavigator) {\n                    _.defer(() => {\n                      itemsNavigator.last();\n                    });\n                  }\n                });\n              }\n              this.keyNavigators.push(filtersNavigator);\n              this.managedNavigators.push(filtersNavigator);\n            }\n            const $navigatorTree = $panel.find('.qti-navigator-tree');\n            const $trees = $navigator.find(selectors.enabledItems);\n            const navigableTrees = navigableDomElement.createFromDoms($trees);\n            $trees.first().addClass('key-navigation-scrollable-up');\n            $trees.last().addClass('key-navigation-scrollable-down');\n            if (navigableTrees.length) {\n              //instantiate a key navigator but do not add it to the returned list of navigators as this is not supposed to be reached with tab key\n              itemsNavigator = keyNavigator({\n                id: 'navigator-items',\n                elements: navigableTrees,\n                group: $navigatorTree,\n                defaultPosition(navigableElements) {\n                  let pos = 0;\n                  if (config.flatNavigation || currentFilter !== 'flagged') {\n                    pos = _.findIndex(navigableElements, navigable => {\n                      const $parent = navigable.getElement().parent('.qti-navigator-item');\n                      if ($parent.hasClass('active') && $parent.is(':visible')) {\n                        return true;\n                      }\n                    });\n                  }\n                  return pos;\n                }\n              }).on('focus', cursor => {\n                itemListingVisited = true;\n                cursor.navigable.getElement().parent().addClass('key-navigation-highlight');\n              }).on('blur', cursor => {\n                cursor.navigable.getElement().parent().removeClass('key-navigation-highlight');\n              });\n              helpers.setupItemsNavigator(itemsNavigator, {\n                keyNextItem: config.keyNextContent || config.keyNextItem,\n                keyPrevItem: config.keyPrevContent || config.keyPrevItem\n              });\n              helpers.setupClickableNavigator(itemsNavigator);\n              if (config.keepState) {\n                itemsNavigator.on('lowerbound upperbound', () => {\n                  if (filtersNavigator) {\n                    filtersNavigator.focus();\n                  }\n                });\n              }\n              if (config.keyNextTab && config.keyPrevTab) {\n                itemsNavigator.on(config.keyNextTab, function (elem) {\n                  if (helpers.allowedToNavigateFrom(elem) && filtersNavigator) {\n                    filtersNavigator.focus().next();\n                  }\n                });\n                itemsNavigator.on(config.keyPrevTab, function (elem) {\n                  if (helpers.allowedToNavigateFrom(elem) && filtersNavigator) {\n                    filtersNavigator.focus().previous();\n                  }\n                });\n              } else {\n                this.keyNavigators.push(itemsNavigator);\n              }\n              this.managedNavigators.push(itemsNavigator);\n            }\n          }\n        }\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.managedNavigators.forEach(navigator => navigator.destroy());\n        this.managedNavigators = [];\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return navigatorNavigation;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/pageNavigation',['jquery', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function ($, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The identifier the keyNavigator group\r\n     * @type {String}\r\n     */\n    const groupId = 'item-content-wrapper';\n\n    /**\r\n     * Key navigator strategy applying onto the page.\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var pageNavigation = {\n      name: 'page',\n      /**\r\n       * Builds the page navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        const config = this.getConfig();\n        this.keyNavigators = [];\n        this.getTestRunner().getAreaBroker().getContainer().find('.content-wrapper').addClass('key-navigation-scrollable').each((i, el) => {\n          const $element = $(el);\n          const navigator = keyNavigator({\n            id: `${groupId}-${this.keyNavigators.length}`,\n            elements: navigableDomElement.createFromDoms($element),\n            group: $element,\n            propagateTab: false\n          });\n          helpers.setupItemsNavigator(navigator, config);\n          this.keyNavigators.push(navigator);\n        });\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.keyNavigators.forEach(navigator => navigator.destroy());\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return pageNavigation;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/rubricsNavigation',['jquery', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function ($, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The identifier the keyNavigator group\r\n     * @type {String}\r\n     */\n    const groupId = 'rubric-element-navigation-group';\n\n    /**\r\n     * Key navigator strategy applying onto the rubric blocks.\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var rubricsNavigation = {\n      name: 'rubrics',\n      /**\r\n       * Builds the rubric blocks navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        const config = this.getConfig();\n        this.keyNavigators = [];\n        this.getTestRunner().getAreaBroker().getContainer().find('.qti-rubricBlock').addClass('key-navigation-scrollable').each((i, el) => {\n          const $element = $(el);\n          const navigator = keyNavigator({\n            id: `${groupId}-${this.keyNavigators.length}`,\n            elements: navigableDomElement.createFromDoms($element),\n            group: $element,\n            propagateTab: false\n          });\n          helpers.setupItemsNavigator(navigator, config);\n          this.keyNavigators.push(navigator);\n        });\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.keyNavigators.forEach(navigator => navigator.destroy());\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return rubricsNavigation;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/itemNavigation',['jquery', 'ui/scroller', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function ($, scrollHelper, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    scrollHelper = scrollHelper && Object.prototype.hasOwnProperty.call(scrollHelper, 'default') ? scrollHelper['default'] : scrollHelper;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Add aria-labelledby attribute to choice interaction\r\n     *\r\n     * @param {Navigator} cursor\r\n     */\n    const addLabelledByAttribute = cursor => {\n      const $element = cursor.navigable.getElement();\n      const value = $element.attr('value');\n      const name = $element.attr('name');\n      if (name) {\n        $element.attr('aria-labelledby', `${name.replace('response-', 'choice-')}-${value}`);\n      }\n    };\n\n    /**\r\n     * Add aria-labelledby attribute from choice interaction\r\n     *\r\n     * @param {Navigator} cursor\r\n     */\n    const removeLabelledByAttribute = cursor => {\n      const $element = cursor.navigable.getElement();\n      $element.removeAttr('aria-labelledby', '');\n    };\n\n    /**\r\n     * Adds attributes on navigation focus and blur\r\n     *\r\n     * @param {Navigator} navigator\r\n     */\n    const manageLabelledByAttribute = navigator => {\n      if (navigator) {\n        navigator.on('focus', addLabelledByAttribute);\n        navigator.on('blur', removeLabelledByAttribute); // applies WCAG behavior for the radio buttons\n      }\n    };\n\n    /**\r\n     * Key navigator strategy applying inside the item.\r\n     * Navigable item content are interaction choices and body element with the special class \"key-navigation-focusable\".\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var itemNavigation = {\n      name: 'item',\n      /**\r\n       * Builds the item navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        var _this = this;\n        this.keyNavigators = [];\n        const config = this.getConfig();\n        const $content = this.getTestRunner().getAreaBroker().getContentArea();\n\n        /**\r\n         * Gets the QTI choice element from the current position in the keyNavigation\r\n         * @param {Object} cursor - The cursor definition supplied by the keyNavigator\r\n         * @returns {jQuery} - The selected choice element\r\n         */\n        const getQtiChoice = function (cursor) {\n          return cursor && cursor.navigable.getElement().closest('.qti-choice');\n        };\n\n        /**\r\n         * Creates and registers a keyNavigator for the supplied list of elements\r\n         * @param {jQuery} $elements - The list of navigable elements\r\n         * @param {jQuery} group - The group container\r\n         * @param {Boolean} [loop=false] - Allow cycling the list when a boundary is reached\r\n         * @param {Number|Function} [defaultPosition=0] - The default position the group should set the focus on\r\n         * @returns {keyNavigator} - the created navigator, if the list of element is not empty\r\n         */\n        const addNavigator = function ($elements, group) {\n          let loop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          let defaultPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n          const elements = navigableDomElement.createFromDoms($elements);\n          if (elements.length) {\n            const navigator = keyNavigator({\n              elements,\n              group,\n              loop,\n              defaultPosition,\n              propagateTab: false\n            });\n            _this.keyNavigators.push(navigator);\n            return navigator;\n          }\n        };\n\n        /**\r\n         * Creates and setups a keyNavigator for the interaction inputs.\r\n         * @param {jQuery} $elements - The list of navigable elements\r\n         * @param {jQuery} group - The group container\r\n         * @param {Boolean} [loop=false] - Allow cycling the list when a boundary is reached\r\n         * @param {Number|Function} [defaultPosition=0] - The default position the group should set the focus on\r\n         * @returns {keyNavigator} - The supplied keyNavigator\r\n         */\n        const addInputsNavigator = function ($elements, group, loop) {\n          let defaultPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n          const navigator = addNavigator($elements, group, loop, defaultPosition);\n          if (navigator) {\n            helpers.setupItemsNavigator(navigator, config);\n            helpers.setupClickableNavigator(navigator);\n\n            // each choice is represented by more than the input, the style must be spread to the actual element\n            navigator.on('focus', cursor => scrollHelper.scrollTo(getQtiChoice(cursor).addClass('key-navigation-highlight'), $content.closest('.content-wrapper'))).on('blur', cursor => getQtiChoice(cursor).removeClass('key-navigation-highlight'));\n          }\n          return navigator;\n        };\n\n        // list the navigable areas inside the item. This could be either the interactions choices or the prompts\n        const $qtiInteractions = $content.find('.key-navigation-focusable,.qti-interaction')\n        //filter out interaction as it will be managed separately\n        .filter((i, node) => !$(node).parents('.qti-interaction').length);\n\n        // the item focusable body elements are considered scrollable\n        $content.find('.key-navigation-focusable').addClass('key-navigation-scrollable');\n\n        // each navigable area will get its own keyNavigator\n        $qtiInteractions.each((itemPos, itemElement) => {\n          const $itemElement = $(itemElement);\n\n          // detect the type of choices: checkbox or radio\n          const $choiceInput = $itemElement.find('.qti-choice input');\n          const choiceType = $choiceInput.attr('type');\n          if ($itemElement.hasClass('qti-interaction')) {\n            //add navigable elements from prompt\n            $itemElement.find('.key-navigation-focusable').each((navPos, nav) => {\n              const $nav = $(nav);\n              if (!$nav.closest('.qti-choice').length) {\n                addNavigator($nav, $nav);\n              }\n            });\n\n            //reset interaction custom key navigation to override the behaviour with the new one\n            $itemElement.off('.keyNavigation');\n\n            //search for inputs that represent the interaction focusable choices\n            const $inputs = $itemElement.is(':input') ? $itemElement : $itemElement.find(':input');\n            if (config.flatNavigation && (config.flatRadioNavigation || choiceType !== 'radio')) {\n              $inputs.each((i, input) => {\n                const navigator = addInputsNavigator($(input), $itemElement);\n                manageLabelledByAttribute(navigator);\n              });\n            } else {\n              const navigator = addInputsNavigator($inputs, $itemElement, true, () => {\n                // keep default positioning for now\n                let position = -1;\n\n                // autofocus the selected radio button if any\n                $inputs.each((index, input) => {\n                  if (input.checked) {\n                    position = index;\n                  }\n                });\n                return position;\n              });\n              manageLabelledByAttribute(navigator);\n\n              // applies WCAG behavior for the radio buttons\n              if (navigator && config.wcagBehavior) {\n                navigator.on('focus', cursor => {\n                  const $element = cursor.navigable.getElement();\n                  if (!$element.is(':checked')) {\n                    $element.click();\n                  }\n                });\n              }\n            }\n          } else {\n            addNavigator($itemElement, $itemElement);\n          }\n        });\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.keyNavigators.forEach(navigator => navigator.destroy());\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return itemNavigation;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/linearItemNavigation',['jquery', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function ($, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Key navigator strategy applying inside the item.\r\n     * Navigable item content are interaction choices with the special class \"key-navigation-focusable\".\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var linearItemNavigation = {\n      name: 'linearItem',\n      /**\r\n       * Builds the item navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        const config = this.getConfig();\n        const $content = this.getTestRunner().getAreaBroker().getContentArea();\n        const $qtiInteractions = $content.find('.key-navigation-focusable,.qti-interaction')\n        //filter out interaction as it will be managed separately\n        .filter((i, node) => !$(node).parents('.qti-interaction').length);\n        const $qtiChoices = $qtiInteractions.find('.qti-choice');\n        let $lastParent = null;\n        let list = [];\n        const setupListNavigator = () => {\n          const navigator = keyNavigator({\n            elements: list,\n            propagateTab: false\n          });\n          helpers.setupItemsNavigator(navigator, config);\n          this.choicesNavigators.push(navigator);\n        };\n\n        // this strategy manages 2 navigators:\n        // - keyNavigators lists all elements separately, allowing to navigate among them as identified groups\n        // - choicesNavigators lists elements with the same parent, allowing to navigate \"horizontally\" among them\n        this.keyNavigators = [];\n        this.choicesNavigators = [];\n\n        // the item focusable body elements are considered scrollable\n        $content.find('.key-navigation-focusable').addClass('key-navigation-scrollable');\n        $qtiChoices.each((i, el) => {\n          const $itemElement = $(el);\n          const $parent = $itemElement.parent();\n          const choiceNavigator = keyNavigator({\n            elements: navigableDomElement.createFromDoms($itemElement),\n            group: $itemElement,\n            propagateTab: false\n          });\n          helpers.setupClickableNavigator(choiceNavigator);\n          if ($lastParent && !$parent.is($lastParent)) {\n            setupListNavigator();\n            list = [];\n          }\n          this.keyNavigators.push(choiceNavigator);\n          list.push(choiceNavigator);\n          $lastParent = $parent;\n        });\n        if (list.length) {\n          setupListNavigator();\n          list = [];\n        }\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.keyNavigators.forEach(navigator => navigator.destroy());\n        this.choicesNavigators.forEach(navigator => navigator.destroy());\n        this.choicesNavigators = [];\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return linearItemNavigation;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/stimulusNavigation',['jquery', 'i18n', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function ($, __, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n    * The identifier the keyNavigator group\r\n    * @type {String}\r\n    */\n    const groupId = 'stimulus-element-navigation-group';\n\n    /**\r\n     * Key navigator strategy applying on stimulus items with scrollbar.\r\n     * Navigable item content are body elements with the special class \"stimulus-container\".\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var stimulusNavigation = {\n      name: 'stimulus',\n      /**\r\n       * Builds the item navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        const config = this.getConfig();\n        const $content = this.getTestRunner().getAreaBroker().getContentArea();\n        this.keyNavigators = [];\n\n        // decorate isEnabled navigableDomElement method to check for dom node height\n        const isEnabledDecorator = element => {\n          const originalIsEnabled = element.isEnabled;\n          element.isEnabled = function isEnabled() {\n            if (originalIsEnabled.call(this)) {\n              const node = this.getElement().get(0);\n              return node.scrollHeight > node.clientHeight;\n            }\n            return false;\n          };\n          return element;\n        };\n        $content.find('.stimulus-container').addClass('key-navigation-scrollable').each((i, el) => {\n          const $element = $(el);\n          const elements = navigableDomElement.createFromDoms($element).map(isEnabledDecorator);\n\n          // assign aria attributes\n          $element.attr('aria-label', __('Passage'));\n          const navigator = keyNavigator({\n            id: `${groupId}-${i}`,\n            elements,\n            group: $element,\n            propagateTab: false\n          });\n          helpers.setupItemsNavigator(navigator, config);\n          this.keyNavigators.push(navigator);\n        });\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.keyNavigators.forEach(navigator => navigator.destroy());\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return stimulusNavigation;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/jumpLinks',['jquery', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers'], function ($, keyNavigator, navigableDomElement, helpers) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The identifier the keyNavigator group\r\n     * @type {String}\r\n     */\n    const groupId = 'jump-links';\n\n    /**\r\n     * Key navigator strategy applying onto the top toolbar' bar.\r\n     * @type {Object} keyNavigationStrategy\r\n     */\n    var jumpLinks = {\n      name: 'jump-links',\n      /**\r\n       * Builds the top toolbar navigation strategy.\r\n       *\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      init() {\n        const config = this.getConfig();\n        const $jumpLinksBox = $('.content-wrap');\n        const $links = $jumpLinksBox.find('.jump-link');\n        this.keyNavigators = [];\n        const registerTopToolbarNavigator = (id, group, $elements) => {\n          const elements = navigableDomElement.createFromDoms($elements);\n          if (elements.length) {\n            const navigator = keyNavigator({\n              id,\n              group,\n              elements,\n              propagateTab: false\n            });\n            helpers.setupItemsNavigator(navigator, config);\n            helpers.setupClickableNavigator(navigator);\n            this.keyNavigators.push(navigator);\n          }\n        };\n        $links.each((index, element) => registerTopToolbarNavigator(`${groupId}-${index}`, $jumpLinksBox, $(element)));\n        return this;\n      },\n      /**\r\n       * Gets the list of applied navigators\r\n       * @returns {keyNavigator[]}\r\n       */\n      getNavigators() {\n        return this.keyNavigators;\n      },\n      /**\r\n       * Tears down the keyNavigator strategy\r\n       * @returns {keyNavigationStrategy}\r\n       */\n      destroy() {\n        this.keyNavigators.forEach(navigator => navigator.destroy());\n        this.keyNavigators = [];\n        return this;\n      }\n    };\n\n    return jumpLinks;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/index',['exports', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/headerNavigation', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/toolbarNavigation', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/topToolbarNavigation', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/navigatorNavigation', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/pageNavigation', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/rubricsNavigation', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/itemNavigation', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/linearItemNavigation', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/stimulusNavigation', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/jumpLinks'], function (exports, headerNavigation, toolbarNavigation, topToolbarNavigation, navigatorNavigation, pageNavigation, rubricsNavigation, itemNavigation, linearItemNavigation, stimulusNavigation, jumpLinks) { 'use strict';\n\n\theaderNavigation = headerNavigation && Object.prototype.hasOwnProperty.call(headerNavigation, 'default') ? headerNavigation['default'] : headerNavigation;\n\ttoolbarNavigation = toolbarNavigation && Object.prototype.hasOwnProperty.call(toolbarNavigation, 'default') ? toolbarNavigation['default'] : toolbarNavigation;\n\ttopToolbarNavigation = topToolbarNavigation && Object.prototype.hasOwnProperty.call(topToolbarNavigation, 'default') ? topToolbarNavigation['default'] : topToolbarNavigation;\n\tnavigatorNavigation = navigatorNavigation && Object.prototype.hasOwnProperty.call(navigatorNavigation, 'default') ? navigatorNavigation['default'] : navigatorNavigation;\n\tpageNavigation = pageNavigation && Object.prototype.hasOwnProperty.call(pageNavigation, 'default') ? pageNavigation['default'] : pageNavigation;\n\trubricsNavigation = rubricsNavigation && Object.prototype.hasOwnProperty.call(rubricsNavigation, 'default') ? rubricsNavigation['default'] : rubricsNavigation;\n\titemNavigation = itemNavigation && Object.prototype.hasOwnProperty.call(itemNavigation, 'default') ? itemNavigation['default'] : itemNavigation;\n\tlinearItemNavigation = linearItemNavigation && Object.prototype.hasOwnProperty.call(linearItemNavigation, 'default') ? linearItemNavigation['default'] : linearItemNavigation;\n\tstimulusNavigation = stimulusNavigation && Object.prototype.hasOwnProperty.call(stimulusNavigation, 'default') ? stimulusNavigation['default'] : stimulusNavigation;\n\tjumpLinks = jumpLinks && Object.prototype.hasOwnProperty.call(jumpLinks, 'default') ? jumpLinks['default'] : jumpLinks;\n\n\n\n\texports.headerNavigationStrategy = headerNavigation;\n\texports.toolbarNavigationStrategy = toolbarNavigation;\n\texports.topToolbarNavigationStrategy = topToolbarNavigation;\n\texports.navigatorNavigationStrategy = navigatorNavigation;\n\texports.pageNavigationStrategy = pageNavigation;\n\texports.rubricsNavigationStrategy = rubricsNavigation;\n\texports.itemNavigationStrategy = itemNavigation;\n\texports.linearItemNavigationStrategy = linearItemNavigation;\n\texports.stimulusNavigationStrategy = stimulusNavigation;\n\texports.jumpLinksNavigationStrategy = jumpLinks;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategiesManager',['core/providerRegistry', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategies/index'], function (providerRegistry, strategies) { 'use strict';\n\n    providerRegistry = providerRegistry && Object.prototype.hasOwnProperty.call(providerRegistry, 'default') ? providerRegistry['default'] : providerRegistry;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Defines the strategies API\r\n     * @typedef {Object} keyNavigationStrategy\r\n     * @property {Function} init\r\n     * @property {Function} destroy\r\n     * @property {Function} getNavigators\r\n     * @property {Function} getName\r\n     * @property {Function} getConfig\r\n     * @property {Function} getTestRunner\r\n     */\n\n    /**\r\n     * Defines the config structure for the navigation strategies\r\n     * @typedef {Object} keyNavigationStrategyConfig\r\n     * @property {Boolean} autoFocus - auto select the main action when available in a group\r\n     * @property {Boolean} wcagBehavior - apply WCAG recommended behavior for radio buttons and similar elements\r\n     * @property {Boolean} keepState - for strategies able to keep the state, allow to keep the position of the focused\r\n     * element when moving away from the group and restore it when the group retrieves the focus\r\n     * @property {Boolean} propagateTab - propagate the Tab key to the upper level\r\n     * @property {Boolean} flatNavigation - flatten the navigation between groups, allowing to forward the focus to the\r\n     * following group when a group boundary is reached. If disabled, the only way to move between groups is to use the\r\n     * related key combination\r\n     * @property {String} keyNextItem - the keyboard shortcut to move to the next item (inside the scope)\r\n     * @property {String} keyPrevItem - the keyboard shortcut to move to the previous item (inside the scope)\r\n     * @property {String} keyNextGroup - the keyboard shortcut to move to the next group (outside the scope)\r\n     * @property {String} keyPrevGroup - the keyboard shortcut to move to the previous group (outside the scope)\r\n     * @property {String} keyNextTab - the keyboard shortcut to move to the next tab of the bar\r\n     * @property {String} keyPrevTab - the keyboard shortcut to move to the previous tab of the bar\r\n     * @property {String} keyNextContent - the keyboard shortcut to move to the next content element\r\n     * @property {String} keyPrevContent - the keyboard shortcut to move to the previous content element\r\n     */\n\n    /**\r\n     * Builds a key navigator strategies manager.\r\n     *\r\n     * @param {String} name - the name of the strategy to build\r\n     * @param {testRunner} testRunner - the test runner instance to control\r\n     * @param {keyNavigationStrategyConfig} config - the config to apply\r\n     * @returns {keyNavigationStrategy}\r\n     */\n    function strategyFactory(name, testRunner, config) {\n      const strategy = strategyFactory.getProvider(name);\n\n      /**\r\n       * @type {Object} keyNavigationStrategy\r\n       */\n      return {\n        /**\r\n         * Setup the keyNavigator strategy\r\n         * @returns {keyNavigationStrategy}\r\n         */\n        init() {\n          strategy.init.call(this);\n          return this;\n        },\n        /**\r\n         * Gets the name of the applied strategy\r\n         * @returns {String}\r\n         */\n        getName() {\n          return name;\n        },\n        /**\r\n         * Gets the config of the strategy\r\n         * @returns {keyNavigationStrategyConfig}\r\n         */\n        getConfig() {\n          return config;\n        },\n        /**\r\n         * Gets the test runner\r\n         * @returns {testRunner}\r\n         */\n        getTestRunner() {\n          return testRunner;\n        },\n        /**\r\n         * Gets the list of applied navigators\r\n         * @returns {keyNavigator[]}\r\n         */\n        getNavigators() {\n          if ('function' === typeof strategy.getNavigators) {\n            return strategy.getNavigators.call(this);\n          }\n          return [];\n        },\n        /**\r\n         * Tears down the keyNavigator strategy\r\n         * @returns {keyNavigationStrategy}\r\n         */\n        destroy() {\n          if ('function' === typeof strategy.destroy) {\n            strategy.destroy.call(this);\n          }\n          return this;\n        }\n      };\n    }\n\n    // bootstrap the manager and register the strategies\n    providerRegistry(strategyFactory);\n    Object.values(strategies).forEach(strategy => strategyFactory.registerProvider(strategy.name, strategy));\n\n    return strategyFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers',['exports', 'jquery', 'lodash', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/strategiesManager'], function (exports, $, _, strategyFactory) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    strategyFactory = strategyFactory && Object.prototype.hasOwnProperty.call(strategyFactory, 'default') ? strategyFactory['default'] : strategyFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2020 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * When either an element or its parents have this class - navigation from it would be disabled.\r\n     *\r\n     * @type {String}\r\n     */\n    const ignoredClass = 'no-key-navigation';\n\n    /**\r\n     * Checks whether element is navigable from\r\n     *\r\n     * @param {HTMLElement|keyNavigator} from\r\n     * @returns {boolean}\r\n     */\n    function allowedToNavigateFrom(from) {\n      let element = from;\n      if (element && 'function' === typeof element.getCursor) {\n        const {\n          navigable\n        } = element.getCursor();\n        element = navigable;\n      }\n      if (element && 'function' === typeof element.getElement) {\n        element = element.getElement();\n      }\n      const $element = $(element);\n      if ($element.hasClass(ignoredClass) || $element.parents(`.${ignoredClass}`).length > 0) {\n        return false;\n      }\n      return true;\n    }\n\n    /**\r\n     * Applies an items' navigation scheme on a keyNavigator.\r\n     * @param {keyNavigator} navigator\r\n     * @param {keyNavigationStrategyConfig} config - the config to apply\r\n     * @returns {keyNavigator}\r\n     */\n    function setupItemsNavigator(navigator, config) {\n      return navigator.on(config.keyNextItem, function navigateToNextItem(elem) {\n        if (allowedToNavigateFrom(elem)) {\n          this.next();\n        }\n      }).on(config.keyPrevItem, function navigateToPrevItem(elem) {\n        if (allowedToNavigateFrom(elem)) {\n          this.previous();\n        }\n      });\n    }\n\n    /**\r\n     * Applies an items' navigation scheme on a keyNavigator.\r\n     * @param {keyNavigator} navigator\r\n     * @returns {keyNavigator}\r\n     */\n    function setupClickableNavigator(navigator) {\n      return navigator.on('activate', function activateItem(cursor) {\n        const $elt = cursor.navigable.getElement();\n\n        // jQuery <= 1.9.0\n        // the checkbox values are set after the click event if triggered with jQuery\n        if ($elt.is(':checkbox')) {\n          $elt.each(function () {\n            this.click();\n          });\n        } else {\n          $elt.click().mousedown();\n        }\n      });\n    }\n\n    /**\r\n     * Build the strategies related to a key navigation mode\r\n     * @param {keyNavigationMode} navigationMode\r\n     * @param {testRunner} testRunner\r\n     * @returns {keyNavigationStrategy[]}\r\n     */\n    function getStrategies(navigationMode, testRunner) {\n      return navigationMode.strategies.map(area => strategyFactory(area, testRunner, navigationMode.config).init());\n    }\n\n    /**\r\n     * Gets the key navigators from the provided strategies\r\n     * @param {keyNavigationStrategy[]} strategies\r\n     * @returns {keyNavigator[]}\r\n     */\n    function getNavigators(strategies) {\n      return _.flatten(strategies.map(strategy => strategy.getNavigators()));\n    }\n\n    exports.allowedToNavigateFrom = allowedToNavigateFrom;\n    exports.getNavigators = getNavigators;\n    exports.getStrategies = getStrategies;\n    exports.setupClickableNavigator = setupClickableNavigator;\n    exports.setupItemsNavigator = setupItemsNavigator;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modes/defaultMode',[],function () { 'use strict';\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Default key navigation mode\r\n     */\n    var defaultMode = {\n      name: 'default',\n      /**\r\n       * Builds the key navigation config for the \"default\" mode\r\n       * @param {keyNavigationStrategyConfig} config - additional config to set\r\n       * @returns {keyNavigationMode}\r\n       */\n      init() {\n        let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          strategies: ['rubrics', 'stimulus', 'item', 'toolbar', 'header', 'top-toolbar', 'navigator', 'page'],\n          config: Object.assign({\n            autoFocus: true,\n            wcagBehavior: false,\n            keepState: true,\n            propagateTab: false,\n            flatNavigation: false,\n            keyNextGroup: 'tab',\n            keyPrevGroup: 'shift+tab',\n            keyNextItem: 'right down',\n            keyPrevItem: 'left up',\n            keyNextTab: 'right',\n            keyPrevTab: 'left',\n            keyNextContent: 'down',\n            keyPrevContent: 'up'\n          }, config)\n        };\n      }\n    };\n\n    return defaultMode;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modes/linearMode',[],function () { 'use strict';\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Linear key navigation mode\r\n     */\n    var linearMode = {\n      name: 'linear',\n      /**\r\n       * Builds the key navigation config for the \"linear\" mode\r\n       * @param {keyNavigationStrategyConfig} config - additional config to set\r\n       * @returns {keyNavigationMode}\r\n       */\n      init() {\n        let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          strategies: ['rubrics', 'stimulus', 'linearItem', 'toolbar', 'header', 'top-toolbar', 'navigator', 'page'],\n          config: Object.assign({\n            autoFocus: true,\n            wcagBehavior: false,\n            keepState: true,\n            propagateTab: false,\n            flatNavigation: false,\n            keyNextGroup: 'tab',\n            keyPrevGroup: 'shift+tab',\n            keyNextItem: 'right down',\n            keyPrevItem: 'left up',\n            keyNextTab: 'right',\n            keyPrevTab: 'left',\n            keyNextContent: 'down',\n            keyPrevContent: 'up'\n          }, config)\n        };\n      }\n    };\n\n    return linearMode;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modes/nativeMode',[],function () { 'use strict';\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Native key navigation mode\r\n     */\n    var nativeMode = {\n      name: 'native',\n      /**\r\n       * Builds the key navigation config for the \"native\" mode\r\n       * @param {keyNavigationStrategyConfig} config - additional config to set\r\n       * @returns {keyNavigationMode}\r\n       */\n      init() {\n        let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return {\n          // todo: add access to the page and the rubric blocks\n          strategies: ['jump-links', 'header', 'top-toolbar', 'navigator', 'page', 'rubrics', 'stimulus', 'item', 'toolbar'],\n          config: Object.assign({\n            autoFocus: false,\n            wcagBehavior: false,\n            keepState: false,\n            propagateTab: true,\n            flatNavigation: true,\n            keyNextGroup: 'tab',\n            keyPrevGroup: 'shift+tab',\n            keyNextItem: 'right down',\n            keyPrevItem: 'left up',\n            keyNextTab: '',\n            keyPrevTab: '',\n            keyNextContent: '',\n            keyPrevContent: ''\n          }, config)\n        };\n      }\n    };\n\n    return nativeMode;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modes/index',['exports', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modes/defaultMode', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modes/linearMode', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modes/nativeMode'], function (exports, defaultMode, linearMode, nativeMode) { 'use strict';\n\n\tdefaultMode = defaultMode && Object.prototype.hasOwnProperty.call(defaultMode, 'default') ? defaultMode['default'] : defaultMode;\n\tlinearMode = linearMode && Object.prototype.hasOwnProperty.call(linearMode, 'default') ? linearMode['default'] : linearMode;\n\tnativeMode = nativeMode && Object.prototype.hasOwnProperty.call(nativeMode, 'default') ? nativeMode['default'] : nativeMode;\n\n\n\n\texports.defaultModeProvider = defaultMode;\n\texports.linearModeProvider = linearMode;\n\texports.nativeModeProvider = nativeMode;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modesManager',['core/providerRegistry', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modes/index'], function (providerRegistry, modes) { 'use strict';\n\n    providerRegistry = providerRegistry && Object.prototype.hasOwnProperty.call(providerRegistry, 'default') ? providerRegistry['default'] : providerRegistry;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Defines the mode config\r\n     * @typedef {Object} keyNavigationMode\r\n     * @property {String[]} strategies\r\n     * @property {keyNavigationStrategyConfig} config\r\n     */\n\n    /**\r\n     * Builds a key navigator modes manager.\r\n     *\r\n     * @param {String} mode - the name of the mode to get\r\n     * @param {keyNavigationStrategyConfig} config - additional config to set\r\n     * @returns {keyNavigationMode}\r\n     */\n    function modeFactory(mode) {\n      let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const instance = modeFactory.getProvider(mode);\n      return instance.init(config);\n    }\n\n    // bootstrap the manager and register the strategies\n    providerRegistry(modeFactory);\n    Object.values(modes).forEach(mode => modeFactory.registerProvider(mode.name, mode));\n\n    return modeFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/keyNavigation',['ui/keyNavigation/navigator', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/helpers', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/modesManager', 'util/shortcut'], function (keyNavigator, helpers, modeFactory, shortcut) { 'use strict';\n\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    modeFactory = modeFactory && Object.prototype.hasOwnProperty.call(modeFactory, 'default') ? modeFactory['default'] : modeFactory;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2020 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The event namespace used to register removable listeners\r\n     * @type {String}\r\n     */\n    const eventNS = '.keyNavigation';\n\n    /**\r\n     * Builds a key navigator that can apply onto a test runner\r\n     * @param {testRunner} testRunner - the test runner instance to control\r\n     * @param {Object} config - the config to apply\r\n     * @param {String} config.contentNavigatorType - the keyboard navigation mode\r\n     * @returns {testRunnerKeyNavigator}\r\n     */\n    function keyNavigationFactory(testRunner) {\n      let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let {\n        contentNavigatorType\n      } = config;\n      let groupNavigator = null;\n      let strategies = [];\n\n      /**\r\n       * @typedef {Object} testRunnerKeyNavigator\r\n       */\n      return {\n        /**\r\n         * Setup the keyNavigator\r\n         * @returns {testRunnerKeyNavigator}\r\n         */\n        init() {\n          const navigationMode = modeFactory(contentNavigatorType, config);\n          const navigationConfig = navigationMode.config;\n          strategies = helpers.getStrategies(navigationMode, testRunner);\n          const navigators = helpers.getNavigators(strategies);\n\n          //blur current focused element, to reinitialize keyboard navigation\n          if (document.activeElement) {\n            document.activeElement.blur();\n          }\n          groupNavigator = keyNavigator({\n            id: 'test-runner',\n            loop: true,\n            elements: navigators,\n            propagateTab: navigationConfig.propagateTab\n          });\n          helpers.setupItemsNavigator(groupNavigator, {\n            keyNextItem: navigationConfig.keyNextGroup,\n            keyPrevItem: navigationConfig.keyPrevGroup\n          });\n          shortcut.remove(eventNS).add(`tab${eventNS} shift+tab${eventNS}`, function (e) {\n            if (!helpers.allowedToNavigateFrom(e.target)) {\n              return false;\n            }\n            if (!groupNavigator.isFocused()) {\n              groupNavigator.focus();\n            }\n          });\n          return this;\n        },\n        /**\r\n         * Gets the attached testRunner\r\n         * @returns {testRunner}\r\n         */\n        getTestRunner() {\n          return testRunner;\n        },\n        /**\r\n         * Switches the navigation mode\r\n         * @param {String} newMode\r\n         * @returns {testRunnerKeyNavigator}\r\n         */\n        setMode(newMode) {\n          contentNavigatorType = newMode;\n          return this;\n        },\n        /**\r\n         * Gets the active navigation mode\r\n         * @returns {String}\r\n         */\n        getMode() {\n          return contentNavigatorType;\n        },\n        /**\r\n         * Returns keyNavigation active state\r\n         * @returns {Boolean}\r\n         */\n        isActive() {\n          return groupNavigator !== null;\n        },\n        /**\r\n         * Tears down the keyNavigator\r\n         * @returns {testRunnerKeyNavigator}\r\n         */\n        destroy() {\n          shortcut.remove(eventNS);\n          strategies.forEach(strategy => strategy.destroy());\n          if (groupNavigator) {\n            groupNavigator.destroy();\n          }\n          groupNavigator = null;\n          strategies = [];\n          return this;\n        }\n      };\n    }\n\n    return keyNavigationFactory;\n\n});\n\n","\ndefine('css!taoQtiTest/runner/plugins/content/accessibility/css/key-navigation',[],function(){});\n","define('taoQtiTest/runner/plugins/content/accessibility/keyNavigation/plugin',['lodash', 'taoQtiTest/runner/plugins/content/accessibility/keyNavigation/keyNavigation', 'taoTests/runner/plugin', 'css!taoQtiTest/runner/plugins/content/accessibility/css/key-navigation.css'], function (_, keyNavigatorFactory, pluginFactory, keyNavigation_css) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    keyNavigatorFactory = keyNavigatorFactory && Object.prototype.hasOwnProperty.call(keyNavigatorFactory, 'default') ? keyNavigatorFactory['default'] : keyNavigatorFactory;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2020 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * If we have now config from backend side - we set this default dataset\r\n     *\r\n     * @typedef {object}\r\n     * @properties {string} contentNavigatorType - ('default' | 'linear') - type of content navigation\r\n     */\n    const defaultPluginConfig = {\n      contentNavigatorType: 'default'\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var plugin = pluginFactory({\n      name: 'keyNavigation',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        const pluginConfig = _.defaults(this.getConfig(), defaultPluginConfig);\n        const keyNavigator = keyNavigatorFactory(testRunner, pluginConfig);\n\n        /**\r\n         *  Update plugin state based on changes\r\n         */\n        testRunner.after('renderitem', () => {\n          // make sure that keyNavigator is destroyed\n          // to preevent multiple instances to be active at the same time\n          if (keyNavigator.isActive()) {\n            keyNavigator.destroy();\n          }\n          keyNavigator.init();\n        }).on('unloaditem', () => {\n          keyNavigator.destroy();\n        })\n\n        /**\r\n         * @param {string} type - type of content tab navigation,\r\n         * can be: 'default', 'linear', 'native'\r\n         */.on('setcontenttabtype', type => {\n          keyNavigator.setMode(type);\n          pluginConfig.contentNavigatorType = type;\n        });\n      }\n    });\n\n    return plugin;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/accessibility/mainLandmark/header',['jquery', 'i18n', 'taoTests/runner/plugin', 'handlebars', 'lib/handlebars/helpers'], function ($$1, __, pluginFactory, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers);  \n\n\n      return \"<span data-control=\\\"qti-test-item-title\\\"></span>\\r\\n<span data-control=\\\"qti-test-item-state\\\"></span>\\r\\n\";\n      });\n    function headerTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;\r\n     */\n    function getState(item) {\n      let state = __('Unseen');\n      if (item.flagged) {\n        state = __('Flagged');\n      } else if (item.answered) {\n        state = __('Answered');\n      } else if (item.viewed) {\n        state = __('Viewed');\n      }\n      return state;\n    }\n    var header = pluginFactory({\n      name: 'mainLandmark',\n      init() {\n        const testRunner = this.getTestRunner();\n        const updateTitle = item => {\n          this.$title.text(`${item.label}`).show();\n        };\n        const updateState = item => {\n          this.$state.text(`${getState(item)}`).show();\n        };\n        testRunner.after('renderitem', () => {\n          const item = testRunner.getCurrentItem();\n          updateTitle(item);\n          updateState(item);\n        }).on('tool-flagitem', () => {\n          let item = testRunner.getCurrentItem();\n          item = Object.assign({}, item, {\n            flagged: !item.flagged\n          });\n          updateState(item);\n        });\n      },\n      render() {\n        const $container = this.getAreaBroker().getArea('mainLandmark');\n        this.$element = $$1(headerTpl());\n        $container.append(this.$element);\n        this.$title = $container.find(`[data-control=\"qti-test-item-title\"]`);\n        this.$state = $container.find(`[data-control=\"qti-test-item-state\"]`);\n      }\n    });\n\n    return header;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/dialog/dialog',['jquery', 'lodash', 'taoTests/runner/plugin', 'ui/dialog/alert', 'ui/dialog/confirm', 'util/shortcut/registry', 'util/shortcut', 'util/namespace'], function ($, _, pluginFactory, dialogAlert, dialogConfirm, shortcutRegistry, globalShortcut, namespaceHelper) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    dialogAlert = dialogAlert && Object.prototype.hasOwnProperty.call(dialogAlert, 'default') ? dialogAlert['default'] : dialogAlert;\n    dialogConfirm = dialogConfirm && Object.prototype.hasOwnProperty.call(dialogConfirm, 'default') ? dialogConfirm['default'] : dialogConfirm;\n    shortcutRegistry = shortcutRegistry && Object.prototype.hasOwnProperty.call(shortcutRegistry, 'default') ? shortcutRegistry['default'] : shortcutRegistry;\n    globalShortcut = globalShortcut && Object.prototype.hasOwnProperty.call(globalShortcut, 'default') ? globalShortcut['default'] : globalShortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\n    var pluginName = 'dialog';\n\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\n    var actionPrefix = `tool-${pluginName}-`;\n\n    /**\r\n     * Some default options for the plugin\r\n     * @type {Object}\r\n     */\n    var defaultOptions = {\n      alert: {\n        focus: 'ok'\n      },\n      confirm: {\n        focus: 'ok'\n      }\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var dialog = pluginFactory({\n      name: pluginName,\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var testRunner = this.getTestRunner();\n        var testOptions = testRunner.getOptions();\n        var pluginConfig = Object.assign({}, defaultOptions, this.getConfig());\n        var pluginShortcuts = (testOptions.shortcuts || {})[pluginName] || {};\n        var alerts = [];\n        var confirms = [];\n        var opened = [];\n        var dialogShortcut = shortcutRegistry($('body'), {\n          propagate: false,\n          prevent: true\n        });\n\n        /**\r\n         * Closes a dialog with accept\r\n         * @param {dialog} dialog - The instance of the dialog\r\n         */\n        function closeAccept(dialog) {\n          // TODO: improve the dialog implementation in order to provide a better API\n          dialog.trigger('okbtn.modal').hide();\n        }\n\n        /**\r\n         * Closes a dialog with rejection\r\n         * @param {dialog} dialog - The instance of the dialog\r\n         */\n        function closeReject(dialog) {\n          dialog.hide();\n        }\n\n        /**\r\n         * Closes the last opened dialog\r\n         * @param {Boolean} accept Whether the dialog should be accepted or not\r\n         * @param {String} [shortcut] The shortcut that caused the action\r\n         */\n        function closeLast(accept, shortcut) {\n          var handle = opened.length && opened[opened.length - 1];\n          if (handle) {\n            handle.shortcut = shortcut;\n            if (accept) {\n              closeAccept(handle.dialog);\n            } else {\n              closeReject(handle.dialog);\n            }\n          }\n        }\n\n        /**\r\n         * Add dialog on top of the provided stack\r\n         * @param {String} namespace - The event namespace that scope the dialog\r\n         * @param {Array} stack - The dialogs stack on which push the new instance\r\n         * @param {Function} dialog - The constructor of the dialog\r\n         * @param {String} message - The message to display\r\n         * @param {Function} accept - The callback for accept\r\n         * @param {Function} reject - The callback for reject\r\n         * @param {Object} options - Dialog options\r\n         */\n        function addHandle(namespace, stack, dialog, message, accept, reject, options) {\n          var handle = {\n            context: namespace,\n            dialog: dialog(message, doAccept, doReject, options)\n          };\n          function doAccept(e, reason) {\n            if (_.isFunction(accept)) {\n              accept(handle.shortcut || reason);\n            }\n          }\n          function doReject(e, reason) {\n            if (_.isFunction(reject)) {\n              reject(handle.shortcut || reason);\n            }\n          }\n\n          // prevents all registered shortcuts to be triggered\n          // and brings back the dialog shortcuts\n          globalShortcut.disable();\n          dialogShortcut.enable();\n          stack.push(handle);\n          opened.push(handle);\n          handle.dialog.focus(options.focus);\n          handle.dialog.on('closed.modal', function () {\n            removeHandle(stack, handle.dialog);\n            removeHandle(opened, handle.dialog);\n\n            // if all dialogs have been closed allows all registered shortcuts to be triggered\n            // also disables the dialog shortcuts\n            if (!opened.length) {\n              globalShortcut.enable();\n              dialogShortcut.disable();\n            }\n          });\n        }\n\n        /**\r\n         * Remove a dialog from the provided stack\r\n         * @param {Array} stack - The dialogs stack from which remove the dialog instance\r\n         * @param {dialog} dialog - The instance of the dialog\r\n         */\n        function removeHandle(stack, dialog) {\n          if (dialog) {\n            _.remove(stack, function (handle) {\n              if (handle && dialog === handle.dialog) {\n                return true;\n              }\n            });\n          }\n        }\n\n        /**\r\n         * Closes all dialogs within the provided stack\r\n         * @param {String} namespace - The event namespace that scope the dialogs to close\r\n         * @param {Boolean} accept - Whether (`true`) or not (`false`) to close the dialogs with accept\r\n         * @param {Array} stack - The dialogs stack in which close the dialogs\r\n         */\n        function closeDialogs(namespace, accept, stack) {\n          if (stack) {\n            _.forEach(stack, function (handle) {\n              if (handle && (namespace === '@' || namespace === handle.context)) {\n                if (accept) {\n                  closeAccept(handle.dialog);\n                } else {\n                  closeReject(handle.dialog);\n                }\n              }\n            });\n          } else {\n            closeDialogs(namespace, accept, alerts);\n            closeDialogs(namespace, accept, confirms);\n          }\n        }\n\n        // starts with shortcuts disabled, prevents the TAB key to be used to move outside the dialog box\n        dialogShortcut.disable().set('Tab Shift+Tab');\n\n        // handle the plugin's shortcuts\n        if (testOptions.allowShortcuts) {\n          _.forEach(pluginShortcuts, function (command, key) {\n            dialogShortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function (e, shortcut) {\n              // just fire the action using the event loop\n              testRunner.trigger(actionPrefix + key, shortcut);\n            });\n          });\n        }\n\n        //change plugin state\n        testRunner.before('alert.*', function (e, msg, accept, options) {\n          addHandle(e.namespace, alerts, dialogAlert, msg, accept, accept, _.merge({}, pluginConfig.alert, options));\n        }).before('confirm.*', function (e, msg, accept, reject, options) {\n          addHandle(e.namespace, confirms, dialogConfirm, msg, accept, reject, _.merge({}, pluginConfig.confirm, options));\n        }).before('closedialog.*', function (e, accept) {\n          closeDialogs(e.namespace, accept);\n        }).on(`${actionPrefix}accept`, function (shortcut) {\n          closeLast(true, shortcut);\n        }).on(`${actionPrefix}reject`, function (shortcut) {\n          closeLast(false, shortcut);\n        }).on('destroy', function () {\n          closeDialogs('.@');\n          dialogShortcut.clear();\n          dialogShortcut = null;\n        });\n      }\n    });\n\n    return dialog;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/dialog/exitMessages',['lodash', 'taoTests/runner/plugin'], function (_, pluginFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Creates the testState plugin.\r\n     * Displays exit message, then leaves the runner once the user has acknowledged\r\n     */\n    var exitMessages = pluginFactory({\n      name: 'exitMessages',\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        // this function is mandatory\n      },\n      /**\r\n       * Installs the plugin (called when the runner bind the plugin)\r\n       */\n      install: function install() {\n        var testRunner = this.getTestRunner();\n\n        // intercepts the `leave` event,\n        // then if a message needs to be displayed displays it and waits the user acknowledges it\n        testRunner.before('leave', function leave(e, data) {\n          const dataIsObject = _.isObject(data);\n          if (dataIsObject && data.skipExitMessage) {\n            return;\n          }\n          if (dataIsObject && data.message) {\n            return new Promise(function (resolve) {\n              var context = testRunner.getTestContext();\n\n              // the leave can occurs when the runner is in inconsistent state (i.e. error)\n              // prevent side error with item disabling\n              if (context && context.itemIdentifier) {\n                testRunner.disableItem(context.itemIdentifier);\n              }\n              // wait for the message acknowledge before leaving the runner\n              testRunner.trigger('disablefeedbackalerts').trigger('alert.leave', data.message, function () {\n                testRunner.trigger('enablefeedbackalerts');\n                resolve();\n              });\n            });\n          }\n        });\n      }\n    });\n\n    return exitMessages;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',['jquery', 'ui/hider', 'taoTests/runner/plugin'], function ($, hider, pluginFactory) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019  (original work) Open Assessment Technologies SA;\r\n     *\r\n     * @author Alexander Zagovorichev <zagovorichev@1pt.com>\r\n     */\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var itemAlertMessage = pluginFactory({\n      name: 'itemAlertMessage',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var self = this;\n        this.$element = $(this.getContent().dom);\n        this.$element\n        // for GUI actions\n        .on('closed.modal', function () {\n          $(this).modal('destroy');\n        }).on('destroyed.modal', function () {\n          self.$element = null;\n          self.trigger('resume', self);\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var testRunner = this.getTestRunner();\n        var itemRunner = testRunner.itemRunner;\n        var $modalsContainer = this.getContent().$container;\n        if (!$modalsContainer) {\n          $modalsContainer = $('#modalFeedbacks', itemRunner._item.container);\n        }\n        $modalsContainer.append(this.$element);\n        this.$element.modal({\n          startClosed: false,\n          top: 200\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        if (this.$element && this.$element.length) {\n          this.$element.modal('close');\n        }\n      }\n    });\n\n    return itemAlertMessage;\n\n});\n\n","define('taoQtiTest/runner/helpers/navigation',['lodash', 'taoQtiTest/runner/helpers/map'], function (_, mapHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * @typedef {Object} navigationHelper\r\n     */\n    var navigationHelper = {\n      /**\r\n       * Check whether the test taker is leaving a section\r\n       *\r\n       * @param {Object} testContext - the actual test context\r\n       * @param {String} testContext.itemIdentifier - the id of the current item\r\n       * @param {String} testContext.sectionId - the id of the current section\r\n       * @param {Object} testMap - the actual test map\r\n       * @param {String} direction - the move direction (next, previous or jump)\r\n       * @param {String} scope - the move scope (item, section, testPart)\r\n       * @param {Number} [position] - the position in case of jump\r\n       * @returns {Boolean} true if the action leads to a section leave\r\n       * @throws {TypeError} if the context or the map are incorrect\r\n       */\n      isLeavingSection: function isLeavingSection(testContext, testMap, direction, scope, position) {\n        var section;\n        var sectionStats;\n        var nbItems;\n        var item;\n        if (_.isPlainObject(testContext) && _.isPlainObject(testMap) && !_.isEmpty(testContext.sectionId) && !_.isEmpty(testContext.itemIdentifier)) {\n          section = mapHelper.getSection(testMap, testContext.sectionId);\n          sectionStats = mapHelper.getSectionStats(testMap, testContext.sectionId);\n          nbItems = sectionStats && sectionStats.total;\n          item = mapHelper.getItem(testMap, testContext.itemIdentifier);\n          return scope === 'section' || scope === 'testPart' || direction === 'next' && item.positionInSection + 1 === nbItems || direction === 'previous' && item.positionInSection === 0 || direction === 'jump' && position > 0 && (position < section.position || position >= section.position + nbItems);\n        }\n        throw new TypeError('Invalid test context and test map');\n      },\n      /**\r\n       * Check whether the test taker is leaving a test part\r\n       *\r\n       * @param {Object} testContext - the actual test context\r\n       * @param {String} testContext.itemIdentifier - the id of the current item\r\n       * @param {String} testContext.sectionId - the id of the current section\r\n       * @param {String} testContext.testPartId - the id of the current testPart\r\n       * @param {Object} testMap - the actual test map\r\n       * @param {String} direction - the move direction (next, previous or jump)\r\n       * @param {String} scope - the move scope (item, section, testPart)\r\n       * @param {Number} [position] - the position in case of jump\r\n       * @returns {Boolean} true if the action leads to a section leave\r\n       * @throws {TypeError} if the context or the map are incorrect\r\n       */\n      isLeavingTestPart: function isLeavingTestPart(testContext, testMap, direction, scope, position) {\n        var testPart;\n        var testPartStats;\n        var nbItems;\n        var item;\n        var section;\n        var sectionStats;\n        if (_.isPlainObject(testContext) && _.isPlainObject(testMap) && !_.isEmpty(testContext.testPartId) && !_.isEmpty(testContext.sectionId) && !_.isEmpty(testContext.itemIdentifier)) {\n          testPart = mapHelper.getPart(testMap, testContext.testPartId);\n          testPartStats = mapHelper.getPartStats(testMap, testContext.testPartId);\n          nbItems = testPartStats && testPartStats.total;\n          item = mapHelper.getItem(testMap, testContext.itemIdentifier);\n          if (scope === 'section') {\n            section = mapHelper.getSection(testMap, testContext.sectionId);\n            sectionStats = mapHelper.getSectionStats(testMap, testContext.sectionId);\n          }\n          return scope === 'testPart' || direction === 'next' && scope === 'item' && item.positionInPart + 1 === nbItems || direction === 'next' && scope === 'section' && section.position + sectionStats.total >= nbItems || direction === 'previous' && scope === 'item' && item.positionInPart === 0 || direction === 'previous' && scope === 'section' && section.position === testPart.position || direction === 'jump' && position > 0 && (position < testPart.position || position >= testPart.position + nbItems);\n        }\n        throw new TypeError('Invalid test context and test map');\n      },\n      /**\r\n       * Check if the given  item is the last of the test\r\n       * @param {Object} testMap - the test map\r\n       * @param {String} itemIdentifier - the identifier of the item\r\n       * @returns {Boolean} true if the item is the last one\r\n       */\n      isLast: function isLast(testMap, itemIdentifier) {\n        return this.isLastOf(testMap, itemIdentifier, 'test');\n      },\n      /**\r\n       * Check if the given  item is the first of a test\r\n       * @param {Object} testMap - the test map\r\n       * @param {String} itemIdentifier - the identifier of the item\r\n       * @returns {Boolean} true if the item is the first one\r\n       */\n      isFirst: function isFirst(testMap, itemIdentifier) {\n        return this.isFirstOf(testMap, itemIdentifier, 'test');\n      },\n      /**\r\n       * Check if the given  item is the last of a the given scope\r\n       * @param {Object} testMap - the test map\r\n       * @param {String} itemIdentifier - the identifier of the item\r\n       * @param {String} [scope = 'test'] - the target scope\r\n       * @returns {Boolean} true if the item is the last one\r\n       */\n      isLastOf: function isLastOf(testMap, itemIdentifier, scope) {\n        var item;\n        var stats;\n        if (!_.isPlainObject(testMap)) {\n          throw new TypeError('Invalid test map');\n        }\n        if (_.isEmpty(itemIdentifier)) {\n          throw new TypeError('Invalid item identifier');\n        }\n        scope = scope || 'test';\n        item = mapHelper.getItem(testMap, itemIdentifier);\n        stats = mapHelper.getScopeStats(testMap, item.position, scope);\n        if (stats && _.isNumber(stats.total)) {\n          if (scope === 'test') {\n            return item.position + 1 === stats.total;\n          }\n          if (scope === 'section' || scope === 'assessmentSection' || scope === 'testSection') {\n            return item.positionInSection + 1 === stats.total;\n          }\n          if (scope === 'part' || scope === 'testPart') {\n            return item.positionInPart + 1 === stats.total;\n          }\n        }\n        return false;\n      },\n      /**\r\n       * Check if the given  item is the first of a the given scope\r\n       * @param {Object} testMap - the test map\r\n       * @param {String} itemIdentifier - the identifier of the item\r\n       * @param {String} [scope = 'test'] - the target scope\r\n       * @returns {Boolean} true if the item is the first one\r\n       */\n      isFirstOf: function isFirstOf(testMap, itemIdentifier, scope) {\n        var item;\n        if (!_.isPlainObject(testMap)) {\n          throw new TypeError('Invalid test map');\n        }\n        if (_.isEmpty(itemIdentifier)) {\n          throw new TypeError('Invalid item identifier');\n        }\n        scope = scope || 'test';\n        item = mapHelper.getItem(testMap, itemIdentifier);\n        if (scope === 'test') {\n          return item.position === 0;\n        }\n        if (scope === 'section' || scope === 'assessmentSection' || scope === 'testSection') {\n          return item.positionInSection === 0;\n        }\n        if (scope === 'part' || scope === 'testPart') {\n          return item.positionInPart === 0;\n        }\n        return false;\n      },\n      /**\r\n       * Gets the map descriptors of the sibling items\r\n       * @param {Object} testMap\r\n       * @param {Number|String} itemPosition - (could be also the item id)\r\n       * @param {String} [direction='both'] - previous/next/both\r\n       * @param {Number} [size=3] - will be 2xsize if direction is both\r\n       * @returns {Object[]} the collections of items\r\n       */\n      getSiblingItems: function getSiblingItems(testMap, itemPosition, direction, size) {\n        var itemId = mapHelper.getItemIdentifier(testMap, itemPosition);\n        var previous = null;\n        var siblings = [];\n        var directions;\n        var itemChain = _.reduce(testMap && testMap.jumps, function (map, jump) {\n          var ref = jump.identifier;\n          if (previous) {\n            map[previous].next = ref;\n          }\n          map[ref] = {\n            identifier: ref,\n            previous: previous,\n            next: null\n          };\n          previous = ref;\n          return map;\n        }, {});\n        size = _.isFinite(size) ? parseInt(size, 10) : 3;\n        if (!direction || direction === 'both') {\n          directions = ['previous', 'next'];\n        } else {\n          directions = [direction];\n        }\n        _.forEach(directions, function walkDirection(link) {\n          var id = itemId;\n          _.times(size, function getNeighbor() {\n            id = itemChain[id] && itemChain[id][link];\n            if (id) {\n              siblings.push(mapHelper.getItem(testMap, id));\n            } else {\n              return false;\n            }\n          });\n        });\n        return siblings;\n      },\n      /**\r\n       * Gets the map descriptor of the next item\r\n       * @param {Object} testMap\r\n       * @param {Number|String} itemPosition - (could be also the item id)\r\n       * @returns {Object}\r\n       */\n      getNextItem: function getNextItem(testMap, itemPosition) {\n        var siblings = navigationHelper.getSiblingItems(testMap, itemPosition, 'next', 1);\n        if (siblings.length) {\n          return siblings[0];\n        }\n        return null;\n      },\n      /**\r\n       * Gets the map descriptor of the previous item\r\n       * @param {Object} testMap\r\n       * @param {Number|String} itemPosition - (could be also the item id)\r\n       * @returns {Object}\r\n       */\n      getPreviousItem: function getPreviousItem(testMap, itemPosition) {\n        var siblings = navigationHelper.getSiblingItems(testMap, itemPosition, 'previous', 1);\n        if (siblings.length) {\n          return siblings[0];\n        }\n        return null;\n      },\n      /**\r\n       * Checks if an action will move forward.\r\n       * @param {String} action - the name of the action that will be performed\r\n       * @param {Object} [params] - some optional parameters that apply to the action\r\n       * @returns {Boolean}\r\n       */\n      isMovingToNextItem: function isMovingToNextItem(action, params) {\n        params = params || {};\n        return action === 'timeout' || action === 'skip' || action === 'move' && params.direction === 'next' && params.scope === 'item';\n      },\n      /**\r\n       * Checks if an action will move backward.\r\n       * @param {String} action - the name of the action that will be performed\r\n       * @param {Object} [params] - some optional parameters that apply to the action\r\n       * @returns {Boolean}\r\n       */\n      isMovingToPreviousItem: function isMovingToPreviousItem(action, params) {\n        params = params || {};\n        return action === 'move' && params.direction === 'previous' && params.scope === 'item';\n      },\n      /**\r\n       * Checks if an action will jump on another item.\r\n       * @param {String} action - the name of the action that will be performed\r\n       * @param {Object} [params] - some optional parameters that apply to the action\r\n       * @returns {Boolean}\r\n       */\n      isJumpingToItem: function isJumpingToItem(action, params) {\n        params = params || {};\n        return action === 'move' && params.direction === 'jump' && params.scope === 'item';\n      }\n    };\n\n    return navigationHelper;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',['jquery', 'i18n', 'ui/hider', 'taoTests/runner/plugin', 'handlebars', 'lib/handlebars/helpers', 'taoQtiTest/runner/helpers/navigation'], function ($$1, __, hider, pluginFactory, Handlebars, Helpers0, navigationHelper) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n    navigationHelper = navigationHelper && Object.prototype.hasOwnProperty.call(navigationHelper, 'default') ? navigationHelper['default'] : navigationHelper;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \" \";\n      if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \"\", stack1;\n      buffer += \"\\r\\n        aria-\"\n        + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n        + \"=\\\"\"\n        + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))\n        + \"\\\"\\r\\n    \";\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"icon icon-\";\n      if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"></span>\";\n      return buffer;\n      }\n    function program6(depth0,data) {\n      \n      \n      return \" no-label\";\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"text\\\">\";\n      if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\";\n      return buffer;\n      }\n\n      buffer += \"<li\\r\\n    data-control=\\\"\";\n      if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    class=\\\"small btn-info action\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"\\r\\n    title=\\\"\";\n      if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    role=\\\"button\\\"\\r\\n    \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.aria), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n>\\r\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\" onclick=\\\"return false\\\" aria-hidden=\\\"true\\\" >\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n    </a>\\r\\n</li>\\r\\n\";\n      return buffer;\n      });\n    function buttonTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\r\n     *\r\n     * @author Alexander Zagovorichev <zagovorichev@1pt.com>\r\n     */\n\n    /**\r\n     * The display of the next button\r\n     */\n    var buttonData = {\n      next: {\n        control: 'move-forward',\n        title: __('Submit and go to the next item'),\n        icon: 'forward',\n        text: __('OK')\n      },\n      end: {\n        control: 'move-end',\n        title: __('Submit and go to the end of the test'),\n        icon: 'fast-forward',\n        text: __('OK & End test')\n      }\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var itemInlineMessage = pluginFactory({\n      name: 'itemInlineMessage',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var self = this;\n        var testRunner = this.getTestRunner();\n\n        /**\r\n         * Create the button based on the current context\r\n         * @returns {*|jQuery|HTMLElement} the button\r\n         */\n        var createOkButton = function createElement() {\n          const testContext = testRunner.getTestContext();\n          const testMap = testRunner.getTestMap();\n          const dataType = navigationHelper.isLast(testMap, testContext.itemIdentifier) ? 'end' : 'next';\n          const $btn = $$1(buttonTpl(buttonData[dataType]));\n          $btn.addClass('modalFeedback-button');\n\n          //plugin behavior\n          $btn.on('click', function (e) {\n            e.preventDefault();\n            self.disable();\n            if ($$1(this).data('control') === 'move-end') {\n              self.trigger('end');\n            }\n            $btn.remove();\n            self.$element.remove();\n            self.trigger('resume', self);\n          });\n          return $btn;\n        };\n        this.$button = createOkButton();\n        this.$element = $$1(this.getContent().dom);\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var $navigationContainer = this.getAreaBroker().getNavigationArea();\n        var testRunner = this.getTestRunner();\n        var itemRunner = testRunner.itemRunner;\n        var $inlineContainer = this.getContent().$container;\n        if (!$inlineContainer && itemRunner._item.container) {\n          $inlineContainer = $$1('.qti-itemBody', itemRunner._item.container);\n        }\n        $inlineContainer.append(this.$element);\n\n        // hide all navigation buttons, create new instead of\n        if (!$$1('.modalFeedback-button', $navigationContainer).length) {\n          $navigationContainer.append(this.$button);\n        }\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.$button.removeProp('disabled').removeClass('disabled');\n      },\n      disable: function disable() {\n        this.$button.prop('disabled', true).addClass('disabled');\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        this.$button.click();\n      }\n    });\n\n    return itemInlineMessage;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/feedback/feedback',['i18n', 'taoTests/runner/plugin', 'ui/feedback'], function (__, pluginFactory, feedback$1) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    feedback$1 = feedback$1 && Object.prototype.hasOwnProperty.call(feedback$1, 'default') ? feedback$1['default'] : feedback$1;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var feedback = pluginFactory({\n      name: 'feedback',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var self = this;\n\n        //keep a ref of the feedbacks\n        var currentFeedback;\n        var testRunner = this.getTestRunner();\n\n        /**\r\n         * Close the current feedback\r\n         */\n        var closeCurrent = function closeCurrent() {\n          if (currentFeedback) {\n            currentFeedback.close();\n          }\n        };\n        this.setState('enabled', true);\n\n        //change plugin state\n        testRunner.on('error', function (err) {\n          var message = err;\n          var type = 'error';\n          if (self.getState('enabled')) {\n            if ('object' === typeof err) {\n              message = err.message;\n              type = err.type;\n            }\n            if (!message) {\n              switch (type) {\n                case 'TestState':\n                  message = __('The test has been closed/suspended!');\n                  break;\n                case 'FileNotFound':\n                  message = __('File not found!');\n                  break;\n                default:\n                  message = __('An error occurred!');\n              }\n            }\n            currentFeedback = feedback$1().error(message);\n          }\n        }).on('danger', function (message) {\n          if (self.getState('enabled')) {\n            currentFeedback = feedback$1().danger(message);\n          }\n        }).on('warning', function (message) {\n          if (self.getState('enabled')) {\n            currentFeedback = feedback$1().warning(message);\n          }\n        }).on('info', function (message) {\n          if (self.getState('enabled')) {\n            currentFeedback = feedback$1().info(message);\n          }\n        }).on('alert.* confirm.* unloaditem', closeCurrent).on('disablefeedbackalerts', function () {\n          closeCurrent();\n          self.setState('enabled', false);\n        }).on('enablefeedbackalerts', function () {\n          self.setState('enabled', true);\n        });\n      }\n    });\n\n    return feedback;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/itemScrolling/itemScrolling',['jquery', 'util/typeCaster', 'taoTests/runner/plugin'], function ($, typeCaster, pluginFactory) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    typeCaster = typeCaster && Object.prototype.hasOwnProperty.call(typeCaster, 'default') ? typeCaster['default'] : typeCaster;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA;\r\n     */\n\n    /**\r\n     * Creates the loading bar plugin.\r\n     * Displays a loading bar when a blocking task is running\r\n     */\n    var itemScrolling = pluginFactory({\n      name: 'itemScrolling',\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        const testRunner = this.getTestRunner();\n        const $contentArea = testRunner.getAreaBroker().getContentArea();\n        const gridRowBottomMargin = 12,\n          qtiItemPadding = 30 * 2;\n        testRunner.on('renderitem', function () {\n          adaptItemHeight();\n          $(window).off('resize.adaptItemHeight');\n          $(window).on('resize.adaptItemHeight', adaptItemHeight);\n        });\n        function adaptItemHeight() {\n          const $itemContainer = $contentArea.find('[data-scrolling=\"true\"]');\n          const contentHeight = getItemRunnerHeight() - getExtraGridRowHeight() - getSpaceAboveQtiContent() - gridRowBottomMargin - qtiItemPadding;\n          $itemContainer.each(function () {\n            const $item = $(this);\n            const isScrollable = typeCaster.strToBool($item.attr('data-scrolling') || 'false');\n            const selectedHeight = parseFloat($item.attr('data-scrolling-height')) || 100;\n            const containerParent = $item.parent().closest('[data-scrolling=\"true\"]');\n            if ($item.length && isScrollable) {\n              $item.data('scrollable', true);\n              $item.css({\n                'overflow-y': 'scroll'\n              });\n              if (containerParent.length > 0) {\n                $item.css('max-height', `${containerParent.height() * (selectedHeight * 0.01)}px`);\n              } else {\n                $item.css('max-height', `${contentHeight * (selectedHeight * 0.01)}px`);\n              }\n            }\n          });\n        }\n\n        // depending on the context (item preview, new/old test runner...) available height is computed differently\n        function getItemRunnerHeight() {\n          var $testRunnerSections = $('.test-runner-sections');\n\n          // exists only in the new test runner\n          if ($testRunnerSections.length) {\n            return $testRunnerSections.get(0).getBoundingClientRect().height;\n          }\n          // otherwise, we assume that we are in an iframe with all space available (= item preview, old test runner)\n          return $(window).height();\n        }\n\n        // extra grid row are there in case of a vertical layout (item on top/bottom of the question)\n        function getExtraGridRowHeight() {\n          var $gridRows = $('.qti-itemBody > .grid-row'),\n            extraHeight = 0;\n          $gridRows.each(function () {\n            var $gridRow = $(this),\n              $itemContainer = $gridRow.find('[data-scrolling=\"true\"]');\n            if (!$itemContainer.length) {\n              extraHeight += $gridRow.outerHeight(true);\n            }\n          });\n          return extraHeight;\n        }\n\n        // most of the time this will be rubrick's block height in the new test runner\n        function getSpaceAboveQtiContent() {\n          var $testRunnerSections = $('.test-runner-sections'),\n            $qtiContent = $('#qti-content');\n          if ($testRunnerSections.length && $qtiContent.length) {\n            return $qtiContent.get(0).getBoundingClientRect().top - $testRunnerSections.get(0).getBoundingClientRect().top;\n          }\n          return 0;\n        }\n      }\n    });\n\n    return itemScrolling;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/loading/loading',['layout/loading-bar', 'taoTests/runner/plugin'], function (loadingBar, pluginFactory) { 'use strict';\n\n    loadingBar = loadingBar && Object.prototype.hasOwnProperty.call(loadingBar, 'default') ? loadingBar['default'] : loadingBar;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Creates the loading bar plugin.\r\n     * Displays a loading bar when a blocking task is running\r\n     */\n    var loading = pluginFactory({\n      name: 'loading',\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var testRunner = this.getTestRunner();\n        testRunner.on('unloaditem', function () {\n          loadingBar.start();\n        }).on('renderitem', function () {\n          loadingBar.stop();\n        });\n      }\n    });\n\n    return loading;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/modalFeedback/modalFeedback',['jquery', 'lodash', 'module', 'taoTests/runner/plugin', 'taoQtiTest/runner/plugins/content/dialog/itemInlineMessage', 'taoQtiTest/runner/plugins/content/dialog/itemAlertMessage', 'ui/autoscroll'], function ($, _, module, pluginFactory, inlineMessage, alertMessage, autoscroll) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    module = module && Object.prototype.hasOwnProperty.call(module, 'default') ? module['default'] : module;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    inlineMessage = inlineMessage && Object.prototype.hasOwnProperty.call(inlineMessage, 'default') ? inlineMessage['default'] : inlineMessage;\n    alertMessage = alertMessage && Object.prototype.hasOwnProperty.call(alertMessage, 'default') ? alertMessage['default'] : alertMessage;\n    autoscroll = autoscroll && Object.prototype.hasOwnProperty.call(autoscroll, 'default') ? autoscroll['default'] : autoscroll;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\r\n     *\r\n     * @author Alexander Zagovorichev <zagovorichev@1pt.com>\r\n     */\n\n    /**\r\n     * Modal or inline type of the messages\r\n     */\n    var inlineMode;\n\n    /**\r\n     * Form of the feedback\r\n     * by default dialog (modal) form\r\n     */\n    var messagePlugin;\n\n    /**\r\n     * All feedback messages\r\n     */\n    var renderedFeedbacks;\n\n    /**\r\n     * modalFeedback was resolved and all components were destroyed\r\n     */\n    var isDestroyed;\n\n    /**\r\n     * Method which should be halted after modalFeedbacks confirmation action\r\n     */\n    var nextStep;\n    function destroyFeedback(feedback) {\n      var removed = false;\n      _.remove(renderedFeedbacks, function (storedFeedback) {\n        var found = storedFeedback === feedback;\n        if (found) {\n          removed = true;\n        }\n        return found;\n      });\n      if (removed) {\n        feedback.destroy();\n        if (!renderedFeedbacks.length) {\n          nextStep();\n        }\n      }\n    }\n    function defineMode(inline) {\n      inlineMode = inline;\n      messagePlugin = inlineMode ? inlineMessage : alertMessage;\n    }\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var modalFeedback = pluginFactory({\n      name: 'QtiModalFeedback',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        nextStep = function () {};\n        defineMode(!!module.config().inlineModalFeedback);\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var self = this;\n        var testRunner = this.getTestRunner();\n        var createMessages = function createMessages(renderingQueue, inline) {\n          var bInlineMode = inlineMode;\n          isDestroyed = false;\n          renderedFeedbacks = [];\n          if (_.isBoolean(inline)) {\n            defineMode(inline);\n          }\n          if (renderingQueue.length) {\n            _.forEach(renderingQueue, function (renderingToken) {\n              var feedback = messagePlugin(testRunner, testRunner.getAreaBroker());\n              feedback.init({\n                dom: renderingToken.feedback.render({\n                  inline: inlineMode\n                }),\n                // for alerts will be used #modalMessages container\n                $container: inlineMode ? renderingToken.$container : null\n              });\n              feedback.render();\n              renderedFeedbacks.push(feedback);\n            });\n\n            // auto scroll to the first feedback, only for the \"inline\" mode\n            if (inlineMode && renderedFeedbacks) {\n              autoscroll($('.qti-modalFeedback', testRunner.getAreaBroker().getContentArea()).first(), testRunner.getAreaBroker().getContentArea().parents('.content-wrapper'));\n            }\n          } else {\n            nextStep();\n          }\n\n          // restore global feedback mode\n          defineMode(bInlineMode);\n        };\n        if (inlineMode) {\n          testRunner.off('plugin-resume.itemInlineMessage').on('plugin-resume.itemInlineMessage', function () {\n            self.destroy();\n          });\n        } else {\n          testRunner.off('plugin-resume.itemAlertMessage').on('plugin-resume.itemAlertMessage', function (feedback) {\n            destroyFeedback(feedback);\n          });\n        }\n        testRunner.on('modalFeedbacks', function (renderingQueue, done, inline) {\n          nextStep = done;\n          createMessages(renderingQueue, inline);\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       * allow to run that function only once\r\n       */\n      destroy: function destroy() {\n        var tFeedbacks, i;\n        if (!isDestroyed) {\n          isDestroyed = true;\n          if (!renderedFeedbacks) {\n            nextStep();\n          } else {\n            tFeedbacks = renderedFeedbacks.slice(0);\n            for (i in tFeedbacks) {\n              destroyFeedback(tFeedbacks[i]);\n            }\n          }\n        }\n      }\n    });\n\n    return modalFeedback;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/overlay/overlay',['jquery', 'taoTests/runner/plugin'], function ($, pluginFactory) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var overlay = pluginFactory({\n      name: 'overlay',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var self = this;\n        var testRunner = this.getTestRunner();\n        this.$element = $('<div />');\n        this.$element.on('click mousedown mouseup touchstart touchend keyup keydow keypress scroll drop', function (e) {\n          e.stopImmediatePropagation();\n          e.stopPropagation();\n        });\n        const shield = function shield() {\n          self.enable();\n        };\n        const unshield = function unshield() {\n          self.disable();\n        };\n\n        //change plugin state\n        testRunner.on('disableitem', shield).on('enableitem unloaditem modalFeedbacks', unshield);\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var $contentArea = this.getTestRunner().getAreaBroker().getContentArea();\n        $contentArea.after(this.$element);\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        this.$element.remove();\n      },\n      /**\r\n       * Enable the overlay\r\n       */\n      enable() {\n        const overlayConfig = this.getConfig();\n        this.$element.addClass('overlay');\n        if (overlayConfig.full) {\n          this.$element.addClass('overlay-full');\n        }\n      },\n      /**\r\n       * Disable the overlay\r\n       */\n      disable: function disable() {\n        this.$element.removeClass('overlay overlay-full');\n      },\n      /**\r\n       * Show the overlay\r\n       */\n      show: function show() {\n        this.enable();\n      },\n      /**\r\n       * Hide the overlay\r\n       */\n      hide: function hide() {\n        this.disable();\n      }\n    });\n\n    return overlay;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/responsiveness/collapser',['lodash', 'jquery', 'taoTests/runner/plugin'], function (_, $, pluginFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Event namespace\r\n     * @type {String}\r\n     */\n    var ns = '.collapser';\n\n    /**\r\n     * Name of the CSS class used to collapse the buttons\r\n     * @type {String}\r\n     */\n    var noLabelCls = 'tool-label-collapsed';\n\n    /**\r\n     * Name of the CSS class used to collapse the buttons and allow to expand on mouse over\r\n     * @type {String}\r\n     */\n    var noLabelHoverCls = 'tool-label-collapsed-hover';\n\n    /**\r\n     * Name of the  CSS class used to hide the label of the button independently of responsiveness\r\n     * @type {string}\r\n     */\n    var labelHiddenCls = 'no-tool-label';\n\n    /**\r\n     * Name of the  CSS class for separators\r\n     * @type {string}\r\n     */\n    var separatorCls = 'separator';\n\n    /**\r\n     * Default plugin options\r\n     * @type {Object}\r\n     */\n    var defaults = {\n      collapseTools: true,\n      // collapse the tools buttons\n      collapseNavigation: false,\n      // collapse the navigation buttons\n      collapseInOrder: false,\n      // collapse any button in the given order\n      hover: false,\n      // expand when the mouse is over a button,\n\n      /**\r\n       * Allow to set manually which buttons should collapse and in which order.\r\n       * This can be set by triggering the \"collapser-set-order\" event on the testRunner.\r\n       * Given as an array of jQuery selectors: first index will be the first to be collapsed, and so on.\r\n       * If no selector is given for a button, then this one will never collapse.\r\n       * ex:\r\n       * var collapseOrder = [\r\n       *      '[data-control=\"highlight-clear\"],[data-control=\"highlight-trigger\"]',  // those will collapse first...\r\n       *      '[data-control=\"hide-review\"]',                                         // this one second...\r\n       *      '[data-control=\"set-item-flag\"]',                                       // third...\r\n       *      ...                                                                     // ...\r\n       * ];\r\n       * @type {String[]}\r\n       */\n      collapseOrder: []\n    };\n    var $window = $(window);\n\n    /**\r\n     * Creates the responsiveness collapser plugin.\r\n     * Reduce the size of the action bar tools when the available space is below the needed one.\r\n     */\n    var collapser = pluginFactory({\n      name: 'collapser',\n      /**\r\n       * Installs the plugin (called when the runner bind the plugin)\r\n       */\n      init: function init() {\n        const testRunner = this.getTestRunner();\n        const config = Object.assign({}, defaults, this.getConfig());\n        const collapseCls = config.hover ? noLabelHoverCls : noLabelCls;\n        var areaBroker = testRunner.getAreaBroker();\n        var $actionsBar = areaBroker.getArea('actionsBar'),\n          $toolbox = areaBroker.getToolboxArea(),\n          $navigation = areaBroker.getNavigationArea();\n        var allCollapsibles, availableWidth, previousAvailableWidth;\n\n        /**\r\n         * Get a reference of all collapsibles\r\n         */\n        function buildCollapsiblesList() {\n          // use the given order to build the collapsibles list or generate on in natural order\n          if (config.collapseInOrder && config.collapseOrder.length) {\n            allCollapsibles = getCollapsiblesFromConfig();\n          }\n          // get values from DOM, grouped by prefix\n          else if (config.collapseInOrder) {\n            allCollapsibles = getSortedCollapsiblesFromDom();\n          }\n          // get all in one chunk\n          else {\n            allCollapsibles = getUnsortedCollapsiblesFromDom();\n          }\n        }\n\n        /**\r\n         * @param {jQuery} $element\r\n         * @returns {number} Size difference, in pixels, between collapsed and expanded state of $element\r\n         */\n        function getExtraWidth($element) {\n          var expandedWidth, collapsedWidth;\n          $element.removeClass(collapseCls);\n          expandedWidth = $element.outerWidth(true);\n          $element.addClass(collapseCls);\n          collapsedWidth = $element.outerWidth(true);\n          $element.removeClass(collapseCls);\n          return expandedWidth - collapsedWidth;\n        }\n\n        /**\r\n         * Expand or collapse elements\r\n         */\n        function toggleCollapsibles() {\n          availableWidth = getAvailableWidth();\n          availableWidth < previousAvailableWidth ? collapseInOrder() : expandInOrder();\n          previousAvailableWidth = availableWidth;\n        }\n        function collapseInOrder() {\n          var collapsiblesCopy = _.clone(allCollapsibles),\n            toCollapse;\n          while (collapseNeeded() && collapsiblesCopy.length) {\n            toCollapse = collapsiblesCopy.shift();\n            toCollapse.$elements.addClass(collapseCls);\n          }\n        }\n        function collapseNeeded() {\n          return getToolbarWidth() > getAvailableWidth();\n        }\n        function expandInOrder() {\n          _.forEachRight(allCollapsibles, function (toExpand) {\n            if (toExpand.$elements.hasClass(collapseCls)) {\n              if (expandPossible(toExpand.extraWidth)) {\n                toExpand.$elements.removeClass(collapseCls);\n              } else {\n                return false;\n              }\n            }\n          });\n        }\n        function expandPossible(extraWidth) {\n          return getToolbarWidth() + extraWidth < getAvailableWidth();\n        }\n        function getAvailableWidth() {\n          // Scrollbars are commonly between ~12px and ~18px in width. Subtracting 20px from the available width\n          // makes sure that scrollbars are always taken in account. The worst case scenario is that the buttons\n          // start to collapse, although they would still have had 20px available.\n          return $actionsBar.width() - 20;\n        }\n        function getToolbarWidth() {\n          return $toolbox.outerWidth(true) + $navigation.outerWidth(true);\n        }\n\n        /**\r\n         * Parse DOM for controls that can be collapsed\r\n         * @returns {*|jQuery|HTMLElement}\r\n         */\n        function getControlsFromDom() {\n          var $controls = $(),\n            selector = '>ul>[data-control]';\n          if (config.collapseTools) {\n            $controls = $controls.add($toolbox.find(selector).not(`.${labelHiddenCls}`).not(`.${separatorCls}`));\n          }\n          if (config.collapseNavigation) {\n            $controls = $controls.add($navigation.find(selector).not(`.${labelHiddenCls}`).not(`.${separatorCls}`));\n          }\n          return $controls;\n        }\n\n        /**\r\n         * Get allCollapsibles based on configuration\r\n         *\r\n         * @returns {Array}\r\n         */\n        function getCollapsiblesFromConfig() {\n          return _.compact(config.collapseOrder.map(function (selector) {\n            // some buttons are collapsed by configuration, some other are only separators: we should leave them alone\n            var $elements = $(selector).not(`.${labelHiddenCls}`).not(`.${separatorCls}`);\n            var extraWidth = 0;\n            if ($elements.length) {\n              $elements.each(function () {\n                extraWidth += getExtraWidth($(this));\n              });\n              return {\n                $elements: $elements,\n                extraWidth: extraWidth\n              };\n            }\n            return false;\n          }));\n        }\n\n        /**\r\n         * Get allCollapsibles based on DOM\r\n         * Build the collapse order from the left to the right, related elements are grouped.\r\n         *\r\n         * @returns {Array}\r\n         */\n        function getSortedCollapsiblesFromDom() {\n          var $controlElements = getControlsFromDom(),\n            _allCollapsibles = [],\n            order = {};\n\n          // group items by prefix\n          // eg. zoomIn and zoomOut -> zoom\n          $controlElements.each(function () {\n            var ctrl = this.dataset.control,\n              // re makes group `foo` from `foo-bar`, `fooBar` and `foo_bar`\n              // if we do not have a prefix use the control name as key to ensure uniqueness\n              key = ctrl.substring(0, ctrl.search(/[A-Z-_]/)) || ctrl;\n            order[key] = order[key] || $();\n            order[key] = order[key].add($(this));\n          });\n\n          // move items to allCollapsibles\n          _.forOwn(order, function ($elements) {\n            var extraWidth = 0;\n            $elements.each(function () {\n              extraWidth += getExtraWidth($(this));\n            });\n            _allCollapsibles.push({\n              $elements: $elements,\n              extraWidth: extraWidth\n            });\n          });\n          return _.compact(_allCollapsibles);\n        }\n\n        /**\r\n         * Get allCollapsibles based on DOM, all buttons will be collapsed at once\r\n         *\r\n         * @returns {Array}\r\n         */\n        function getUnsortedCollapsiblesFromDom() {\n          var $elements = getControlsFromDom(),\n            _allCollapsibles = [],\n            extraWidth = 0;\n          $elements.each(function () {\n            extraWidth += getExtraWidth($(this));\n          });\n          _allCollapsibles.push({\n            $elements: $elements,\n            extraWidth: extraWidth\n          });\n          return _.compact(_allCollapsibles);\n        }\n        $window.on(`resize${ns}`, _.throttle(function () {\n          testRunner.trigger('collapseTools');\n        }, 40));\n        testRunner.after('renderitem loaditem', function () {\n          previousAvailableWidth = Infinity;\n          buildCollapsiblesList();\n          testRunner.trigger('collapseTools');\n        }).on(`collapseTools${ns}`, function () {\n          toggleCollapsibles();\n        });\n      },\n      destroy: function destroy() {\n        $window.off(ns);\n      }\n    });\n\n    return collapser;\n\n});\n\n","define('taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock',['jquery', 'ui/hider', 'taoTests/runner/plugin', 'handlebars', 'lib/handlebars/helpers'], function ($$1, hider, pluginFactory, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    hider = hider && Object.prototype.hasOwnProperty.call(hider, 'default') ? hider['default'] : hider;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers);  \n\n\n      return \"<div id=\\\"qti-rubrics\\\"></div>\\r\\n\";\n      });\n    function containerTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Ensure the <a> links opens to blank pages\r\n     * @param {jQueryElement} $container - lookup scope\r\n     */\n    var blankifyLinks = function blankifyLinks($container) {\n      $$1('a', $container).attr('target', '_blank');\n    };\n\n    /**\r\n     * Apply mathjax\r\n     */\n    var mathify = function mathify($container) {\n      return new Promise(function (resolve) {\n        if ($$1('math', $container).length > 0) {\n          //load mathjax only if necessary\n          require(['mathJax'], function (MathJax) {\n            if (MathJax) {\n              MathJax.Hub.Queue(['Typeset', MathJax.Hub], $container[0]);\n              MathJax.Hub.Queue(resolve);\n            } else {\n              resolve();\n            }\n          }, resolve);\n        } else {\n          resolve();\n        }\n      });\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var rubricBlock = pluginFactory({\n      name: 'rubricBlock',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var self = this;\n        var testRunner = this.getTestRunner();\n        this.$element = $$1(containerTpl());\n        this.hide();\n\n        //change plugin state\n        testRunner.on('ready', function () {\n          self.hide();\n        }).on('loaditem', function () {\n          var context = testRunner.getTestContext();\n          if (context.rubrics) {\n            self.$element.html(context.rubrics);\n            blankifyLinks(self.$element);\n            mathify(self.$element).then(function () {\n              // notify that the rubric blocks are loaded\n              testRunner.trigger('rubricblock');\n            });\n          }\n        }).on('renderitem', function () {\n          self.show();\n        }).on('unloaditem', function () {\n          self.hide();\n          self.$element.empty();\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        //attach the element before the content area\n        var $container = this.getAreaBroker().getContentArea();\n        $container.before(this.$element);\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        this.$element.remove();\n      },\n      /**\r\n       * Enable the container\r\n       */\n      enable: function enable() {\n        this.$element.removeProp('disabled').removeClass('disabled');\n      },\n      /**\r\n       * Disable the container\r\n       */\n      disable: function disable() {\n        this.$element.prop('disabled', true).addClass('disabled');\n      },\n      /**\r\n       * Show the container\r\n       */\n      show: function show() {\n        hider.show(this.$element);\n      },\n      /**\r\n       * Hide the container\r\n       */\n      hide: function hide() {\n        hider.hide(this.$element);\n      }\n    });\n\n    return rubricBlock;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/connectivity/connectivity',['jquery', 'lodash', 'i18n', 'core/polling', 'ui/waitingDialog/waitingDialog', 'taoTests/runner/plugin', 'handlebars', 'lib/handlebars/helpers', 'util/namespace'], function ($$1, _, __, pollingFactory, waitingDialog, pluginFactory, Handlebars, Helpers0, namespaceHelper) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pollingFactory = pollingFactory && Object.prototype.hasOwnProperty.call(pollingFactory, 'default') ? pollingFactory['default'] : pollingFactory;\n    waitingDialog = waitingDialog && Object.prototype.hasOwnProperty.call(waitingDialog, 'default') ? waitingDialog['default'] : waitingDialog;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\n    function program1(depth0,data) {\n      \n      \n      return \" with-message\";\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \"\", helper, options;\n      buffer += \"<span class=\\\"message-connect\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Online\", options) : helperMissing.call(depth0, \"__\", \"Online\", options)))\n        + \"</span>\";\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \"\", helper, options;\n      buffer += \"<span class=\\\"message-disconnected\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Offline\", options) : helperMissing.call(depth0, \"__\", \"Offline\", options)))\n        + \"</span>\";\n      return buffer;\n      }\n\n      buffer += \"<div class=\\\"connectivity-box \";\n      if (helper = helpers.state) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.state); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.message), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\">\\r\\n    \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.message), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"<span data-control=\\\"connectivity-connected\\\" class=\\\"qti-controls icon-connect\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Connected to server\", options) : helperMissing.call(depth0, \"__\", \"Connected to server\", options)))\n        + \"\\\"></span>\\r\\n    \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.message), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"<span data-control=\\\"connectivity-disconnected\\\" class=\\\"qti-controls icon-disconnect\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Disconnected from server\", options) : helperMissing.call(depth0, \"__\", \"Disconnected from server\", options)))\n        + \"\\\"></span>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function connectivityTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The plugin default configuration\r\n     * @type {Object}\r\n     * @property {Number} checkInterval - when offline, interval to check if we're back online\r\n     * @property {Boolean} indicator - do we display the indicator in the test UI\r\n     * @property {Boolean} message - do we display the message in the test UI\r\n     */\n    var defaultConfig = {\n      checkInterval: 30 * 1000,\n      indicator: true,\n      message: false\n    };\n\n    /**\r\n     * Creates the connectivity plugin.\r\n     * Detects connectivity issues\r\n     */\n    var connectivity = pluginFactory({\n      name: 'connectivity',\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var self = this;\n        var testRunner = this.getTestRunner();\n        var proxy = testRunner.getProxy();\n        var config = Object.assign({}, defaultConfig, this.getConfig());\n\n        //Displays a connectivity indicator\n        if (config && config.indicator) {\n          //create the indicator\n          this.$element = $$1(connectivityTpl({\n            state: proxy.isOnline() ? 'connected' : 'disconnected',\n            message: config.message\n          }));\n          testRunner.on('disconnect', function () {\n            self.$element.removeClass('connected').addClass('disconnected');\n          }).on('reconnect', function () {\n            self.$element.removeClass('disconnected').addClass('connected');\n          });\n        }\n\n        //update the interval, with the new value\n        if (this.polling && _.isNumber(config.checkInterval)) {\n          this.polling.setInterval(config.checkInterval);\n        }\n      },\n      /**\r\n       * Installs the plugin (called when the runner bind the plugin)\r\n       * We do it before init to catch even offline during the init sequence\r\n       */\n      install: function install() {\n        var self = this;\n        var waiting = false;\n        var testRunner = this.getTestRunner();\n        var proxy = testRunner.getProxy();\n\n        /**\r\n         * Display the waiting dialog, while waiting the connection to be back\r\n         * @param {String} [messsage] - additional message for the dialog\r\n         * @returns {Promise} resolves once the wait is over and the user click on 'proceed'\r\n         */\n        this.displayWaitingDialog = function displayWaitingDialog() {\n          let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n          var dialog;\n          return new Promise(function (resolve) {\n            if (!waiting) {\n              waiting = true;\n\n              //if a pause event occurs while waiting,\n              //we also wait the connection to be back\n              testRunner.before('pause.waiting', function () {\n                return new Promise(function (pauseResolve) {\n                  proxy.off('reconnect.pausing').after('reconnect.pausing', pauseResolve);\n                });\n              });\n\n              //creates the waiting modal dialog\n              dialog = waitingDialog({\n                message: __('You are encountering a prolonged connectivity loss. ') + message,\n                waitContent: __('Please wait while we try to restore the connection.'),\n                proceedContent: __('The connection seems to be back, please proceed')\n              }).on('proceed', function () {\n                resolve();\n              }).on('render', function () {\n                proxy.off('reconnect.waiting').after('reconnect.waiting', function () {\n                  testRunner.off('pause.waiting');\n                  waiting = false;\n                  dialog.endWait();\n                });\n              });\n            }\n          });\n        };\n\n        //Last chance to check the connection,\n        //by regular polling on the \"up\" signal\n        this.polling = pollingFactory({\n          action: function action() {\n            testRunner.getProxy().telemetry(testRunner.getTestContext().itemIdentifier, 'up').catch(_.noop);\n          },\n          interval: defaultConfig.checkInterval,\n          autoStart: false\n        });\n\n        //the Proxy is the only one to know something about connectivity\n        proxy.on('disconnect', function disconnect(source) {\n          if (!testRunner.getState('disconnected')) {\n            testRunner.setState('disconnected', true);\n            testRunner.trigger('disconnect', source);\n            self.polling.start();\n          }\n        }).on('reconnect', function reconnect() {\n          if (testRunner.getState('disconnected')) {\n            testRunner.setState('disconnected', false);\n            testRunner.trigger('reconnect');\n            self.polling.stop();\n          }\n        });\n\n        //intercept tries to leave while offline\n        //this could be caused by pauses for example.\n        //If caused by an action like exitTest it will be handled\n        //by navigation errors (see below)\n        testRunner.before('leave', function (e, data) {\n          if (proxy.isOffline()) {\n            self.displayWaitingDialog(data.message).then(function () {\n              testRunner.trigger('leave', data);\n            }).catch(function (generalErr) {\n              testRunner.trigger('error', generalErr);\n            });\n            return false;\n          }\n        });\n\n        //intercept offline navigation errors\n        testRunner.before('error.connectivity', function (e, err) {\n          // detect and prevent connectivity errors\n          if (proxy.isConnectivityError(err)) {\n            return false;\n          }\n          if (proxy.isOffline()) {\n            self.displayWaitingDialog().then(function () {\n              if (err.type === 'nav') {\n                testRunner.loadItem(testRunner.getTestContext().itemIdentifier);\n              }\n              if (err.type === 'finish') {\n                testRunner.finish();\n              }\n              if (err.type === 'pause') {\n                testRunner.trigger('pause', {\n                  reasons: err.data && err.data.reasons,\n                  message: err.data && err.data.comment\n                });\n              }\n            }).catch(function (generalErr) {\n              testRunner.trigger('error', generalErr);\n            });\n            return false;\n          }\n        });\n        testRunner.before('loaditem.connectivity', function (e, itemRef, item) {\n          const testContext = testRunner.getTestContext();\n          const {\n            flags\n          } = item;\n          if (!flags) {\n            return true;\n          }\n          if (flags.hasFeedbacks) {\n            testContext.hasFeedbacks = true;\n          }\n          if ((flags.containsNonPreloadedAssets || flags.hasPci) && proxy.isOffline()) {\n            self.displayWaitingDialog().then(() => {\n              testRunner.loadItem(itemRef);\n            });\n            return false;\n          }\n        });\n        testRunner.before(namespaceHelper.namespaceAll('move skip timeout', 'connectivity'), function (e) {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          var testContext = testRunner.getTestContext();\n          var currentItem = testRunner.getCurrentItem();\n          if (proxy.isOffline() && (currentItem.hasFeedbacks || testContext.hasFeedbacks)) {\n            testRunner.trigger('disableitem');\n            self.displayWaitingDialog().then(function () {\n              testRunner.trigger('enableitem').trigger(e.name, ...args);\n            });\n            return false;\n          }\n        });\n      },\n      destroy() {\n        this.getTestRunner().off('.connectivity');\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var $container = this.getAreaBroker().getControlArea();\n        if (this.$element) {\n          $container.append(this.$element);\n        }\n      }\n    });\n\n    return connectivity;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/connectivity/pauseOnError',['i18n', 'taoTests/runner/plugin', 'handlebars', 'lib/handlebars/helpers'], function (__, pluginFactory, Handlebars, Helpers0) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n      buffer += \"<b>\";\n      if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</b><br><br>\\r\\n\";\n      if (helper = helpers.message) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.message); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      return buffer;\n      });\n    function dialogTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;\r\n     */\n    const name = 'pauseOnError';\n    const dialogMessage = {\n      title: __('Something unexpected happened.'),\n      message: __('Please try reloading the page or pause the test. If you pause, you will be able to resume the test from this page.')\n    };\n    const dialogConfig = {\n      focus: 'cancel',\n      buttons: {\n        labels: {\n          ok: __('Pause the test'),\n          cancel: __('Reload the page')\n        }\n      }\n    };\n    const pauseContext = {\n      reasons: {\n        category: 'technical',\n        subCategory: 'error'\n      },\n      originalMessage: 'Due to an unexpected issue the test has been suspended.'\n    };\n    var pauseOnError = pluginFactory({\n      name,\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        const returnToHome = () => testRunner.trigger('pause', pauseContext);\n        const reloadPage = () => testRunner.trigger('reloadpage');\n        const processError = error => {\n          testRunner.on('reloadpage', () => window.location.reload()).trigger('disablenav disabletools hidenav').trigger(`confirm.${name}`, dialogTpl(dialogMessage), returnToHome, reloadPage, dialogConfig);\n          if (error.code === 500) {\n            error.originalCode = error.code;\n            delete error.code;\n            testRunner.trigger(`disablefeedbackalerts`);\n            testRunner.after('error.pauseOnError', () => {\n              testRunner.off('error.pauseOnError');\n              testRunner.trigger(`enablefeedbackalerts`);\n            });\n          }\n        };\n        testRunner.before('error', (e, error) => processError(error));\n      }\n    });\n\n    return pauseOnError;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/duration/duration',['lodash', 'taoTests/runner/plugin', 'core/logger'], function (_, pluginFactory, loggerFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    loggerFactory = loggerFactory && Object.prototype.hasOwnProperty.call(loggerFactory, 'default') ? loggerFactory['default'] : loggerFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;\r\n     */\n    const logger = loggerFactory('taoQtiTest/runner/plugins/controls/duration/duration');\n\n    /**\r\n     * Creates the timer plugin\r\n     */\n    var duration = pluginFactory({\n      name: 'duration',\n      /**\r\n       * Install step, add behavior before the lifecycle.\r\n       */\n      install() {\n        // define the \"duration\" store as \"volatile\" (removed on browser change).\n        this.getTestRunner().getTestStore().setVolatile(this.getName());\n      },\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       *\r\n       * @returns {Promise}\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        let currentUpdatePromise = Promise.resolve();\n        const getItemAttempt = () => {\n          const context = testRunner.getTestContext();\n          return `${context.itemIdentifier}#${context.attempt}`;\n        };\n        const getPositiveNumber = value => {\n          if (!_.isNumber(value) || value < 0) {\n            return 0;\n          }\n          return value;\n        };\n\n        //where the duration of attempts are stored\n        return testRunner.getPluginStore(this.getName()).then(durationStore => {\n          /**\r\n           * Gets the duration of a particular item from the store\r\n           *\r\n           * @param {String} attemptId - the attempt id to get the duration for\r\n           * @returns {Promise}\r\n           */\n          const getItemDuration = attemptId => {\n            if (!/^(.*)+#+\\d+$/.test(attemptId)) {\n              return Promise.reject(new Error('Is it really an attempt id, like \"itemid#attempt\"'));\n            }\n            return durationStore.getItem(attemptId);\n          };\n\n          /**\r\n           * Updates the duration of a particular item\r\n           *\r\n           * @param {Number} elapsed - time elapsed since previous tick\r\n           * @returns {Promise}\r\n           */\n          const updateDuration = elapsed => {\n            const itemAttemptId = getItemAttempt();\n            currentUpdatePromise = currentUpdatePromise.then(() => getItemDuration(itemAttemptId)).then(duration => durationStore.setItem(itemAttemptId, getPositiveNumber(duration) + getPositiveNumber(elapsed) / 1000)).catch(err => {\n              logger.warn(`Error updating item duration! ${err && err.message}`);\n            });\n            return currentUpdatePromise;\n          };\n\n          /**\r\n           * Adds the current duration to the next action request.\r\n           * The duration will be sent to the server with the next request,\r\n           * usually submitItem() or callItemAction()\r\n           *\r\n           * @returns {Promise}\r\n           */\n          const addDurationToCallActionParams = () => {\n            const itemAttemptId = getItemAttempt();\n            return currentUpdatePromise.then(() => getItemDuration(itemAttemptId)).then(duration => testRunner.getProxy().addCallActionParams({\n              itemDuration: getPositiveNumber(duration)\n            })).catch(err => {\n              logger.warn(`Error retrieving item duration! ${err && err.message}`);\n            });\n          };\n\n          //change plugin state\n          testRunner.on('tick', updateDuration).before('move skip exit timeout pause', addDurationToCallActionParams)\n          /**\r\n           * @event duration.get\r\n           * @param {String} attemptId - the attempt id to get the duration for\r\n           * @param {getDuration} getDuration - a receiver callback\r\n           */.on('plugin-get.duration', (attemptId, getDuration) => {\n            if (_.isFunction(getDuration)) {\n              getDuration(getItemDuration(attemptId));\n            }\n          });\n        });\n      }\n    });\n\n    return duration;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/progressbar/progress',['lodash', 'i18n', 'core/format', 'taoQtiTest/runner/helpers/map'], function (_, __, format, mapHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    format = format && Object.prototype.hasOwnProperty.call(format, 'default') ? format['default'] : format;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * @typedef {Object} progressDetails\r\n     * @property {Number} position - the position in the current element\r\n     * @property {Number} reached - the number of reached elements (at least one item viewed)\r\n     * @property {Number} viewed - the number of viewed elements (all items viewed)\r\n     * @property {Number} completed - the number of completed elements (all questions answered)\r\n     * @property {Number} total - the total number of elements\r\n     */\n\n    /**\r\n     * @typedef {itemStats} progressData\r\n     * @property {Number} position - the position in the scope\r\n     * @property {Number} overallCompleted - the number of completed items in the test\r\n     * @property {Number} overall - the total number of items in the test\r\n     * @property {progressDetails} sections - the details of testSections in the scope\r\n     * @property {progressDetails} parts - the details of testParts in the scope\r\n     * @property {progressDetails} answerableSections - the details of testSections that contain questions in the scope\r\n     * @property {progressDetails} answerableParts - the details of testParts that contain questions in the scope\r\n     * @property {progressDetails} matchedCategories - the details of items that match the expected categories in the scope\r\n     */\n\n    /**\r\n     * @typedef {Object} progressIndicator\r\n     * @property {Number} position - the position in the scope\r\n     * @property {Number} total - the length of the scope\r\n     * @property {Number} ratio - the progress ratio of the indicator\r\n     * @property {String} label - the text to display for the indicator\r\n     */\n\n    /**\r\n     * @typedef {Object} progressConfig\r\n     * @property {String} scope - the scope of the progression\r\n     * @property {String} indicator - the type of progression\r\n     * @property {Bool} showTotal - display 'item x of y' (true) | 'item x'\r\n     * @property {Array} categories - categories to count by them\r\n     */\n\n    /**\r\n     * Default progress config\r\n     * @type {Object}\r\n     */\n    var defaultConfig = {\n      scope: 'test',\n      indicator: 'percentage',\n      showTotal: true,\n      categories: []\n    };\n\n    /**\r\n     * List of labels by types\r\n     * @type {Object}\r\n     */\n    var labels = {\n      item: {\n        long: __('Item %d of %d'),\n        short: __('Item %d')\n      },\n      section: {\n        long: __('Section %d of %d'),\n        short: __('Section %d')\n      }\n    };\n\n    /**\r\n     * Simple map of progress stats computers\r\n     * @type {Object}\r\n     */\n    var scopes = {\n      /**\r\n       * Gets stats for the whole test\r\n       * @param {Object} testMap - the actual test map\r\n       * @param {Object} testContext - the actual test context\r\n       * @param {progressConfig} config - a config object\r\n       * @param {String} config.scope - the scope of the progression\r\n       * @param {Array} config.categories - categories to count by them\r\n       * @returns {progressData}\r\n       */\n      test: function test(testMap, testContext, config) {\n        var stats = getProgressStats(testMap, testContext, config, 'test');\n        var item = mapHelper.getItemAt(testMap, testContext.itemPosition);\n        stats.position = item.position + 1;\n        return stats;\n      },\n      /**\r\n       * Gets stats for the current test part\r\n       * @param {Object} testMap - the actual test map\r\n       * @param {Object} testContext - the actual test context\r\n       * @param {progressConfig} config - a config object\r\n       * @param {String} config.scope - the scope of the progression\r\n       * @param {Array} config.categories - categories to count by them\r\n       * @returns {progressData}\r\n       */\n      testPart: function testPart(testMap, testContext, config) {\n        var stats = getProgressStats(testMap, testContext, config, 'testPart');\n        var item = mapHelper.getItemAt(testMap, testContext.itemPosition);\n        stats.position = item.positionInPart + 1;\n        return stats;\n      },\n      /**\r\n       * Gets stats for the current test section\r\n       * @param {Object} testMap - the actual test map\r\n       * @param {Object} testContext - the actual test context\r\n       * @param {progressConfig} config - a config object\r\n       * @param {String} config.scope - the scope of the progression\r\n       * @param {Array} config.categories - categories to count by them\r\n       * @returns {progressData}\r\n       */\n      testSection: function testSection(testMap, testContext, config) {\n        var stats = getProgressStats(testMap, testContext, config, 'testSection');\n        var item = mapHelper.getItemAt(testMap, testContext.itemPosition);\n        stats.position = item.positionInSection + 1;\n        return stats;\n      }\n    };\n\n    /**\r\n     * Simple map of progress indicator computers\r\n     * @type {Object}\r\n     */\n    var indicators = {\n      /**\r\n       * Indicator that shows the percentage of completed items\r\n       * @param {progressData} stats\r\n       * @returns {progressIndicator}\r\n       */\n      percentage: function percentage(stats) {\n        return getRatioProgression(stats.answered, stats.questions);\n      },\n      /**\r\n       * Indicator that shows the position of current item\r\n       * @param {progressData} stats\r\n       * @param {progressConfig} config\r\n       * @param {String} config.scope - the scope of the progression\r\n       * @param {Array} config.categories - categories to count by them\r\n       * @returns {progressIndicator}\r\n       */\n      position: function position(stats, config) {\n        return getPositionProgression(stats.position, stats.total, 'item', config);\n      },\n      /**\r\n       * Indicator that shows the number of viewed questions\r\n       * @param {progressData} stats\r\n       * @param {progressConfig} config\r\n       * @param {String} config.scope - the scope of the progression\r\n       * @param {Array} config.categories - categories to count by them\r\n       * @returns {progressIndicator}\r\n       */\n      questions: function questions(stats, config) {\n        return getPositionProgression(stats.questionsViewed, stats.questions, 'item', config);\n      },\n      /**\r\n       * Indicator that shows the number of reached answerable sections\r\n       * @param {progressData} stats\r\n       * @param {progressConfig} config\r\n       * @param {String} config.scope - the scope of the progression\r\n       * @param {Array} config.categories - categories to count by them\r\n       * @returns {progressIndicator}\r\n       */\n      sections: function sections(stats, config) {\n        return getPositionProgression(stats.answerableSections.reached, stats.answerableSections.total, 'section', config);\n      },\n      /**\r\n       * Indicator that shows the number of viewed items which have categories from the configuration\r\n       * (show all if categories are not set)\r\n       * @param {progressData} stats\r\n       * @param {progressConfig} config\r\n       * @param {String} config.scope - the scope of the progression\r\n       * @param {Array} config.categories - categories to count by them\r\n       */\n      categories: function categories(stats, config) {\n        return getPositionProgression(stats.matchedCategories.position, stats.matchedCategories.total, 'item', config);\n      }\n    };\n\n    /**\r\n     * Fix the test map if the current test part is linear, as the current item should not be answered.\r\n     * @param {Object} testMap - the actual test map\r\n     * @param {Object} testContext - the actual test context\r\n     * @returns {Object} The fixed test map\r\n     */\n    function getFixedMap(testMap, testContext) {\n      const currentTestPart = mapHelper.getPart(testMap, testContext.testPartId);\n      const currentItem = mapHelper.getItemAt(testMap, testContext.itemPosition);\n      if (currentItem.answered && currentTestPart.isLinear) {\n        const fixedTestMap = _.cloneDeep(testMap);\n        const fixedCurrentItem = mapHelper.getItemAt(fixedTestMap, testContext.itemPosition);\n        fixedCurrentItem.answered = false;\n        return fixedTestMap;\n      }\n      return testMap;\n    }\n\n    /**\r\n     * Gets an empty stats record\r\n     * @returns {progressDetails}\r\n     */\n    function getEmptyStats() {\n      return {\n        position: 0,\n        reached: 0,\n        viewed: 0,\n        completed: 0,\n        total: 0\n      };\n    }\n\n    /**\r\n     * Updates the progress stats from the given element\r\n     * @param {progressDetails} stats - The stats details to update\r\n     * @param {Object} element - The element from which take the details\r\n     * @param {Number} position - The current item position\r\n     */\n    function updateStats(stats, element, position) {\n      if (element.position <= position) {\n        stats.position++;\n      }\n      if (element.stats.viewed) {\n        stats.reached++;\n        if (element.stats.viewed === element.stats.total) {\n          stats.viewed++;\n        }\n      }\n      if (element.stats.answered) {\n        if (element.stats.answered === element.stats.questions) {\n          stats.completed++;\n        }\n      }\n      stats.total++;\n    }\n\n    /**\r\n     * Updates the progress stats from the given element\r\n     * @param {progressDetails} stats - The stats details to update\r\n     * @param {Object} element - The element from which take the details\r\n     * @param {Number} position - The current item position\r\n     */\n    function updateItemStats(stats, element, position) {\n      if (element.position <= position) {\n        stats.position++;\n      }\n      if (element.viewed) {\n        stats.reached++;\n        stats.viewed++;\n      }\n      if (element.answered) {\n        stats.completed++;\n      }\n      stats.total++;\n    }\n\n    /**\r\n     * Convert list of the categories to the hashtable to improve performance\r\n     * @param categories\r\n     * @returns {*}\r\n     */\n    function getCategoriesToMatch(categories) {\n      var matchSize = categories && categories.length;\n      return matchSize && _.reduce(categories, function (map, category) {\n        map[category] = true;\n        return map;\n      }, {});\n    }\n\n    /**\r\n     * Completes the progression stats\r\n     * @param {Object} testMap - the actual test map\r\n     * @param {Object} testContext - the actual test context\r\n     * @param {progressConfig} config\r\n     * @param {String} config.scope - the scope of the progression\r\n     * @param {Array} config.categories - categories to count by them\r\n     * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\r\n     * @returns {progressData}\r\n     */\n    function getProgressStats(testMap, testContext, config, scope) {\n      var fixedMap = getFixedMap(testMap, testContext);\n      var scopedMap = mapHelper.getScopeMap(fixedMap, testContext.itemPosition, scope);\n      var stats = _.clone(scopedMap.stats);\n      var categoriesToMatch;\n      var matchSize;\n      if (config.indicator === 'categories') {\n        categoriesToMatch = getCategoriesToMatch(config.categories);\n        matchSize = config.categories && config.categories.length;\n        stats.matchedCategories = getEmptyStats();\n      }\n      stats.parts = getEmptyStats();\n      stats.sections = getEmptyStats();\n      stats.answerableParts = getEmptyStats();\n      stats.answerableSections = getEmptyStats();\n      _.forEach(scopedMap.parts, function (part) {\n        updateStats(stats.parts, part, testContext.itemPosition);\n        if (part.stats.questions > 0) {\n          updateStats(stats.answerableParts, part, testContext.itemPosition);\n        }\n        _.forEach(part.sections, function (section) {\n          updateStats(stats.sections, section, testContext.itemPosition);\n          if (section.stats.questions > 0) {\n            updateStats(stats.answerableSections, section, testContext.itemPosition);\n          }\n          if (config.indicator === 'categories') {\n            _.forEach(section.items, function (item) {\n              if (matchCategories(item.categories, categoriesToMatch, matchSize)) {\n                updateItemStats(stats.matchedCategories, item, testContext.itemPosition);\n              }\n            });\n          }\n        });\n      });\n      return stats;\n    }\n\n    /**\r\n     *\r\n     * @param {Array} categories - List of categories to check\r\n     * @param {Object} expectedCategories - Hashtable of expected categories\r\n     * @param {Number} minWanted - Minimal number of expected categories that should match\r\n     * @returns {Boolean}\r\n     */\n    function matchCategories(categories, expectedCategories, minWanted) {\n      var matched = 0;\n      if (expectedCategories) {\n        _.forEach(categories, function (category) {\n          if (expectedCategories[category]) {\n            matched++;\n            if (matched >= minWanted) {\n              return false;\n            }\n          }\n        });\n      }\n      return matched === minWanted;\n    }\n\n    /**\r\n     * Gets the progression ratio\r\n     * @param {Number} position\r\n     * @param {Number} total\r\n     * @returns {Number}\r\n     */\n    function getRatio(position, total) {\n      if (position && total > 0) {\n        return Math.floor(position / total * 100);\n      }\n      return 0;\n    }\n\n    /**\r\n     * Gets the label of the progress bar for an item\r\n     * @param {Number} position - the current position\r\n     * @param {Number} total - the total number of items\r\n     * @param {String} type - the type of element that is represented\r\n     * @param {progressConfig} config - a config object\r\n     * @param {String} config.scope - the scope of the progression\r\n     * @param {Array} config.categories - categories to count by them\r\n     * @returns {String}\r\n     */\n    function getProgressionLabel(position, total, type, config) {\n      var patterns = labels[type] || labels.item;\n      var pattern = config.showTotal ? patterns.long : patterns.short;\n      return format(pattern, position || '0', total || '0');\n    }\n\n    /**\r\n     * Gets the progression based on position\r\n     * @param {Number} position - the current position\r\n     * @param {Number} total - the total number of items\r\n     * @param {String} type - the type of element that is represented\r\n     * @param {progressConfig} config - a config object\r\n     * @param {String} config.scope - the scope of the progression\r\n     * @param {Array} config.categories - categories to count by them\r\n     * @returns {progressIndicator}\r\n     */\n    function getPositionProgression(position, total, type, config) {\n      return {\n        position: position || 0,\n        total: total || 0,\n        ratio: getRatio(position, total),\n        label: getProgressionLabel(position, total, type, config)\n      };\n    }\n\n    /**\r\n     * Gets the progression based on a ratio\r\n     * @param {Number} position - the current position\r\n     * @param {Number} total - the total number of items\r\n     * @returns {progressIndicator}\r\n     */\n    function getRatioProgression(position, total) {\n      var ratio = getRatio(position, total);\n      return {\n        position: position || 0,\n        total: total || 0,\n        ratio: ratio,\n        label: `${ratio}%`\n      };\n    }\n    var progress = {\n      /**\r\n       * Checks that categories matched\r\n       * @param categories\r\n       * @param expectedCategories\r\n       * @returns {Boolean}\r\n       */\n      isMatchedCategories: function validCategories(categories, expectedCategories) {\n        var categoriesToMatch = getCategoriesToMatch(expectedCategories);\n        var matchSize = expectedCategories && expectedCategories.length;\n        return matchCategories(categories, categoriesToMatch, matchSize);\n      },\n      /**\r\n       * Computes the progress stats for the specified scope\r\n       * @param {Object} testMap - the actual test map\r\n       * @param {Object} testContext - the actual test context\r\n       * @param {progressConfig} config - a config object\r\n       * @param {String} config.scope - the scope of the progression\r\n       * @param {Array} config.categories - categories to count by them\r\n       * @returns {progressData}\r\n       */\n      computeStats(testMap, testContext, config) {\n        const testPart = mapHelper.getPart(testMap, testContext.testPartId);\n        const statsComputer = config.scope && scopes[config.scope] || scopes.test;\n        const stats = statsComputer(testMap, testContext, config || defaultConfig);\n        stats.overall = testMap.stats.total;\n        if (testPart && testPart.isLinear) {\n          stats.overallCompleted = testMap.stats.answered - 1;\n        } else {\n          stats.overallCompleted = testMap.stats.answered;\n        }\n        return stats;\n      },\n      /**\r\n       * Computes the specified progress indicator\r\n       * @param {progressData} stats - the progress stats\r\n       * @param {String} type - the [type=\"percentage\"] of indicator to compute (could be: percentage, position, questions, sections)\r\n       * @param {progressConfig} [config] - a config object\r\n       * @param {Boolean} [config.showTotal] - display 'item x of y' (true) | 'item x'\r\n       * @returns {progressIndicator}\r\n       */\n      computeIndicator: function computeIndicator(stats, type, config) {\n        var indicatorComputer = type && indicators[type] || indicators.percentage;\n        return indicatorComputer(stats || {}, config || defaultConfig);\n      },\n      /**\r\n       *\r\n       * @param {Object} testMap - the actual test map\r\n       * @param {Object} testContext - the actual test context\r\n       * @param {progressConfig} config - a config object\r\n       * @param {String} config.indicator - the type of progression\r\n       * @param {String} config.scope - the scope of the progression\r\n       * @param {Array} config.categories - categories to count by them\r\n       * @param {Boolean} [config.showTotal=true] - display 'item x of y' (true) | 'item x'\r\n       */\n      computeProgress: function computeProgress(testMap, testContext, config) {\n        var progressData;\n        config = _.defaults(config || {}, defaultConfig);\n        progressData = this.computeStats(testMap, testContext, config);\n        return this.computeIndicator(progressData, config.indicator, config);\n      }\n    };\n\n    return progress;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage',['ui/component', 'handlebars', 'lib/handlebars/helpers', 'ui/progressbar'], function (component, Handlebars, Helpers0, progressbar) { 'use strict';\n\n    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers);  \n\n\n      return \"<div class=\\\"progress-box\\\">\\r\\n    <div data-control=\\\"progress-bar\\\" class=\\\"qti-controls progressbar info\\\"></div>\\r\\n    <div data-control=\\\"progress-label\\\" class=\\\"qti-controls\\\"></div>\\r\\n</div>\\r\\n\";\n      });\n    function percentageTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Default config values\r\n     * @type {Object}\r\n     */\n    var defaults = {\n      showLabel: true\n    };\n\n    /**\r\n     * Builds percentage indicator renderer\r\n     * @param {Object} [config] - a config object\r\n     * @param {Boolean} [config.showLabel=true] - show/hide the progress label\r\n     * @param {Object} [progressData] - the initial dataset\r\n     */\n    function percentageIndicatorRenderer(config, progressData) {\n      var rendererApi = {\n        /**\r\n         * Update the progress bar according to the provided indicator data\r\n         * @param {progressIndicator} data\r\n         */\n        update: function update(data) {\n          progressData = data;\n          if (this.is('rendered') && this.controls) {\n            this.controls.$label.text(progressData.label);\n            this.controls.$bar.progressbar('value', progressData.ratio);\n          }\n\n          /**\r\n           * Executes extra tasks on update\r\n           * @event percentageIndicatorRenderer#update\r\n           * @param {progressIndicator} data\r\n           */\n          this.trigger('update', data);\n        }\n      };\n      return component(rendererApi, defaults).setTemplate(percentageTpl).on('render', function () {\n        // get access to the controls\n        this.controls = {\n          $label: this.getElement().find('[data-control=\"progress-label\"]'),\n          $bar: this.getElement().find('[data-control=\"progress-bar\"]')\n        };\n\n        // apply option\n        if (!this.config.showLabel) {\n          this.controls.$label.hide();\n        }\n\n        // and initialize the progress bar component\n        this.controls.$bar.progressbar();\n\n        // set the right progression according to init data\n        if (progressData) {\n          this.update(progressData);\n        }\n\n        // forward the hidden state if it has been set before render\n        if (this.is('hidden')) {\n          this.hide();\n        }\n      }).on('destroy', function () {\n        this.controls = null;\n      }).init(config);\n    }\n\n    return percentageIndicatorRenderer;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/progressbar/renderer/position',['lodash', 'ui/component', 'handlebars', 'lib/handlebars/helpers'], function (_, component, Handlebars, Helpers0) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers);  \n\n\n      return \"<div class=\\\"progress-box\\\">\\r\\n    <div data-control=\\\"progress-bar\\\" class=\\\"qti-controls progressbar\\\">\\r\\n        <div class=\\\"progressbar-points\\\"></div>\\r\\n    </div>\\r\\n    <div data-control=\\\"progress-label\\\" class=\\\"qti-controls\\\"></div>\\r\\n</div>\\r\\n\";\n      });\n    function positionTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template$1 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\";\n      buffer += \"\\r\\n<span class=\\\"progressbar-point\\\" data-index=\\\"\"\n        + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))\n        + \"\\\"></span>\\r\\n\";\n      return buffer;\n      }\n\n      stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { return stack1; }\n      else { return ''; }\n      });\n    function pointTpl(data, options, asString) {\n      var html = Template$1(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Default config values\r\n     * @type {Object}\r\n     */\n    var defaults = {\n      showLabel: true\n    };\n\n    /**\r\n     * Builds percentage indicator renderer\r\n     * @param {Object} [config] - a config object\r\n     * @param {Boolean} [config.showLabel=true] - show/hide the progress label\r\n     * @param {Object} [progressData] - the initial dataset\r\n     */\n    function positionIndicatorRenderer(config, progressData) {\n      var count = 0;\n      var rendererApi = {\n        /**\r\n         * Update the progress bar according to the provided indicator data\r\n         * @param {progressIndicator} data\r\n         */\n        update: function update(data) {\n          progressData = data;\n          if (this.is('rendered') && this.controls) {\n            if (count !== progressData.total) {\n              // the number of points have changed, regenerate the full bar\n              count = progressData.total;\n              this.controls.$bar.empty().append(pointTpl(_.range(count)));\n            }\n            this.controls.$label.text(progressData.label);\n            this.controls.$bar\n            // remove progression from all points\n            .children().removeClass('reached current')\n            // set progression to each reached point\n            .slice(0, progressData.position).addClass('reached')\n            // set current position\n            .slice(-1).addClass('current');\n          }\n\n          /**\r\n           * Executes extra tasks on update\r\n           * @event positionIndicatorRenderer#update\r\n           * @param {progressIndicator} data\r\n           */\n          this.trigger('update', data);\n        }\n      };\n      return component(rendererApi, defaults).setTemplate(positionTpl).on('render', function () {\n        // get access to the controls\n        this.controls = {\n          $label: this.getElement().find('[data-control=\"progress-label\"]'),\n          $bar: this.getElement().find('[data-control=\"progress-bar\"] .progressbar-points')\n        };\n\n        // apply option\n        if (!this.config.showLabel) {\n          this.controls.$label.hide();\n        }\n\n        // set the right progression according to init data\n        if (progressData) {\n          this.update(progressData);\n        }\n\n        // forward the hidden state if it has been set before render\n        if (this.is('hidden')) {\n          this.hide();\n        }\n      }).on('destroy', function () {\n        this.controls = null;\n      }).init(config);\n    }\n\n    return positionIndicatorRenderer;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/progressbar/progressbar',['taoTests/runner/plugin', 'taoQtiTest/runner/helpers/map', 'taoQtiTest/runner/plugins/controls/progressbar/progress', 'taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage', 'taoQtiTest/runner/plugins/controls/progressbar/renderer/position'], function (pluginFactory, mapHelper, progressHelper, percentageRendererFactory, positionRendererFactory) { 'use strict';\n\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    progressHelper = progressHelper && Object.prototype.hasOwnProperty.call(progressHelper, 'default') ? progressHelper['default'] : progressHelper;\n    percentageRendererFactory = percentageRendererFactory && Object.prototype.hasOwnProperty.call(percentageRendererFactory, 'default') ? percentageRendererFactory['default'] : percentageRendererFactory;\n    positionRendererFactory = positionRendererFactory && Object.prototype.hasOwnProperty.call(positionRendererFactory, 'default') ? positionRendererFactory['default'] : positionRendererFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2018 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * List of available progress indicator renderers\r\n     * @type {Object}\r\n     */\n    var renderers = {\n      percentage: percentageRendererFactory,\n      position: positionRendererFactory\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var progressbar = pluginFactory({\n      name: 'progressBar',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        const testRunner = this.getTestRunner();\n        const testRunnerConfig = testRunner.getOptions();\n        const config = Object.assign({}, testRunnerConfig.progressIndicator || {}, this.getConfig());\n        const self = this;\n        var rendererFactory = renderers[config.renderer] || renderers.percentage;\n        var progressConfig = {\n          indicator: config.type || 'percentage',\n          scope: config.scope || 'test',\n          showLabel: config.showLabel,\n          showTotal: config.showTotal,\n          categories: config.categories\n        };\n        var hiddenByQuestions = function hiddenByQuestions(item) {\n          return item && item.informational && progressConfig.indicator === 'questions';\n        };\n        var hiddenByCategories = function (item) {\n          return item && progressConfig.indicator === 'categories' && !progressHelper.isMatchedCategories(item.categories, progressConfig.categories);\n        };\n\n        /**\r\n         * Check if progress bar should be hidden\r\n         */\n        var isProgressbarHidden = function isProgressbarHidden(item) {\n          return hiddenByQuestions(item) || hiddenByCategories(item);\n        };\n\n        /**\r\n         * Update the progress bar\r\n         */\n        var update = function update() {\n          var testContext = testRunner.getTestContext();\n          var testMap = testRunner.getTestMap();\n          var item = mapHelper.getItemAt(testMap, testContext.itemPosition);\n          if (isProgressbarHidden(item)) {\n            self.renderer.hide();\n          } else {\n            self.renderer.show();\n            self.renderer.update(progressHelper.computeProgress(testMap, testContext, progressConfig));\n          }\n        };\n\n        //create the progressbar\n        this.renderer = rendererFactory(progressConfig);\n\n        //let update the progression\n        update();\n        testRunner.on('ready loaditem', update);\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var $container = this.getAreaBroker().getControlArea();\n        this.renderer.render($container);\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      destroy: function destroy() {\n        if (this.renderer) {\n          this.renderer.destroy();\n        }\n        this.renderer = null;\n      },\n      /**\r\n       * Show the progress bar\r\n       */\n      show: function show() {\n        if (this.renderer) {\n          this.renderer.show();\n        }\n      },\n      /**\r\n       * Hide the progress bar\r\n       */\n      hide: function hide() {\n        if (this.renderer) {\n          this.renderer.hide();\n        }\n      }\n    });\n\n    return progressbar;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/testState/testState',['lodash', 'taoTests/runner/plugin'], function (_, pluginFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Creates the testState plugin.\r\n     * Handle particular states of the assessment test\r\n     */\n    var testState = pluginFactory({\n      name: 'testState',\n      /**\r\n       * Installs the plugin (called when the runner bind the plugin)\r\n       */\n      install: function install() {\n        var testRunner = this.getTestRunner();\n\n        // middleware invoked on every requests\n        testRunner.getProxy().use(function qtiFilter(req, res, next) {\n          var data = res && res.data;\n\n          // test has been closed/suspended => redirect to the index page after message acknowledge\n          if (data && data.type && data.type === 'TestState' && !testRunner.getState('closedOrSuspended')) {\n            // spread the world about the reason of the leave\n            testRunner.setState('closedOrSuspended', true);\n            if (!testRunner.getState('ready')) {\n              // if we open an inconsistent test just leave\n              // should happen if we refresh an auto paused test\n              testRunner.trigger('destroy');\n            } else if (_.isEmpty(data.messages) || !_.find(data.messages, {\n              channel: 'teststate'\n            })) {\n              testRunner.trigger('leave', data);\n            }\n            // break the chain to avoid uncaught exception in promise...\n            // this will lead to unresolved promise, but the browser will be redirected soon!\n            return;\n          }\n          next();\n        });\n      },\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var testRunner = this.getTestRunner();\n        var isLeaving = false;\n\n        // immediate handling of proctor's actions\n        testRunner.getProxy().channel('teststate', function (data) {\n          if (!isLeaving && data && ('close' === data.type || 'pause' === data.type) && !testRunner.getState('closedOrSuspended')) {\n            isLeaving = true;\n            if ('pause' === data.type) {\n              testRunner.trigger('pause', data);\n            } else {\n              testRunner.setState('closedOrSuspended', true);\n              testRunner.trigger('leave', data);\n            }\n          }\n        });\n      }\n    });\n\n    return testState;\n\n});\n\n","define('taoQtiTest/runner/helpers/getTimerMessage',['i18n'], function (__) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n\n    /**\r\n     * Returns timer information string\r\n     * @returns {Boolean}\r\n     */\n    function getTimerMessage(hours, minutes, seconds, unansweredQuestions, scope) {\n      let timerMessage;\n      const timeArr = [hours, minutes, seconds];\n      const timeArgArr = [];\n      [__('hours'), __('minutes'), __('seconds')].forEach((unit, idx) => {\n        if (timeArr[idx] > 0) {\n          timeArgArr.push(`${timeArr[idx]} ${unit}`);\n        }\n      });\n      let answeredMessage;\n      if (!unansweredQuestions || scope === 'item') {\n        answeredMessage = __('the current question');\n      } else {\n        let questionsMessage = __('questions');\n        if (unansweredQuestions === 1) {\n          questionsMessage = __('question');\n        }\n        answeredMessage = __('remaining %s %s', unansweredQuestions, questionsMessage);\n      }\n      if (timeArgArr.length === 0) {\n        timerMessage = __('%s to answer %s', 'no time left', answeredMessage);\n      } else {\n        timerMessage = __('%s to answer %s', timeArgArr.join(', '), answeredMessage);\n      }\n      return timerMessage;\n    }\n\n    return getTimerMessage;\n\n});\n\n","\ndefine('css!taoQtiTest/runner/plugins/controls/timer/component/css/countdown',[],function(){});\n","define('taoQtiTest/runner/plugins/controls/timer/component/countdown',['jquery', 'lodash', 'core/encoder/time', 'ui/component', 'handlebars', 'lib/handlebars/helpers', 'taoQtiTest/runner/helpers/getTimerMessage', 'ui/tooltip', 'css!taoQtiTest/runner/plugins/controls/timer/component/css/countdown.css', 'moment'], function ($$1, _, timeEncoder, component, Handlebars, Helpers0, getTimerMessage, tooltip, countdown_css, moment) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    timeEncoder = timeEncoder && Object.prototype.hasOwnProperty.call(timeEncoder, 'default') ? timeEncoder['default'] : timeEncoder;\n    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n    getTimerMessage = getTimerMessage && Object.prototype.hasOwnProperty.call(getTimerMessage, 'default') ? getTimerMessage['default'] : getTimerMessage;\n    tooltip = tooltip && Object.prototype.hasOwnProperty.call(tooltip, 'default') ? tooltip['default'] : tooltip;\n    moment = moment && Object.prototype.hasOwnProperty.call(moment, 'default') ? moment['default'] : moment;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n      buffer += \"<div class=\\\"countdown\\\" data-control=\\\"\";\n      if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" data-type=\\\"\";\n      if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" data-scope=\\\"\";\n      if (helper = helpers.scope) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.scope); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" title=\\\"\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" disabled>\\r\\n    <span aria-label=\\\"\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" class=\\\"label truncate\\\">\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\\r\\n    <span class=\\\"time\\\" aria-hidden=\\\"true\\\"></span>\\r\\n    <div class=\\\"time--screenreader visible-hidden\\\"></div>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function countdownTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    //Precision is milliseconds\n    var precision = 1000;\n\n    /**\r\n     * Default config values, see below.\r\n     */\n    var defaults = {\n      showBeforeStart: true,\n      displayWarning: true\n    };\n\n    /**\r\n     * time to display warnings\r\n     */\n    var warningTimeout = {\n      info: 2000,\n      success: 2000,\n      warning: 4000,\n      danger: 4000,\n      error: 8000\n    };\n\n    /**\r\n     * Creates, initialize and render a countdown component.\r\n     *\r\n     * @param {jQueryElement|HTMLElement} $container - where to append the countdown\r\n     * @param {Object} config\r\n     * @param {String} config.id - the timer unique identifier\r\n     * @param {String} config.label - the text to display above the timer\r\n     * @param {String} config.type - the type of countdown (to categorize them)\r\n     * @param {String} [config.scope] - scope of a timer\r\n     * @param {Number} [config.unansweredQuestions] - number of unanswered options\r\n     * @param {Number} [config.remainingTime] - the current value of the countdown, in milliseconds\r\n     * @param {Boolean} [config.showBeforeStart = true] - do we show the time before starting\r\n     * @param {Boolean} [config.displayWarning = true] - do we display the warnings or trigger only the event\r\n     * @param {Object[]} [config.warnings] - define warnings thresholds\r\n     * @param {Number} [config.warnings.threshold] - when the warning is shown, in milliseconds\r\n     * @param {String} [config.warnings.message] - the warning message\r\n     * @param {String} [config.warnings.level = warn] - the feedback level in (success, info, warn, danger and error)\r\n     * @returns {countdown} the component, initialized and rendered\r\n     */\n    function countdownFactory($container, config) {\n      let $time;\n      let $timeScreenreader;\n\n      /**\r\n       * @typedef {Object} countdown\r\n       */\n      var countdown = component({\n        /**\r\n         * Update the countdown\r\n         * @param {Number} remainingTime - the time remaining (milliseconds)\r\n         * @param {Number} unansweredQuestions\r\n         * @returns {countdown} chains\r\n         * @fires countdown#change - when the value has changed\r\n         * @fires countdown#warn - when a threshold is reached\r\n         */\n        update: function udpate(remainingTime, unansweredQuestions) {\n          var self = this;\n          var encodedTime;\n          var warningId;\n          var warningMessage;\n          if (!this.is('completed')) {\n            if (remainingTime <= 0) {\n              this.remainingTime = 0;\n            } else {\n              this.remainingTime = parseInt(remainingTime, 10);\n            }\n            if (this.is('rendered') && this.is('running')) {\n              encodedTime = timeEncoder.encode(this.remainingTime / precision);\n              if (encodedTime !== this.encodedTime) {\n                this.encodedTime = encodedTime;\n                const time = moment.duration(this.remainingTime / precision, 'seconds');\n                const hours = time.get('hours');\n                const minutes = time.get('minutes');\n                const seconds = time.get('seconds');\n                $time.text(this.encodedTime);\n                $timeScreenreader.text(getTimerMessage(hours, minutes, seconds, unansweredQuestions, this.config.scope));\n              }\n              if (this.warnings) {\n                //the warnings have already be sorted\n                warningId = _.findLastKey(this.warnings, function (warning) {\n                  return warning && !warning.shown && warning.threshold > 0 && warning.threshold >= self.remainingTime;\n                });\n                if (warningId) {\n                  this.warnings[warningId].shown = true;\n                  if (_.isFunction(this.warnings[warningId].message)) {\n                    warningMessage = this.warnings[warningId].message(this.remainingTime);\n                  } else {\n                    warningMessage = this.warnings[warningId].message;\n                  }\n\n                  /**\r\n                   * Warn user the timer reach a threshold\r\n                   * @event countdown#warn\r\n                   * @param {String} message\r\n                   * @param {String} level\r\n                   */\n                  this.trigger('warn', warningMessage, this.warnings[warningId].level);\n                }\n              }\n              if (this.warningsForScreenreader) {\n                //the warnings have already be sorted\n                const screenreaderWarningId = _.findLastKey(this.warningsForScreenreader, warning => warning && !warning.shown && warning.threshold > 0 && warning.threshold >= self.remainingTime);\n                if (screenreaderWarningId) {\n                  this.warningsForScreenreader[screenreaderWarningId].shown = true;\n\n                  /**\r\n                   * Warn user the timer reach a threshold\r\n                   * @event countdown#warnscreenreader\r\n                   * @param {Function} message\r\n                   * @param {Number} remainingTime\r\n                   * @param {String} scope\r\n                   */\n                  this.trigger('warnscreenreader', this.warningsForScreenreader[screenreaderWarningId].message, self.remainingTime, this.warningsForScreenreader[screenreaderWarningId].scope);\n                }\n              }\n\n              /**\r\n               * The current value has changed\r\n               * @event countdown#change\r\n               * @param {Number} remainingTime - the updated time\r\n               * @param {String} displayed - the displayed value\r\n               */\n              this.trigger('change', this.remainingTime, encodedTime);\n            }\n            if (this.remainingTime === 0) {\n              this.complete();\n            }\n          }\n          return this;\n        },\n        /**\r\n         * Starts the countdown\r\n         * @returns {countdown} chains\r\n         * @fires countdown#start\r\n         */\n        start: function start() {\n          if (this.is('rendered') && !this.is('running') && !this.is('completed')) {\n            this.enable();\n            this.setState('running', true);\n\n            /**\r\n             * The count has started\r\n             * @event countdown#start\r\n             */\n            this.trigger('start');\n          }\n          return this;\n        },\n        /**\r\n         * Stops the countdown (can be restarted then)\r\n         * @returns {countdown} chains\r\n         * @fires countdown#stop\r\n         */\n        stop: function stop() {\n          if (this.is('rendered') && this.is('running')) {\n            this.setState('running', false);\n\n            /**\r\n             * The count is stopped\r\n             * @event countdown#stop\r\n             */\n            this.trigger('stop');\n          }\n          return this;\n        },\n        /**\r\n         * Calls to complete the countdown,\r\n         * it can't be resumed after.\r\n         *\r\n         * @returns {countdown} chains\r\n         *\r\n         * @fires countdown#complete\r\n         * @fires countdown#end\r\n         */\n        complete: function complete() {\n          if (this.is('rendered') && this.is('running') && !this.is('completed')) {\n            this.stop();\n            this.setState('completed', true);\n\n            /**\r\n             * The countdown has ended, is completed\r\n             * @event countdown#complete\r\n             * @event countdown#end (alias)\r\n             */\n            this.trigger('complete end');\n          }\n          return this;\n        }\n      }, defaults).on('init', function () {\n        this.remainingTime = this.config.remainingTime;\n        this.unansweredQuestions = this.config.unansweredQuestions;\n        if (this.config.warnings) {\n          this.warnings = _.sortBy(this.config.warnings, 'threshold');\n        }\n        if (this.config.warningsForScreenreader) {\n          this.warningsForScreenreader = _.sortBy(this.config.warningsForScreenreader, 'threshold');\n        }\n\n        //auto renders\n        this.render($container);\n      }).on('render', function () {\n        $time = $$1('.time', this.getElement());\n        $timeScreenreader = $$1('.time--screenreader', this.getElement());\n        if (this.config.showBeforeStart === true) {\n          $time.text(timeEncoder.encode(this.remainingTime / precision));\n        }\n      }).on('warn', function (message, level) {\n        var countdownTooltip;\n        level = level || 'warning';\n        if (this.is('rendered') && this.is('running') && _.isString(message) && !_.isEmpty(message)) {\n          $time.removeClass('txt-success txt-info txt-warning txt-danger txt-error').addClass(`txt-${level}`);\n          if (this.config.displayWarning === true) {\n            countdownTooltip = tooltip.create(this.getElement(), message, {\n              trigger: 'manual',\n              theme: level,\n              placement: 'bottom'\n            });\n            countdownTooltip.show();\n            setTimeout(function () {\n              countdownTooltip.hide();\n              countdownTooltip.dispose();\n            }, warningTimeout[level] || 2000);\n          }\n        }\n      });\n      countdown.setTemplate(countdownTpl);\n      _.defer(function () {\n        countdown.init(config);\n      });\n      return countdown;\n    }\n\n    return countdownFactory;\n\n});\n\n","\ndefine('css!taoQtiTest/runner/plugins/controls/timer/component/css/timerbox',[],function(){});\n","define('taoQtiTest/runner/plugins/controls/timer/component/timerbox',['jquery', 'lodash', 'i18n', 'ui/component', 'ui/hider', 'taoQtiTest/runner/plugins/controls/timer/component/countdown', 'handlebars', 'lib/handlebars/helpers', 'css!taoQtiTest/runner/plugins/controls/timer/component/css/timerbox.css'], function ($$1, _, __, component, hider, countdownFactory, Handlebars, Helpers0, timerbox_css) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;\n    hider = hider && Object.prototype.hasOwnProperty.call(hider, 'default') ? hider['default'] : hider;\n    countdownFactory = countdownFactory && Object.prototype.hasOwnProperty.call(countdownFactory, 'default') ? countdownFactory['default'] : countdownFactory;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this, functionType=\"function\";\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", helper, options;\n      buffer += \"\\r\\n    <a href=\\\"#\\\" class=\\\"timer-toggler hidden\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Hide timers\", options) : helperMissing.call(depth0, \"__\", \"Hide timers\", options)))\n        + \"\\\" role=\\\"button\\\"><span class=\\\"icon-clock\\\"></span></a>\\r\\n    \";\n      return buffer;\n      }\n\n      buffer += \"<div class=\\\"timer-box\\\">\\r\\n    \";\n      stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.zenMode)),stack1 == null || stack1 === false ? stack1 : stack1.enabled), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n    <div class=\\\"timer-wrapper\\\" aria-hidden=\\\"\";\n      if (helper = helpers.ariaHidden) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.ariaHidden); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\">\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function timerboxTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Default config values, see below.\r\n     */\n    var defaults = {\n      zenMode: {\n        enabled: true,\n        startHidden: false\n      }\n    };\n\n    /**\r\n     * Creates and initialize the timerbox component.\r\n     * Please not the component IS NOT rendered.\r\n     * You'll have to render it by yourself.\r\n     *\r\n     * @param {Object} config\r\n     * @param {Boolean} [config.zenMode = true] - zen mode adds a button to hide the countdowns to stay zen\r\n     * @param {Object[]} [config.timers] - the timers to start with\r\n     * @param {Boolean} [config.displayWarning = true] - let the countdown display their warning (contextual)\r\n     * @returns {timerbox} the component, initialized and rendered\r\n     */\n    function timerboxFactory(config) {\n      var $zenModeToggler;\n      var $countdownContainer;\n\n      /**\r\n       * @typedef {Object} timerbox\r\n       */\n      var timerbox = component({\n        /***\r\n         * Update the displayed timers.\r\n         * Compare the current and the given, it will add,remove and update timers.\r\n         *\r\n         * @param {Object[]} timers - the new timers\r\n         * @returns {Promise<Array>} resolves when all timers are up to date (with the result of all the update operations)\r\n         *\r\n         * @fires timerbox#update the update is done\r\n         */\n        update: function update(timers) {\n          var self = this;\n          var updating = [];\n\n          //remove timers\n          var timerIdsToRemove = _.difference(_.keys(this.timers), _.keys(timers));\n          if (timerIdsToRemove.length) {\n            _.forEach(timerIdsToRemove, function (timerId) {\n              updating.push(self.removeTimer(timerId));\n            });\n          }\n\n          //add/update\n          _.forEach(timers, function (timer, id) {\n            if (typeof self.timers[id] === 'undefined') {\n              updating.push(self.addTimer(id, timer));\n            } else {\n              updating.push(self.updateTimer(id, timer));\n            }\n          });\n          return Promise.all(updating).then(function (results) {\n            //show the toggler only if there's timers\n            if (_.size(self.timers) > 0) {\n              hider.show($zenModeToggler);\n            } else {\n              hider.hide($zenModeToggler);\n            }\n\n            /**\r\n             * The timer box update is done\r\n             * @event timerbox#update\r\n             * @param {Object[]} timers - ALL update results (includes removals)\r\n             */\n            self.trigger('update', results);\n            return results;\n          });\n        },\n        /**\r\n         * Get the current timers\r\n         * @return {Object[]} the timers\r\n         */\n        getTimers: function getTimers() {\n          return this.timers;\n        },\n        /**\r\n         * Adds a new timer to the box\r\n         * @param {String} id - the timer unique identifier\r\n         * @param {Object} timer - the new timer\r\n         * @return {Promise<Object|Boolean>} resolves with the timer once added or false\r\n         *\r\n         * @fires timerbox#timerchange something changes in a timer\r\n         * @fires timerbox#timeradd a new timer is in the box\r\n         * @fires timerbox#timerstart a timer get started\r\n         * @fires timerbox#timerstop a timer get stopped\r\n         * @fires timerbox#timerend a timer get completed\r\n         * @fires timerbox#change spread from the countdown\r\n         */\n        addTimer: function addTimer(id, timer) {\n          var self = this;\n          if (this.is('rendered') && typeof this.timers[id] === 'undefined') {\n            return new Promise(function (resolve) {\n              var countdown = countdownFactory($countdownContainer, _.defaults(timer, {\n                displayWarning: self.config.displayWarning\n              })).on('render', function () {\n                //keep track of the new timer\n                //and the countdown component\n                self.timers[id] = _.clone(timer);\n                self.timers[id].countdown = this;\n\n                /**\r\n                 * The timers have changed (add, update, remove)\r\n                 * @event timerbox#timerchange\r\n                 * @param {String} action - add, update, remove\r\n                 * @param {Object} timer\r\n                 */\n                self.trigger('timerchange', 'add', self.timers[id]);\n\n                /**\r\n                 * A new timer is added\r\n                 * @event timerbox#timeradd\r\n                 * @param {Object} timer\r\n                 */\n                self.trigger('timeradd', self.timers[id]);\n                resolve(self.timers[id]);\n              }).on('start', function () {\n                /**\r\n                 * A timer starts\r\n                 * @event timerbox#timerstart\r\n                 * @param {Object} timer\r\n                 */\n                self.trigger('timerstart', self.timers[id]);\n              }).on('stop', function () {\n                /**\r\n                 * A timer stops\r\n                 * @event timerbox#timerstop\r\n                 * @param {Object} timer\r\n                 */\n                self.trigger('timerstop', self.timers[id]);\n              }).on('end', function () {\n                /**\r\n                 * A timer ends\r\n                 * @event timerbox#timerend\r\n                 * @param {Object} timer\r\n                 */\n                self.trigger('timerend', self.timers[id]);\n              }).on('change', function (value) {\n                if (self.timers[id]) {\n                  self.trigger('timertick', this.remainingTime, self.timers[id].scope, self.timers[id].unansweredQuestions); // propogate current timer data\n\n                  //keep the current timer data in sync\n                  self.timers[id].remainingTime = value;\n                }\n              });\n              countdown.spread(self, ['error', 'change', 'warn', 'warnscreenreader']);\n            });\n          }\n          return Promise.resolve(false);\n        },\n        /**\r\n         * Updates an existing timer\r\n         * @param {String} id - the timer unique identifier\r\n         * @param {Object} timer - the new timer\r\n         * @return {Promise<Object|Boolean>} resolves with the timer once updated or false\r\n         *\r\n         * @fires timerbox#timerchange something changes in a timer\r\n         * @fires timerbox#timerupdate an existing timer is updated\r\n         */\n        updateTimer: function updateTimer(id, timer) {\n          if (this.is('rendered') && typeof this.timers[id] !== 'undefined') {\n            this.timers[id].remainingTime = timer.remainingTime;\n            this.timers[id].unansweredQuestions = timer.unansweredQuestions;\n            this.timers[id].extraTime = timer.extraTime;\n            if (_.isNumber(timer.remainingWithoutExtraTime)) {\n              this.timers[id].remainingWithoutExtraTime = timer.remainingWithoutExtraTime;\n            }\n            if (this.timers[id].countdown) {\n              this.timers[id].countdown.update(timer.remainingTime, timer.unansweredQuestions);\n            }\n            this.trigger('timerchange', 'update', this.timers[id]);\n\n            /**\r\n             * A timer has been updated with external values\r\n             * @event timerbox#timerupdate\r\n             * @param {Object} timer\r\n             */\n            this.trigger('timerupdate', this.timers[id]);\n            return Promise.resolve(this.timers[id]);\n          }\n          return Promise.resolve(false);\n        },\n        /**\r\n         * Remove a timer\r\n         * @param {String} id - the timer unique identifier\r\n         * @return {Promise<Object|Boolean>} resolves with the timer once removed or false\r\n         *\r\n         * @fires timerbox#timerchange something changes in a timer\r\n         * @fires timerbox#timerremove a timer is removed\r\n         */\n        removeTimer: function removeTimer(id) {\n          var self = this;\n          if (this.is('rendered') && typeof this.timers[id] !== 'undefined') {\n            return new Promise(function (resolve) {\n              /**\r\n               * Artifact function, remove the timer from the component index\r\n               */\n              var deindex = function deindex() {\n                //keep a clone, without the component, for the event\n                var removed = _.omit(self.timers[id], 'countdown');\n\n                //remove the timer from the list\n                self.timers = _.omit(self.timers, id);\n                self.trigger('timerchange', 'remove', removed);\n\n                /**\r\n                 * A timer has been updated with external values\r\n                 * @event timerbox#timerupdate\r\n                 * @param {Object} timer\r\n                 */\n                self.trigger('timerremove', removed);\n                resolve(removed);\n              };\n              if (self.timers[id].countdown) {\n                self.timers[id].countdown.on('destroy', deindex).destroy();\n              } else {\n                deindex();\n              }\n            });\n          }\n          return Promise.resolve();\n        },\n        /**\r\n         * Starts all the timers contained in the box\r\n         * @returns {timerbox} chains\r\n         */\n        start: function start() {\n          _.forEach(this.timers, function (timer) {\n            if (timer.countdown) {\n              timer.countdown.start();\n            }\n          });\n          return this;\n        },\n        /**\r\n         * Stops all the timers contained in the box\r\n         * @returns {timerbox} chains\r\n         */\n        stop: function stop() {\n          _.forEach(this.timers, function (timer) {\n            if (timer.countdown) {\n              timer.countdown.stop();\n            }\n          });\n          return this;\n        },\n        /**\r\n         * Show/hide the timers aka \"zen mode\"\r\n         * @returns {timerbox} chains\r\n         * @fires timerbox#zenchange\r\n         */\n        toggleZenMode: function toggleZenMode() {\n          if (this.is('rendered') && this.config.zenMode.enabled) {\n            if (this.is('zen')) {\n              this.setState('zen', false);\n              $zenModeToggler.attr('title', __('Hide timers'));\n            } else {\n              this.setState('zen', true);\n              $zenModeToggler.attr('title', __('Show timers'));\n            }\n\n            /**\r\n             * @event timerbox#zenchange\r\n             * @param {Boolean} isZen\r\n             */\n            this.trigger('zenchange', this.is('zen'));\n          }\n          return this;\n        }\n      }, defaults).on('init', function () {\n        //index the current timers\n        this.timers = {};\n      }).on('render', function () {\n        var self = this;\n        var $element = this.getElement();\n\n        //where we append the countdowns components\n        $countdownContainer = $$1('.timer-wrapper', $element);\n\n        //set up the zen mode toggler\n        if (this.config.zenMode.enabled) {\n          $zenModeToggler = $$1('.timer-toggler', $element);\n          self.setState('zen', !!self.config.zenMode.startHidden);\n          $zenModeToggler.on('click', function (e) {\n            e.preventDefault();\n            self.toggleZenMode();\n          });\n        }\n\n        //if timers are provided with the config, we perform the 1st update\n        if (this.config.timers) {\n          this.update(this.config.timers);\n        }\n      });\n      timerbox.setTemplate(timerboxTpl);\n      _.defer(function () {\n        timerbox.init(config);\n      });\n      return timerbox;\n    }\n\n    return timerboxFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/timer/strategy/enforcedStay',[],function () { 'use strict';\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Timer strategy that enforce the test taker to stay in\r\n     * front of the item until the timer completes,\r\n     * by disabling the navigation elements.\r\n     *\r\n     * Applies on item scope, min timers if the testPart is linear\r\n     *\r\n     * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n     */\n\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\n    function enforcedStayStrategy(testRunner, timer) {\n      const testPart = testRunner.getCurrentPart();\n      if (timer && timer.type === 'min' && timer.scope === 'item' && testPart && testPart.isLinear) {\n        return {\n          name: 'enforcedStay',\n          /**\r\n           * setUp entry point : disable the navigation\r\n           */\n          setUp: function setUp() {\n            testRunner.on('enablenav.enforcestay', function () {\n              testRunner.trigger('disablenav');\n            });\n            testRunner.trigger('disablenav');\n          },\n          /**\r\n           * complete entry point : enables back the navigation\r\n           */\n          complete: function complete() {\n            this.tearDown();\n            testRunner.trigger('enablenav');\n          },\n          /**\r\n           * tearDown entry point : remove the listeners\r\n           */\n          tearDown: function tearDown() {\n            testRunner.off('enablenav.enforcestay');\n          }\n        };\n      }\n      return false;\n    }\n\n    return enforcedStayStrategy;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/timer/strategy/extraTime',['lodash'], function (_) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n     */\n    var precision = 1000;\n    var lastConsumedExtraTime = 0;\n\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\n    function extraTimeStrategy(testRunner, timer) {\n      /**\r\n       * Apply the extra time to the timer 'once' and\r\n       * listen for test movment to add the consumed extrat time as parameter\r\n       * Since the extra time is global, if multiple timers use the extra time part,\r\n       * we take the biggest consumed extra time.\r\n       */\n      var applyExtraTime = function applyExtraTime() {\n        if (_.isNumber(timer.extraTime) && timer.extraTime > 0 && !timer.extraTimeSetup) {\n          timer.extraTimeSetup = true;\n          testRunner.before('move.extra skip.extra exit.extra timeout.extra', function () {\n            var consumedExtraTime = 0;\n            var testContext = testRunner.getTestContext();\n            if (timer.remainingTime < timer.extraTime) {\n              consumedExtraTime = Math.max(timer.extraTime - timer.remainingTime, 0) / precision;\n              lastConsumedExtraTime = Math.max(consumedExtraTime, lastConsumedExtraTime, testContext.extraTime.consumed);\n              testRunner.getProxy().addCallActionParams({\n                consumedExtraTime: lastConsumedExtraTime\n              });\n            }\n          }).after('move.extra skip.extra exit.extra timeout.extra', function () {\n            lastConsumedExtraTime = 0;\n          });\n        }\n      };\n      if (timer && timer.type === 'max') {\n        return {\n          name: 'extraTime',\n          /**\r\n           * setUp entry point : adds the extratime to the timer\r\n           */\n          setUp: function setUp() {\n            applyExtraTime();\n          },\n          /**\r\n           * setUp entry point : adds the extratime to the timer\r\n           */\n          start: function start() {\n            //apply at start also in case the extra time is added in between\n            applyExtraTime();\n          },\n          /**\r\n           * tearDown entry point : remove the listeners\r\n           */\n          tearDown: function tearDown() {\n            testRunner.off('move.extra skip.extra exit.extra timeout.extra');\n          }\n        };\n      }\n      return false;\n    }\n\n    return extraTimeStrategy;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/timer/strategy/guidedNavigation',[],function () { 'use strict';\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Timer strategy that enforce the test taker to stay in\r\n     * front of the item until the timer completes,\r\n     * by hidding the navigation elements.\r\n     * Once the timer completes, the test moves to the next item.\r\n     *\r\n     * Applies on item scope, locked timers only, linear test part and\r\n     * the test configuration \"guidedNavigation\"\r\n     *\r\n     * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n     */\n\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\n    function guidedNavigationStrategy(testRunner, timer) {\n      const testRunnerOptions = testRunner.getOptions();\n      const testPart = testRunner.getCurrentPart();\n      if (timer && timer.type === 'locked' && timer.scope === 'item' && testRunnerOptions.guidedNavigation === true && testPart && testPart.isLinear) {\n        return {\n          name: 'guidedNavigation',\n          /**\r\n           * setUp entry point : hides the navigation\r\n           */\n          setUp: function setUp() {\n            testRunner.trigger('hidenav');\n          },\n          /**\r\n           * complete entry point : enables back the navigation\r\n           */\n          complete: function complete() {\n            testRunner.trigger('disableitem disablenav shownav');\n            setTimeout(function () {\n              testRunner.trigger('move', 'next', 'item');\n            }, 500);\n          }\n        };\n      }\n      return false;\n    }\n\n    return guidedNavigationStrategy;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/timer/strategy/timeout',[],function () { 'use strict';\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Timeout strategy, the given scope is timedout when the timer completes.\r\n     *\r\n     * Applies on all max timers\r\n     *\r\n     * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n     */\n\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\n    function timeoutStrategy(testRunner, timer) {\n      if (timer && timer.type === 'max') {\n        return {\n          name: 'timeout',\n          /**\r\n           * complete entry point : timeout\r\n           */\n          complete: function complete() {\n            if (timer.qtiClassName && timer.source) {\n              return testRunner.timeout(timer.qtiClassName, timer.source, timer);\n            }\n          }\n        };\n      }\n      return false;\n    }\n\n    return timeoutStrategy;\n\n});\n\n","define('taoQtiTest/runner/helpers/currentItem',['lodash'], function (_) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * List of QTI model cardinalities\r\n     * @type {Object}\r\n     */\n    var responseCardinalities = {\n      single: 'base',\n      multiple: 'list',\n      ordered: 'list',\n      record: 'record'\n    };\n\n    /**\r\n     * List of QTI interaction minConstraint properties\r\n     * @type {Object}\r\n     */\n    var interactionMinConstraintProperties = {\n      matchInteraction: 'minAssociations',\n      choiceInteraction: 'minChoices',\n      orderInteraction: 'minChoices',\n      associateInteraction: 'minAssociations',\n      hottextInteraction: 'minChoices',\n      hotspotInteraction: 'minChoices',\n      graphicOrderInteraction: 'minChoices',\n      graphicAssociateInteraction: 'minAssociations',\n      selectPointInteraction: 'minChoices'\n    };\n\n    /**\r\n     * @typedef {currentItemHelper}\r\n     */\n    var currentItemHelper = {\n      /**\r\n       * Gets the responses declarations of the current item.\r\n       * @param {Object} runner - testRunner instance\r\n       * @returns {Object}\r\n       */\n      getDeclarations: function getDeclarations(runner) {\n        var itemRunner = runner.itemRunner;\n        return itemRunner._item && itemRunner._item.responses;\n      },\n      /**\r\n       * Gets a response declaration by the identifier of the response\r\n       * @param {Object} runner - testRunner instance\r\n       * @param {String} identifier - The identifier of the response\r\n       * @returns {Object|null}\r\n       */\n      getResponseDeclaration: function getResponseDeclaration(runner, identifier) {\n        var found = null;\n        _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\n          var attributes = declaration.attributes || {};\n          if (attributes.identifier === identifier) {\n            found = declaration;\n            return false;\n          }\n        });\n        return found;\n      },\n      /**\r\n       * Convert a value to a response object\r\n       * @param {Array|String} value\r\n       * @param {String} baseType\r\n       * @param {String} cardinality\r\n       * @returns {Object}\r\n       */\n      toResponse: function toResponse(value, baseType, cardinality) {\n        var mappedCardinality = responseCardinalities[cardinality];\n        var response = {};\n        if (_.isString(value) || _.isNumber(value)) {\n          value = [value];\n        }\n        let transform = v => v;\n        if (baseType === 'boolean') {\n          transform = v => v === true || v === 'true';\n        } else if (baseType === 'integer') {\n          transform = v => typeof v === 'number' ? v : parseInt(v);\n        } else if (baseType === 'float') {\n          transform = v => typeof v === 'number' ? v : parseFloat(v);\n        } else if (baseType === 'directedPair' || baseType === 'pair') {\n          transform = v => {\n            if (_.isString(v)) {\n              return v.split(' ');\n            }\n            return v;\n          };\n        }\n        value = _.map(value || [], transform);\n        if (mappedCardinality) {\n          if (mappedCardinality === 'base') {\n            if (value.length === 0) {\n              //return empty response:\n              response.base = null;\n            } else {\n              response.base = {};\n              response.base[baseType] = value[0];\n            }\n          } else {\n            response[mappedCardinality] = {};\n            response[mappedCardinality][baseType] = value;\n          }\n        }\n        return response;\n      },\n      /**\r\n       * Checks if the provided value can be considered as null\r\n       * @param {Object} value\r\n       * @param {String} baseType\r\n       * @param {String} cardinality\r\n       * @returns {boolean}\r\n       */\n      isQtiValueNull: function isQtiValueNull(value, baseType, cardinality) {\n        var mappedCardinality = responseCardinalities[cardinality];\n        if (_.isObject(value) && value[mappedCardinality] === null) {\n          value = null;\n        }\n        if (_.isObject(value) && value[mappedCardinality] && 'undefined' !== typeof value[mappedCardinality][baseType]) {\n          value = value[mappedCardinality][baseType];\n        }\n        const stringyValue = 'string' === baseType || 'integer' === baseType || 'float' === baseType;\n        return null === value || stringyValue && value === '' || cardinality !== 'single' && _.isEmpty(value);\n      },\n      /**\r\n       * Tells if an item question has been answered or not\r\n       * @param {Object} response\r\n       * @param {String} baseType\r\n       * @param {String} cardinality\r\n       * @param {Object} [defaultValue]\r\n       * @param {Object} constraintValue\r\n       * @returns {*}\r\n       */\n      isQuestionAnswered: function isQuestionAnswered(response, baseType, cardinality, defaultValue, constraintValue) {\n        var answered, currentCardinality, responses;\n        var fullyAnswered = true;\n        defaultValue = _.isUndefined(defaultValue) ? null : defaultValue;\n        constraintValue = constraintValue || 0;\n        if (currentItemHelper.isQtiValueNull(response, baseType, cardinality)) {\n          answered = false;\n        } else {\n          answered = !_.isEqual(response, currentItemHelper.toResponse(defaultValue, baseType, cardinality));\n          if (constraintValue !== 0) {\n            currentCardinality = responseCardinalities[cardinality];\n            responses = response[currentCardinality][baseType] || [];\n            fullyAnswered = responses && responses.length >= constraintValue;\n          }\n          answered = answered && fullyAnswered;\n        }\n        return answered;\n      },\n      guessInteractionConstraintValues: function guessInteractionConstraintValues(runner) {\n        var itemRunner = runner.itemRunner;\n        var itemBody = itemRunner._item && itemRunner._item.bdy || {};\n        var interactions = itemBody.elements || {};\n        var constraintValues = {};\n        _.forEach(interactions, function (interaction) {\n          var attributes = interaction.attributes || {};\n          var qtiClass = interaction.__proto__.qtiClass;\n          var constraintProperty;\n          if (Object.prototype.hasOwnProperty.call(interactionMinConstraintProperties, qtiClass)) {\n            constraintProperty = interactionMinConstraintProperties[qtiClass];\n            constraintValues[attributes.responseIdentifier] = attributes[constraintProperty];\n          }\n        });\n        return constraintValues;\n      },\n      /**\r\n       * Tells is the current item has been answered or not\r\n       * The item is considered answered when at least one response has been set to not empty {base : null}\r\n       * @param {Object} runner - testRunner instance\r\n       * @param {Boolean} [partially=true] - if false all questions must have been answered\r\n       * @returns {Boolean}\r\n       */\n      isAnswered: function isAnswered(runner, partially) {\n        var itemRunner = runner.itemRunner;\n        var responses = itemRunner && itemRunner.getResponses();\n        var count = 0;\n        var empty = 0;\n        var declarations, constraintValues;\n        if (itemRunner) {\n          declarations = currentItemHelper.getDeclarations(runner);\n          constraintValues = currentItemHelper.guessInteractionConstraintValues(runner);\n          _.forEach(declarations, function (declaration) {\n            var attributes = declaration.attributes || {};\n            var response = responses[attributes.identifier];\n            var baseType = attributes.baseType;\n            var cardinality = attributes.cardinality;\n            count++;\n            if (!currentItemHelper.isQuestionAnswered(response, baseType, cardinality, declaration.defaultValue, constraintValues[attributes.identifier])) {\n              empty++;\n            }\n          });\n        }\n        if (partially === false) {\n          return count > 0 && empty === 0;\n        }\n        return count > 0 && empty < count;\n      },\n      /**\r\n       * Gets list of shared stimuli hrefs in the current item\r\n       *\r\n       * @param {Object} runner - testRunner instance\r\n       * @returns {Array}\r\n       */\n      getStimuliHrefs: function getStimuliHrefs(runner) {\n        var itemRunner = runner.itemRunner;\n        var itemBody = itemRunner._item && itemRunner._item.bdy || {};\n        var interactions = itemBody.elements || {};\n        return _(interactions).values().filter(function (element) {\n          return element.qtiClass === 'include';\n        }).pluck('attributes').pluck('href').value();\n      },\n      /**\r\n       * Find the list of text stimulus ids in the current item\r\n       * Depends on the DOM already being loaded\r\n       * @param {Object} runner - testRunner instance\r\n       * @returns {Array}\r\n       */\n      getTextStimuliHrefs: function getTextStimuliHrefs(runner) {\n        var stimuli = this.getStimuliHrefs(runner);\n        var textStimuli;\n        if (stimuli.length > 0) {\n          // Filter the ones containing text:\n          textStimuli = stimuli.filter(function (stimulusHref) {\n            var domNode = document.querySelector(`.qti-include[data-href=\"${stimulusHref}\"]`);\n            return _(domNode.childNodes).some(function (child) {\n              return child.nodeType === child.TEXT_NODE;\n            });\n          });\n          return textStimuli;\n        }\n        return [];\n      }\n    };\n\n    return currentItemHelper;\n\n});\n\n","define('taoQtiTest/runner/helpers/stats',['lodash', 'taoQtiTest/runner/helpers/map', 'taoQtiTest/runner/helpers/currentItem'], function (_, mapHelper, currentItemHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    currentItemHelper = currentItemHelper && Object.prototype.hasOwnProperty.call(currentItemHelper, 'default') ? currentItemHelper['default'] : currentItemHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n    var stats = {\n      /**\r\n       * Return scope stats that takes into account any test taker interaction made since the item has been loaded\r\n       * @param {String} scope - scope to consider for calculating the stats\r\n       * @param {Object} runner - testRunner instance\r\n       * @param {Boolean} sync - flag for sync the unanswered stats in exit message and the unanswered stats in the toolbox. Default false\r\n       * @returns {Object} the stats\r\n       */\n      getInstantStats(scope, runner, sync) {\n        const map = runner.getTestMap();\n        const context = runner.getTestContext();\n        const item = runner.getCurrentItem();\n        const testPart = runner.getCurrentPart();\n        const stats = _.clone(mapHelper.getScopeStats(map, context.itemPosition, scope));\n        const options = runner.getOptions() || {};\n        let partiallyAnsweredIsAnswered;\n        if (options.review) {\n          partiallyAnsweredIsAnswered = options.review.partiallyAnsweredIsAnswered;\n        }\n        if (!item.informational) {\n          const isItemCurrentlyAnswered = currentItemHelper.isAnswered(runner, partiallyAnsweredIsAnswered);\n          if (!isItemCurrentlyAnswered && item.answered) {\n            stats.answered--;\n          } else if ((isItemCurrentlyAnswered || sync) && !item.answered) {\n            stats.answered++;\n            // eslint-disable-next-line no-dupe-else-if\n          } else if (sync && !isItemCurrentlyAnswered && item.answered && testPart.isLinear) {\n            stats.answered++;\n          }\n        }\n        return stats;\n      }\n    };\n\n    return stats;\n\n});\n\n","define('taoQtiTest/runner/helpers/messages',['i18n', 'taoQtiTest/runner/helpers/stats', 'handlebars', 'lib/handlebars/helpers'], function (__, statsHelper, Handlebars, Helpers0) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    statsHelper = statsHelper && Object.prototype.hasOwnProperty.call(statsHelper, 'default') ? statsHelper['default'] : statsHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<b>\";\n      if (helper = helpers.header) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.header); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</b><br><br>\";\n      return buffer;\n      }\n\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.header), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { return stack1; }\n      else { return ''; }\n      });\n    function messageHeaderTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Completes an exit message\r\n     * @param {String} scope - scope to consider for calculating the stats\r\n     * @param {Object} runner - testRunner instance\r\n     * @param {String} message - custom message that will be appended to the unanswered stats count\r\n     * @param {Boolean} sync - flag for sync the unanswered stats in exit message and the unanswered stats in the toolbox\r\n     * @param {String|undefined} submitButtonLabel - point the user to the submit button\r\n     * @returns {String} Returns the message text\r\n     */\n    function getExitMessage(scope, runner) {\n      let message = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      let sync = arguments.length > 3 ? arguments[3] : undefined;\n      let submitButtonLabel = arguments.length > 4 ? arguments[4] : undefined;\n      let itemsCountMessage = '';\n      const testRunnerOptions = runner.getOptions();\n      const messageEnabled = testRunnerOptions.enableUnansweredItemsWarning;\n      if (messageEnabled) {\n        itemsCountMessage = getUnansweredItemsWarning(scope, runner, sync).trim();\n        if (itemsCountMessage) {\n          itemsCountMessage += '.';\n        }\n      }\n      return `${getHeader(scope)}${itemsCountMessage} ${getActionMessage(scope, submitButtonLabel)}${message}`.trim();\n    }\n\n    /**\r\n     * Build message if not all items have answers\r\n     * @param {String} scope - scope to consider for calculating the stats\r\n     * @returns {String} Returns the message text\r\n     */\n    function getHeader(scope) {\n      let header = '';\n      if (scope === 'section' || scope === 'testSection') {\n        header = __('You are about to leave this section.');\n      } else if (scope === 'test' || scope === 'testWithoutInaccessibleItems') {\n        header = __('You are about to submit the test.');\n      } else if (scope === 'part') {\n        header = __('You are about to submit this test part.');\n      }\n      return messageHeaderTpl({\n        header: header.trim()\n      });\n    }\n\n    /**\r\n     * Generates the message to help users perform the action\r\n     * @param {String} scope - scope to consider for calculating the stats\r\n     * @param {String} [submitButtonLabel] - Pointed user perform click on given button\r\n     * @returns {String} Returns the message text\r\n     */\n    function getActionMessage(scope) {\n      let submitButtonLabel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : __('OK');\n      var msg;\n      switch (scope) {\n        case 'section':\n        case 'testSection':\n        case 'part':\n          return __('Click \"%s\" to continue.', submitButtonLabel).trim();\n        case 'test':\n        case 'testWithoutInaccessibleItems':\n          msg = __('You will not be able to access this test once submitted. Click \"%s\" to continue and submit the test.', submitButtonLabel);\n          return `${msg}`;\n      }\n      return '';\n    }\n\n    /**\r\n     * Build message for the flagged items if any.\r\n     * @param {Object} stats - The stats for the current context\r\n     * @param {String} [message] - The existing message to complete\r\n     * @returns {string|*}\r\n     */\n    function getFlaggedItemsWarning(stats) {\n      let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      const flaggedCount = stats && stats.flagged;\n      if (!flaggedCount) {\n        return message;\n      }\n      if (message) {\n        return `${message} ${__('and you flagged %s item(s) that you can review now', flaggedCount.toString())}`;\n      }\n      return __('You flagged %s item(s) that you can review now', flaggedCount.toString());\n    }\n\n    /**\r\n     * Build message if not all items have answers\r\n     * @param {String} scope - scope to consider for calculating the stats\r\n     * @param {Object} runner - testRunner instance\r\n     * @param {Boolean} sync - flag for sync the unanswered stats in exit message and the unanswered stats in the toolbox. Default false\r\n     * @returns {String} Returns the message text\r\n     */\n    function getUnansweredItemsWarning(scope, runner, sync) {\n      const stats = statsHelper.getInstantStats(scope, runner, sync);\n      const unansweredCount = stats && stats.questions - stats.answered;\n      const flaggedCount = stats && stats.flagged;\n      let itemsCountMessage = '';\n      if (scope === 'section' || scope === 'testSection') {\n        itemsCountMessage = __('You answered %s of %s question(s) for this section of the test', stats.answered.toString(), stats.questions.toString());\n        if (flaggedCount) {\n          itemsCountMessage += `, ${__('and flagged %s of them', flaggedCount.toString())}`;\n        }\n      } else if (scope === 'test' || scope === 'testWithoutInaccessibleItems') {\n        if (unansweredCount > 1) {\n          itemsCountMessage = __('There are %s unanswered questions', unansweredCount.toString());\n        } else if (unansweredCount === 1) {\n          itemsCountMessage = __('There is %s unanswered question', unansweredCount.toString());\n        }\n        if (flaggedCount) {\n          itemsCountMessage = getFlaggedItemsWarning(stats, itemsCountMessage);\n        }\n      } else if (scope === 'part') {\n        if (unansweredCount > 1) {\n          itemsCountMessage = __('There are %s unanswered questions in this part of the test', unansweredCount.toString());\n        } else if (unansweredCount === 1) {\n          itemsCountMessage = __('There is %s unanswered question in this part of the test', unansweredCount.toString());\n        }\n        if (flaggedCount) {\n          itemsCountMessage = getFlaggedItemsWarning(stats, itemsCountMessage);\n        }\n      }\n      itemsCountMessage = itemsCountMessage.trim();\n      return itemsCountMessage;\n    }\n    var messages = {\n      getExitMessage: getExitMessage\n    };\n\n    return messages;\n\n});\n\n","define('taoQtiTest/runner/config/states',[],function () { 'use strict';\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The possible states\r\n     * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n     */\n    var states = {\n      //the test session states\n      testSession: Object.freeze({\n        initial: 0,\n        interacting: 1,\n        modalFeedback: 2,\n        suspended: 3,\n        closed: 4\n      }),\n      //the item session states\n      itemSession: Object.freeze({\n        initial: 0,\n        interacting: 1,\n        modalFeedback: 2,\n        suspended: 3,\n        closed: 4,\n        solution: 5,\n        notSelected: 255\n      })\n    };\n\n    return states;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/timer/strategy/warnSectionLeaving',['lodash', 'i18n', 'taoQtiTest/runner/helpers/messages', 'taoQtiTest/runner/helpers/navigation', 'taoQtiTest/runner/config/states', 'taoQtiTest/runner/helpers/map'], function (_, __, messages, navigationHelper, states, mapHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    messages = messages && Object.prototype.hasOwnProperty.call(messages, 'default') ? messages['default'] : messages;\n    navigationHelper = navigationHelper && Object.prototype.hasOwnProperty.call(navigationHelper, 'default') ? navigationHelper['default'] : navigationHelper;\n    states = states && Object.prototype.hasOwnProperty.call(states, 'default') ? states['default'] : states;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The message to display when exiting\r\n     */\n    var exitMessage = __('Once you close this section, you cannot return to it or change your answers.');\n\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\n    function warnSectionLeavingStrategy(testRunner, timer) {\n      /**\r\n       * Check if the movment leads to leaving an active timed section\r\n       * @param {String} direction - the move direction (next, previous or jump)\r\n       * @param {String} scope - the move scope (item, section, testPart)\r\n       * @param {Number} [position] - the position in case of jump\r\n       * @returns {Boolean}\r\n       */\n      var leaveTimedSection = function leaveTimedSection(direction, scope, position) {\n        var context = testRunner.getTestContext();\n        var map = testRunner.getTestMap();\n        if (!context.isTimeout && context.itemSessionState !== states.itemSession.closed && context.sectionId === timer.source) {\n          return navigationHelper.isLeavingSection(context, map, direction, scope, position);\n        }\n        return false;\n      };\n      if (timer && timer.scope === 'section' && timer.type === 'max') {\n        return {\n          name: 'warnSectionLeaving',\n          /**\r\n           * setUp entry point : blocks the move to display a message if needed\r\n           */\n          setUp: function setUp() {\n            testRunner.off('move.warntimedsection skip.warntimedsection').before('move.warntimedsection skip.warntimedsection', function (e, type, scope, position) {\n              const testContext = testRunner.getTestContext();\n              const testMap = testRunner.getTestMap();\n              const testRunnerOptions = testRunner.getOptions();\n              const timerConfig = testRunnerOptions.timer || {};\n              const itemIdentifier = testContext.itemIdentifier;\n              const isLast = navigationHelper.isLast(testMap, itemIdentifier);\n              const endTestWarning = mapHelper.hasItemCategory(testMap, itemIdentifier, 'endTestWarning', true);\n              const noExitTimedSectionWarning = mapHelper.hasItemCategory(testMap, itemIdentifier, 'noExitTimedSectionWarning', true);\n              var movePromise = new Promise(function (resolve, reject) {\n                // endTestWarning has already been displayed, so we don't repeat the warning\n                if (isLast && endTestWarning) {\n                  resolve();\n                  // display a message if we exit a timed section\n                } else if (leaveTimedSection(type || 'next', scope, position) && !noExitTimedSectionWarning && !timerConfig.keepUpToTimeout) {\n                  const submitButtonLabel = __('Close this Section');\n                  testRunner.trigger('confirm.exittimed', messages.getExitMessage('section', testRunner, exitMessage, false, submitButtonLabel), resolve, reject, {\n                    buttons: {\n                      labels: {\n                        ok: submitButtonLabel,\n                        cancel: __('Review my Answers')\n                      }\n                    }\n                  });\n                } else {\n                  resolve();\n                }\n              });\n              movePromise.catch(function cancelMove() {\n                // Use `defer` to be sure the timer resume will occur after the move event is\n                // finished to be handled. Otherwise, the duration plugin will be frozen and\n                // the additional time will not be taken into account!\n                _.defer(function () {\n                  testRunner.trigger('enableitem enablenav');\n                });\n              });\n              return movePromise;\n            });\n          },\n          /**\r\n           * complete entry point : removes the listeners\r\n           */\n          complete: function complete() {\n            return this.tearDown();\n          },\n          /**\r\n           * tearDown entry point : removes the listeners\r\n           */\n          tearDown: function tearDown() {\n            testRunner.off('move.warntimedsection skip.warntimedsection');\n          }\n        };\n      }\n      return false;\n    }\n\n    return warnSectionLeavingStrategy;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/timer/strategy/strategyHandler',['lodash', 'taoQtiTest/runner/plugins/controls/timer/strategy/enforcedStay', 'taoQtiTest/runner/plugins/controls/timer/strategy/extraTime', 'taoQtiTest/runner/plugins/controls/timer/strategy/guidedNavigation', 'taoQtiTest/runner/plugins/controls/timer/strategy/timeout', 'taoQtiTest/runner/plugins/controls/timer/strategy/warnSectionLeaving'], function (_, extraTimeStrategy, enforcedStayStrategy, guidedNavigationStrategy, timeoutStrategy, warnSectionLeavingStrategy) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    extraTimeStrategy = extraTimeStrategy && Object.prototype.hasOwnProperty.call(extraTimeStrategy, 'default') ? extraTimeStrategy['default'] : extraTimeStrategy;\n    enforcedStayStrategy = enforcedStayStrategy && Object.prototype.hasOwnProperty.call(enforcedStayStrategy, 'default') ? enforcedStayStrategy['default'] : enforcedStayStrategy;\n    guidedNavigationStrategy = guidedNavigationStrategy && Object.prototype.hasOwnProperty.call(guidedNavigationStrategy, 'default') ? guidedNavigationStrategy['default'] : guidedNavigationStrategy;\n    timeoutStrategy = timeoutStrategy && Object.prototype.hasOwnProperty.call(timeoutStrategy, 'default') ? timeoutStrategy['default'] : timeoutStrategy;\n    warnSectionLeavingStrategy = warnSectionLeavingStrategy && Object.prototype.hasOwnProperty.call(warnSectionLeavingStrategy, 'default') ? warnSectionLeavingStrategy['default'] : warnSectionLeavingStrategy;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The list of available strategies\r\n     * TODO this list could come from the configuration\r\n     */\n    var defaultAvailableStrategies = [extraTimeStrategy, enforcedStayStrategy, guidedNavigationStrategy, timeoutStrategy, warnSectionLeavingStrategy];\n\n    /**\r\n     * Get a strategyHandler object for a testRunner instance\r\n     * @param {runner} testRunner - the test runner instance\r\n     * @param {strategy[]} strategies - the list of available strategies, to override the defaults\r\n     * @returns {strategyHandler} the handler\r\n     */\n    function getStrategyHandler(testRunner, strategies) {\n      var strategyHandler;\n\n      /**\r\n       * To keep track of the active strategies, per timer\r\n       */\n      var actives = {};\n\n      /**\r\n       * Artifact function to apply an action to a list of strategy\r\n       * @param {String} timerId - the id of the timer to run the actions against\r\n       * @param {String} action -\r\n       */\n      var applyToStrategies = function applyToStrategies(timerId, action) {\n        var api = _.keys(strategyHandler);\n        if (_.isEmpty(timerId) || _.isEmpty(action) || !_.contains(api, action)) {\n          throw new TypeError('Invalid timer id or unauthorized action');\n        }\n        if (!_.isArray(actives[timerId])) {\n          return Promise.resolve();\n        }\n        return Promise.all(_.map(actives[timerId], function (strategy) {\n          if (_.isFunction(strategy[action])) {\n            return strategy[action]();\n          }\n        }));\n      };\n      var availableStrategies = strategies || defaultAvailableStrategies;\n\n      //quick validation of the test runner\n      if (!testRunner || !_.isFunction(testRunner.on) || !_.isFunction(testRunner.getTestContext)) {\n        throw new TypeError('The strategy handler needs a valid test runner.');\n      }\n\n      /**\r\n       * @typedef {Object} strategyHandler\r\n       */\n      strategyHandler = {\n        /**\r\n         * Try to set up strategies for the given timer\r\n         * @param {Object} timer\r\n         * @returns {Promise} resolves once the set up is done\r\n         */\n        setUp: function setUp(timer) {\n          _.forEach(availableStrategies, function (availableStrategy) {\n            var strategy = availableStrategy(testRunner, timer);\n            if (strategy !== false) {\n              actives[timer.id] = actives[timer.id] || [];\n              actives[timer.id].push(strategy);\n            }\n          });\n          return applyToStrategies(timer.id, 'setUp');\n        },\n        /**\r\n         * Get the actives strategies for the given timer\r\n         * @returns {strategy[]} the actives strategies\r\n         */\n        getActives: function getActives(timer) {\n          if (timer && timer.id && _.isArray(actives[timer.id])) {\n            return actives[timer.id];\n          }\n          return [];\n        },\n        /**\r\n         * Call the timer's strategies \"start\"\r\n         * @param {Object} timer\r\n         * @returns {Promise}\r\n         */\n        start: function start(timer) {\n          return applyToStrategies(timer.id, 'start');\n        },\n        /**\r\n         * Call the timer's strategies \"stop\"\r\n         * @param {Object} timer\r\n         * @returns {Promise}\r\n         */\n        stop: function stop(timer) {\n          return applyToStrategies(timer.id, 'stop');\n        },\n        /**\r\n         * Call the timer's strategies \"complete\"\r\n         * @param {Object} timer\r\n         * @returns {Promise}\r\n         */\n        complete: function complete(timer) {\n          return applyToStrategies(timer.id, 'complete');\n        },\n        /**\r\n         * Call the timer's strategies \"tearDown\"\r\n         * will also un-reference the strategies\r\n         * @param {Object} timer\r\n         * @returns {Promise}\r\n         */\n        tearDown: function tearDown(timer) {\n          return applyToStrategies(timer.id, 'tearDown').then(function () {\n            actives = _.omit(actives, timer.id);\n          });\n        }\n      };\n      return strategyHandler;\n    }\n\n    return getStrategyHandler;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/timer/timers',['lodash', 'i18n', 'moment', 'core/format', 'core/logger'], function (_, __, moment, format, loggerFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    moment = moment && Object.prototype.hasOwnProperty.call(moment, 'default') ? moment['default'] : moment;\n    format = format && Object.prototype.hasOwnProperty.call(format, 'default') ? format['default'] : format;\n    loggerFactory = loggerFactory && Object.prototype.hasOwnProperty.call(loggerFactory, 'default') ? loggerFactory['default'] : loggerFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n     */\n    var logger = loggerFactory('taoQtiTest/runner/plugins/controls/timer/timers');\n\n    /**\r\n     * We receive values in seconds, so we convert them to milliseconds\r\n     */\n    var precision = 1000;\n\n    /**\r\n     * The timer's scope\r\n     */\n    var scopes = ['item', 'section', 'testPart', 'test'];\n\n    /**\r\n     * Map qti class names to scopes\r\n     */\n    var scopeMapping = {\n      assessmentTest: 'test',\n      assessmentSection: 'section',\n      assessmentItemRef: 'item'\n    };\n\n    /**\r\n     * helps you get the scope from a scope or qti class name\r\n     * @param {String} value - scope or qti class name\r\n     * @returns {String?} the scope\r\n     */\n    var getScope = function getScope(value) {\n      if (scopeMapping[value]) {\n        return scopeMapping[value];\n      }\n      if (_.contains(scopes, value)) {\n        return value;\n      }\n      return null;\n    };\n\n    /**\r\n     * The text of warning messages\r\n     * TODO add warning messages for other timers types\r\n     */\n    var warningMessages = {\n      item: __('Warning – You have %s remaining to complete this item.'),\n      section: __('Warning – You have %s remaining to complete this section.'),\n      testPart: __('Warning – You have %s remaining to complete this test part.'),\n      test: __('Warning – You have %s remaining to complete this test.')\n    };\n\n    /**\r\n     * The text of warning messages for screenreader\r\n     */\n    const warningMessagesForScreenraeder = {\n      item: __('You have %s remaining to complete the current item.'),\n      section: __('You have %s left to answer remaining %s questions.'),\n      testPart: __('You have %s left to answer remaining %s questions.'),\n      test: __('You have %s left to answer remaining %s questions.')\n    };\n\n    /**\r\n     * Get the timers objects from the time constraints andt the given config\r\n     * @param {Object[]} timeConstraints - as defined in the testContext\r\n     * @param {Boolean} isLinear - is the current navigation mode linear\r\n     * @param {Object} [config] - timers config\r\n     * @param {Object[]} [config.warnings] - the warnings to apply to the timers (max only for now)\r\n     * @param {Object[]} [config.warnings] - the warnings to apply to the timers (max only for now)\r\n     * @returns {timer[]} the timers\r\n     */\n    function getTimers(timeConstraints, isLinear, config) {\n      var timers = {};\n\n      /**\r\n       * The warnings comes in a weird format (ie. {scope:{threshold:level}}) , so we reformat them\r\n       */\n      var constraintsWarnings = _.reduce(config.warnings, function (acc, warnings, qtiScope) {\n        var scope = getScope(qtiScope);\n        acc[scope] = _.map(warnings, function (value, key) {\n          return {\n            threshold: parseInt(key, 10) * precision,\n            message: function applyMessage(remainingTime) {\n              var displayRemaining = moment.duration(remainingTime / precision, 'seconds').humanize();\n              return format(warningMessages[scope], displayRemaining);\n            },\n            level: value,\n            shown: false\n          };\n        });\n        return acc;\n      }, {});\n\n      /**\r\n       * The warnings comes in a weird format (ie. {scope:[threshold, ...]}) , so we reformat them\r\n       */\n      const constraintsWarningsForScreenreader = _.reduce(config.warningsForScreenreader, (acc, warnings, qtiScope) => {\n        const scope = getScope(qtiScope);\n        acc[scope] = _.map(warnings, value => ({\n          threshold: parseInt(value, 10) * precision,\n          message: function applyMessage(remainingTime, unansweredQuestions) {\n            const displayRemaining = moment.duration(remainingTime / precision, 'seconds').humanize();\n            return format(warningMessagesForScreenraeder[scope], displayRemaining, unansweredQuestions);\n          },\n          scope,\n          shown: false\n        }));\n        return acc;\n      }, {});\n\n      /**\r\n       * Build a timer of a given type from a time constraints\r\n       * @param {String} type - min, max, locked\r\n       * @param {Object} constraintData\r\n       * @returns {timer} timer\r\n       */\n      var buildTimer = function buildTimer(type, constraintData) {\n        /**\r\n         * @typedef {Object} timer\r\n         * @property {String} id - identify the timer (for max, it's the source for backward compat)\r\n         * @property {String} type - min, max or locked\r\n         * @property {String} label - the title to display\r\n         * @property {String} scope - the timer's scope (item, section, etc.)\r\n         * @property {String} qtiClassName - the QTI class of the timers applies to\r\n         * @property {String} source - the ID of the element the timers belongs to\r\n         * @property {Number} extraTime - additional time data, object\r\n         * @property {Number} originalTime - the starting value of the timer, never changes, in ms.\r\n         * @property {Number} remainingTime - current value, in ms.\r\n         * @property {Number} remainingWithoutExtraTime - remaining time without extra time, in ms.\r\n         * @property {Number} total - total time (original time + extra time), in ms.\r\n         */\n        var timer = _.pick(constraintData, ['label', 'scope', 'source', 'extraTime', 'qtiClassName']);\n        timer.type = type;\n        timer.allowLateSubmission = constraintData.allowLateSubmission;\n        if (type === 'min') {\n          timer.id = `${type}-${constraintData.scope}-${constraintData.source}`;\n          timer.originalTime = constraintData.minTime * precision;\n          timer.remainingTime = constraintData.minTimeRemaining * precision;\n        } else {\n          timer.id = constraintData.source;\n          timer.originalTime = constraintData.maxTime * precision;\n          timer.remainingTime = constraintData.maxTimeRemaining * precision;\n        }\n        timer.remainingWithoutExtraTime = timer.remainingTime;\n        if (timer.extraTime && timer.type !== 'min') {\n          timer.extraTime.consumed = timer.extraTime.consumed * precision;\n          timer.extraTime.remaining = timer.extraTime.remaining * precision;\n          timer.extraTime.total = timer.extraTime.total * precision;\n          timer.total = timer.originalTime + timer.extraTime.total;\n          timer.remainingTime += timer.extraTime.remaining;\n        }\n\n        //TODO supports warnings for other types\n        if (type === 'max' && _.isArray(constraintsWarnings[timer.scope])) {\n          timer.warnings = constraintsWarnings[timer.scope];\n        }\n        if (_.isArray(constraintsWarningsForScreenreader[timer.scope])) {\n          timer.warningsForScreenreader = constraintsWarningsForScreenreader[timer.scope];\n        }\n        const stats = config.questionsStats[timer.scope];\n        timer.unansweredQuestions = stats && stats.questions - stats.answered;\n        return timer;\n      };\n      _.forEach(timeConstraints, function (timeConstraint) {\n        var constraintData = _.clone(timeConstraint);\n        var newTimer;\n        constraintData.scope = getScope(timeConstraint.scope || timeConstraint.qtiClassName);\n        if (!constraintData.scope) {\n          logger.warn('Wrong data, a time constraint should apply to a valid scope, skipping');\n        } else if (constraintData.minTime === false && constraintData.maxTime === false) {\n          logger.warn('Time constraint defined with no time, skipping');\n\n          // minTime = maxTime -> one locked timer\n        } else if (config.guidedNavigation && isLinear && constraintData.maxTime && constraintData.minTime && constraintData.minTime === constraintData.maxTime && constraintData.maxTime > 0) {\n          newTimer = buildTimer('locked', constraintData);\n          timers[newTimer.id] = newTimer;\n        } else {\n          //minTime -> min timer\n          if (isLinear && constraintData.minTime && constraintData.minTime > 0) {\n            newTimer = buildTimer('min', constraintData);\n            timers[newTimer.id] = newTimer;\n          }\n\n          //maxTime -> max timer\n          if (constraintData.maxTime && constraintData.maxTime > 0) {\n            newTimer = buildTimer('max', constraintData);\n            timers[newTimer.id] = newTimer;\n          }\n        }\n      });\n      logger.debug('Timers built from timeConstraints', timers);\n      return timers;\n    }\n\n    return getTimers;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/timer/plugin',['jquery', 'lodash', 'taoTests/runner/plugin', 'taoQtiTest/runner/plugins/controls/timer/strategy/strategyHandler', 'taoQtiTest/runner/plugins/controls/timer/component/timerbox', 'taoQtiTest/runner/plugins/controls/timer/timers', 'taoQtiTest/runner/helpers/isReviewPanelEnabled', 'taoQtiTest/runner/helpers/stats', 'handlebars', 'lib/handlebars/helpers'], function ($$1, _, pluginFactory, getStrategyHandler, timerboxFactory, timersFactory, isReviewPanelEnabled, statsHelper, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    getStrategyHandler = getStrategyHandler && Object.prototype.hasOwnProperty.call(getStrategyHandler, 'default') ? getStrategyHandler['default'] : getStrategyHandler;\n    timerboxFactory = timerboxFactory && Object.prototype.hasOwnProperty.call(timerboxFactory, 'default') ? timerboxFactory['default'] : timerboxFactory;\n    timersFactory = timersFactory && Object.prototype.hasOwnProperty.call(timersFactory, 'default') ? timersFactory['default'] : timersFactory;\n    isReviewPanelEnabled = isReviewPanelEnabled && Object.prototype.hasOwnProperty.call(isReviewPanelEnabled, 'default') ? isReviewPanelEnabled['default'] : isReviewPanelEnabled;\n    statsHelper = statsHelper && Object.prototype.hasOwnProperty.call(statsHelper, 'default') ? statsHelper['default'] : statsHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers);  \n\n\n      return \"<div aria-live=\\\"polite\\\" class=\\\"visible-hidden\\\"></div>\\r\\n\";\n      });\n    function screenreaderNotificationTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2018-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    // timeout after which screenreader notifcation should be cleaned up\n    const screenreaderNotificationTimeout = 20000;\n\n    /**\r\n     * Creates the plugin\r\n     */\n    var plugin = pluginFactory({\n      name: 'timer',\n      /**\r\n       * Install step, add behavior before the lifecycle\r\n       */\n      install() {\n        const testRunner = this.getTestRunner();\n\n        /**\r\n         * Load the timers, from the given timeConstraints and reading the current value in the store\r\n         * @param {store} timeStore - where the values are read\r\n         * @param {Object} config - the current config, especially for the warnings\r\n         * @returns {Promise<Object[]>} the list of timers for the current context\r\n         */\n        this.loadTimers = function loadTimers(timeStore, config) {\n          const testContext = testRunner.getTestContext();\n          const testPart = testRunner.getCurrentPart();\n          const isLinear = testPart && testPart.isLinear;\n          const timeConstraints = testContext.timeConstraints;\n          const timers = timersFactory(timeConstraints, isLinear, config);\n          return Promise.all(_.map(timers, function (timer) {\n            return timeStore.getItem(`consumed_${timer.id}`).then(function (savedConsumedTime) {\n              if (_.isNumber(savedConsumedTime) && savedConsumedTime >= 0 && config.restoreTimerFromClient) {\n                timer.remainingTime = timer.originalTime + timer.extraTime.total - savedConsumedTime;\n              }\n            });\n          })).then(function () {\n            return timers;\n          });\n        };\n\n        /**\r\n         * Save consumed time values into the store\r\n         * @param {store} timeStore - where the values are saved\r\n         * @param {Object[]} timers - the timers to save\r\n         * @returns {Promise} resolves once saved\r\n         */\n        this.saveTimers = function saveTimers(timeStore, timers) {\n          return Promise.all(_.map(timers, function (timer) {\n            return timeStore.setItem(`consumed_${timer.id}`, timer.originalTime + timer.extraTime.total - timer.remainingTime);\n          }));\n        };\n\n        //define the \"timer\" store as \"volatile\" (removed on browser change).\n        testRunner.getTestStore().setVolatile(this.getName());\n      },\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       *\r\n       * @returns {Promise}\r\n       */\n      init: function init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        let screenreaderNotifcationTimeoutId;\n        const stats = {};\n        ['test', 'testPart', 'section', 'item'].forEach(scope => Object.assign(stats, {\n          [scope]: statsHelper.getInstantStats(scope, testRunner)\n        }));\n\n        /**\r\n         * Plugin config,\r\n         */\n        const config = Object.assign({\n          /**\r\n           * An option to control is the warnings are contextual or global\r\n           */\n          contextualWarnings: false,\n          /**\r\n           * The list of configured warnings\r\n           */\n          warnings: testRunnerOptions.timerWarning || {},\n          /**\r\n           * The list of configured warnings for screenreaders\r\n           */\n          warningsForScreenreader: testRunnerOptions.timerWarningForScreenreader || {},\n          /**\r\n           * The guided navigation option\r\n           */\n          guidedNavigation: testRunnerOptions.guidedNavigation,\n          /**\r\n           * Restore timer from client.\r\n           */\n          restoreTimerFromClient: testRunnerOptions.timer && testRunnerOptions.timer.restoreTimerFromClient,\n          /**\r\n           * Questions stats\r\n           */\n          questionsStats: stats\n        }, this.getConfig());\n\n        /**\r\n         * Set up the strategy handler\r\n         */\n        const strategyHandler = getStrategyHandler(testRunner);\n\n        /**\r\n         * dispatch errors to the test runner\r\n         * @param {Error} err - to dispatch\r\n         */\n        const handleError = err => {\n          testRunner.trigger('error', err);\n        };\n        function loadSavedTimers(timeStore) {\n          const testContext = testRunner.getTestContext();\n          //update the timers before each item\n          if (self.timerbox && testContext.timeConstraints) {\n            return self.loadTimers(timeStore, config).then(function (timers) {\n              return self.timerbox.update(timers);\n            }).catch(handleError);\n          }\n        }\n        return new Promise(function (resolve) {\n          //load the plugin store\n          return testRunner.getPluginStore(self.getName()).then(function (timeStore) {\n            testRunner.before('renderitem', function () {\n              return loadSavedTimers(timeStore);\n            }).before('enableitem', function () {\n              if (config.restoreTimerFromClient) {\n                return loadSavedTimers(timeStore);\n              }\n            }).on('tick', function (elapsed) {\n              if (self.timerbox) {\n                const timers = self.timerbox.getTimers();\n                const updatedTimers = Object.keys(timers).reduce((acc, timerName) => {\n                  const statsScope = statsHelper.getInstantStats(timers[timerName].scope, testRunner);\n                  const unansweredQuestions = statsScope && statsScope.questions - statsScope.answered;\n                  acc[timerName] = Object.assign({}, timers[timerName], {\n                    remainingTime: timers[timerName].remainingTime - elapsed,\n                    unansweredQuestions\n                  });\n                  return acc;\n                }, {});\n                self.timerbox.update(updatedTimers).catch(handleError);\n              }\n            }).after('renderitem', function () {\n              if (self.timerbox) {\n                $$1(self.timerbox.getElement()).find('.timer-wrapper').attr('aria-hidden', isReviewPanelEnabled(testRunner));\n                self.timerbox.start();\n              }\n              self.$screenreaderWarningContainer.text('');\n            }).after('enableitem', function () {\n              if (self.timerbox && config.restoreTimerFromClient) {\n                //this will \"resume\" the countdowns if timers have client mode\n                self.timerbox.start();\n              }\n            }).on('move skip', function () {\n              if (self.timerbox) {\n                //this will \"pause\" the countdowns\n                self.timerbox.stop();\n              }\n            }).on('disableitem', function () {\n              if (self.timerbox && config.restoreTimerFromClient) {\n                //this will \"pause\" the countdowns if timers have client mode\n                self.timerbox.stop();\n              }\n            });\n            timeStore.getItem('zen-mode').then(function (startZen) {\n              //set up the timerbox\n              self.timerbox = timerboxFactory({\n                ariaHidden: isReviewPanelEnabled(testRunner),\n                zenMode: {\n                  enabled: true,\n                  startHidden: !!startZen\n                },\n                displayWarning: config.contextualWarnings\n              }).on('change', _.throttle(function () {\n                //update the store with the current timer values\n                self.saveTimers(timeStore, this.getTimers());\n              }, 1000)).on('timeradd', function (timer) {\n                strategyHandler.setUp(timer).catch(handleError);\n              }).on('timerremove', function (timer) {\n                strategyHandler.tearDown(timer).catch(handleError);\n              }).on('timerstart', function (timer) {\n                strategyHandler.start(timer).catch(handleError);\n              }).on('timerstop', function (timer) {\n                strategyHandler.stop(timer).catch(handleError);\n              }).on('timerend', function (timer) {\n                strategyHandler.complete(timer).catch(handleError);\n              }).on('timerchange', function (action, timer) {\n                //backward compatible events\n                self.trigger(`${action}timer`, timer.qtiClassName, timer);\n              }).on('zenchange', function (isZen) {\n                timeStore.setItem('zen-mode', !!isZen);\n              }).on('init', resolve).on('error', handleError);\n\n              // share this timer values to use in other components\n              self.timerbox.spread(testRunner, 'timertick');\n              if (!config.contextualWarnings) {\n                self.timerbox.on('warn', function (message, level) {\n                  if (level && message) {\n                    testRunner.trigger(level, message);\n                  }\n                });\n\n                // debounce used to prevent multiple invoking at the same time\n                self.timerbox.on('warnscreenreader', _.debounce((message, remainingTime, scope) => {\n                  const statsScope = statsHelper.getInstantStats(scope, testRunner);\n                  const unansweredQuestions = statsScope && statsScope.questions - statsScope.answered;\n                  if (screenreaderNotifcationTimeoutId) {\n                    clearTimeout(screenreaderNotifcationTimeoutId);\n                  }\n                  self.$screenreaderWarningContainer.text(message(remainingTime, unansweredQuestions));\n                  screenreaderNotifcationTimeoutId = setTimeout(() => self.$screenreaderWarningContainer.text(''), screenreaderNotificationTimeout);\n                }, 1000, {\n                  'leading': true,\n                  'trailing': false\n                }));\n              }\n            }).catch(handleError);\n          });\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        const $container = this.getAreaBroker().getControlArea();\n        this.$screenreaderWarningContainer = $$1(screenreaderNotificationTpl());\n        this.timerbox.render($container);\n        $container.append(this.$screenreaderWarningContainer);\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        if (this.timerbox) {\n          this.timerbox.stop().destroy();\n        }\n      },\n      /**\r\n       * Shows the timers\r\n       */\n      show: function show() {\n        if (this.timerbox) {\n          this.timerbox.show();\n        }\n      },\n      /**\r\n       * Hides the timers\r\n       */\n      hide: function hide() {\n        if (this.timerbox) {\n          this.timerbox.hide();\n        }\n      }\n    });\n\n    return plugin;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/title/title',['jquery', 'lodash', 'taoTests/runner/plugin', 'handlebars', 'lib/handlebars/helpers', 'taoQtiTest/runner/helpers/map', 'taoQtiTest/runner/helpers/getTimerMessage', 'moment', 'taoQtiTest/runner/helpers/stats'], function ($$1, _, pluginFactory, Handlebars, Helpers0, mapHelper, getTimerMessage, moment, statsHelper) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    getTimerMessage = getTimerMessage && Object.prototype.hasOwnProperty.call(getTimerMessage, 'default') ? getTimerMessage['default'] : getTimerMessage;\n    moment = moment && Object.prototype.hasOwnProperty.call(moment, 'default') ? moment['default'] : moment;\n    statsHelper = statsHelper && Object.prototype.hasOwnProperty.call(statsHelper, 'default') ? statsHelper['default'] : statsHelper;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"\\r\\n        <span data-control=\\\"\";\n      if (helper = helpers.attribute) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.attribute); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" class=\\\"qti-controls \";\n      if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"></span>\\r\\n        <div data-control=\\\"\";\n      if (helper = helpers.attribute) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.attribute); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"-timer\\\" class=\\\"visible-hidden\\\"></div>\\r\\n    \";\n      return buffer;\n      }\n\n      buffer += \"<div role=\\\"heading\\\" aria-level=\\\"1\\\" class=\\\"title-box truncate\\\">\\r\\n    \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.titles), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function titleTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n    const precision = 1000;\n    var title = pluginFactory({\n      name: 'title',\n      init: function init() {\n        const testRunner = this.getTestRunner();\n        const testMap = testRunner.getTestMap();\n        const updateTitles = () => {\n          const testContext = testRunner.getTestContext();\n          const currentPart = mapHelper.getItemPart(testMap, testContext.itemPosition);\n          const currentItem = mapHelper.getItem(testMap, testContext.itemIdentifier);\n\n          // update test title\n          if (testMap.title) {\n            this.titles.test.$title.text(testMap.title).show();\n          }\n\n          // update part title\n          if (currentPart && currentPart.label) {\n            this.titles.testPart.$title.text(` - ${currentPart.label}`).show();\n          }\n\n          // update section title\n          //@deprecated the following block seems to\n          //be very specific and need to be reworked\n          if (testContext.isDeepestSectionVisible) {\n            const section = mapHelper.getItemSection(testMap, testContext.itemPosition);\n\n            //testContext.sectionTitle is kept only for backward compat\n            this.titles.section.$title.text(` - ${section.label || testContext.sectionTitle}`).show();\n          }\n\n          // update item title\n          if (currentItem.label) {\n            this.titles.item.$title.text(` - ${currentItem.label}`).show();\n          }\n        };\n        testRunner.after('renderitem', () => {\n          _.forOwn(this.titles, (options, scope) => {\n            this.titles[scope].$title.text('');\n            this.titles[scope].$timer.text('');\n            if (scope !== 'item') {\n              this.titles[scope].stats = statsHelper.getInstantStats(scope, testRunner);\n            }\n          });\n          updateTitles();\n        }).on('timertick', (remainingTime, scope) => {\n          const title = this.titles[scope];\n          if (!title) {\n            return;\n          }\n          const {\n            $timer,\n            stats\n          } = this.titles[scope];\n          const time = moment.duration(remainingTime / precision, 'seconds');\n          const hours = time.get('hours');\n          const minutes = time.get('minutes');\n          const seconds = time.get('seconds');\n          const unansweredQuestions = stats && stats.questions - stats.answered;\n\n          // check if notification should be updated\n          if ($timer) {\n            $timer.text(getTimerMessage(hours, minutes, seconds, unansweredQuestions));\n          }\n        }).on('unloaditem', () => {\n          $$1('.qti-controls', this.$element).hide();\n        });\n      },\n      render: function render() {\n        const $container = this.getAreaBroker().getControlArea();\n        this.titles = {\n          test: {\n            attribute: 'qti-test-title',\n            className: ''\n          },\n          testPart: {\n            attribute: 'qti-test-part-title',\n            className: 'visible-hidden'\n          },\n          section: {\n            attribute: 'qti-test-position',\n            className: ''\n          },\n          item: {\n            attribute: 'qti-test-item-title',\n            className: 'visible-hidden'\n          }\n        };\n        this.$element = $$1(titleTpl({\n          titles: _.values(this.titles)\n        }));\n\n        // hide titles by default\n        $$1('.qti-controls', this.$element).hide();\n        $container.append(this.$element);\n        _.forOwn(this.titles, (_ref, scope) => {\n          let {\n            attribute\n          } = _ref;\n          this.titles[scope].$title = $container.find(`[data-control=\"${attribute}\"]`);\n          this.titles[scope].$timer = $container.find(`[data-control=\"${attribute}-timer\"]`);\n        });\n      }\n    });\n\n    return title;\n\n});\n\n","define('taoQtiTest/runner/plugins/controls/trace/itemTraceVariables',['lodash', 'moment', 'taoTests/runner/plugin'], function (_, moment, pluginFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    moment = moment && Object.prototype.hasOwnProperty.call(moment, 'default') ? moment['default'] : moment;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Duration of a second in the timer's base unit\r\n     * @type {Number}\r\n     */\n    var precision = 1000;\n\n    /**\r\n     * Gets the current timestamp\r\n     * @returns {Number}\r\n     */\n    function timestamp() {\n      return Date.now() / precision;\n    }\n\n    /**\r\n     * Creates the timer plugin\r\n     */\n    var itemTraceVariables = pluginFactory({\n      name: 'itemTraceVariables',\n      /**\r\n       * Install step, add behavior before the lifecycle.\r\n       */\n      install: function install() {\n        //define the \"trace\" store as \"volatile\" (removed on browser change).\n        // the store name is \"trace\" for backward compatibility,\n        // best practice is to use the plugin name\n        this.getTestRunner().getTestStore().setVolatile('trace');\n      },\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var testRunner = this.getTestRunner();\n        var variables = {};\n        function onError(err) {\n          testRunner.trigger('error', err);\n        }\n        return testRunner.getPluginStore('trace').then(function (tracesStore) {\n          testRunner.after('renderitem enableitem', function () {\n            var context = testRunner.getTestContext();\n            variables = {\n              ITEM_START_TIME_CLIENT: timestamp()\n            };\n            tracesStore.getItem(context.itemIdentifier).then(function (data) {\n              if (data) {\n                _.merge(variables, data);\n              }\n              return tracesStore.setItem(context.itemIdentifier, variables);\n            }).catch(onError);\n          }).before('move skip exit timeout', function () {\n            var context = testRunner.getTestContext();\n            variables.ITEM_END_TIME_CLIENT = timestamp();\n            variables.ITEM_TIMEZONE = moment().utcOffset(moment().utcOffset()).format('Z');\n            return tracesStore.setItem(context.itemIdentifier, variables).catch(onError);\n          }).before('unloaditem', function () {\n            var context = testRunner.getTestContext();\n            return testRunner.getProxy().callItemAction(context.itemIdentifier, 'storeTraceData', {\n              traceData: JSON.stringify(variables)\n            }, true);\n          });\n        });\n      }\n    });\n\n    return itemTraceVariables;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/allowSkipping',['lodash', 'i18n', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/currentItem'], function (_, __, pluginFactory, currentItemHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    currentItemHelper = currentItemHelper && Object.prototype.hasOwnProperty.call(currentItemHelper, 'default') ? currentItemHelper['default'] : currentItemHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2017-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Default plugin options\r\n     * @type {Object}\r\n     */\n    var defaults = {\n      allowPartial: true // whether all interactions must be answered to count an item as answered\n    };\n\n    /**\r\n     * Plugin factory\r\n     * @returns {Object}\r\n     */\n    var allowSkipping = pluginFactory({\n      /**\r\n       * Plugin name\r\n       * @type {String}\r\n       */\n      name: 'allowSkipping',\n      /**\r\n       * Initialize plugin (called during runner's initialization)\r\n       * @returns {this}\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginConfig = Object.assign({}, defaults, this.getConfig());\n        testRunner.before('nav-next move', () => {\n          const testContext = testRunner.getTestContext();\n          const isInteracting = !testRunner.getItemState(testContext.itemIdentifier, 'disabled');\n          const warning = pluginConfig.allowPartial ? __('A response to this item is required.') : __('A response to every question in this item is required.');\n          if (isInteracting && testRunnerOptions.enableAllowSkipping) {\n            const currenItem = testRunner.getCurrentItem();\n            //@deprecated use allowSkipping from testMap instead of the testContext\n            const allowSkipping = typeof currenItem.allowSkipping === 'boolean' ? currenItem.allowSkipping : testContext.allowSkipping;\n            if (!allowSkipping) {\n              return new Promise((resolve, reject) => {\n                if (_.size(currentItemHelper.getDeclarations(testRunner)) === 0) {\n                  return resolve();\n                }\n                if (currentItemHelper.isAnswered(testRunner, pluginConfig.allowPartial)) {\n                  return resolve();\n                }\n                if (!testRunner.getState('alerted.notallowed')) {\n                  // Only show one alert for itemSessionControl\n\n                  testRunner.setState('alerted.notallowed', true);\n                  testRunner.trigger('alert.notallowed', warning, () => {\n                    testRunner.trigger('resumeitem');\n                    reject();\n                    testRunner.setState('alerted.notallowed', false);\n                  });\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n\n    return allowSkipping;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',[],function () { 'use strict';\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * This is a helper for navigation plugins. It decides if a warning should be displayed\r\n     * before actually moving to the next item\r\n     *\r\n     * @author Christophe Noël <christophe@taotesting.com>\r\n     */\n\n    /**\r\n     * Convert a value to a boolean\r\n     * @param {*} value\r\n     * @param {Boolean} defaultValue\r\n     * @returns {Boolean}\r\n     */\n    var toBoolean = function toBoolean(value, defaultValue) {\n      if (typeof value === 'undefined') {\n        return defaultValue;\n      } else {\n        return value === true || value === 'true';\n      }\n    };\n\n    /**\r\n     * @param {Object} options\r\n     * @param {Boolean} options.endTestWarning - enables the end test warning, when applicable\r\n     * @param {Boolean} options.isLast - if the item is the last of the test\r\n     * @param {Boolean} options.isLinear - if the current part is linear\r\n     * @param {Boolean} options.nextItemWarning - enables the next item warning, when applicable\r\n     * @param {Boolean} options.nextPartWarning - enables the next item warning on part change\r\n     * @param {Boolean} options.stats - current state of the test\r\n     * @param {Object} options.nextPart - description of the next part of the test\r\n     * @param {Number} options.remainingAttempts - remaining attempts for the current item\r\n     * @param {String} options.testPartId - current test part identifier\r\n     * @param {Boolean} options.unansweredOnly - warn only if there are unanswered/flagged items\r\n     * @returns {Object}\r\n     */\n    var nextWarningHelper = function nextWarningHelper(options) {\n      var endTestWarning = toBoolean(options.endTestWarning, false),\n        isLast = toBoolean(options.isLast, false),\n        isLinear = toBoolean(options.isLinear, false),\n        nextItemWarning = toBoolean(options.nextItemWarning, false),\n        nextPartWarning = toBoolean(options.nextPartWarning, false),\n        stats = options.stats,\n        nextPart = options.nextPart || {},\n        remainingAttempts = typeof options.remainingAttempts === 'undefined' ? -1 : options.remainingAttempts,\n        testPartId = options.testPartId || '',\n        unansweredOnly = toBoolean(options.unansweredOnly, false),\n        warnBeforeNext = shouldWarnBeforeNext(),\n        warnBeforeEnd = shouldWarnBeforeEnd(),\n        warnBeforeEndPart = shouldWarnBeforeEndPart();\n\n      /**\r\n       * Decide if we should display a warning before moving to the next item.\r\n       * This is useful to prevent accidental navigation (for example by pressing a shortcut) that would occur\r\n       * before the test taker actually gets a chance to answer an item\r\n       */\n      function shouldWarnBeforeNext() {\n        return nextItemWarning && !itemCanBeTriedAtWill();\n        //&& !exitTimedSectionWarning(); //todo: this should be implemented to prevent a double warning!\n      }\n\n      /**\r\n       * We try to decide if the test taker has the freedom to come back to this item as many times as he wants\r\n       */\n      function itemCanBeTriedAtWill() {\n        return isLast === false &&\n        // the test is not over\n        isLinear === false &&\n        // the context is not linear\n        remainingAttempts === -1 &&\n        // the item doesn't have a configured max attempts number\n        !isNextItemInLinearPart() // the next item is not in a linear part\n        ;\n      }\n\n      /**\r\n       * Check if the next item is in a linear part, as this would prevent the test taker to come back to the current item\r\n       */\n      function isNextItemInLinearPart() {\n        return nextPart && typeof nextPart.isLinear !== 'undefined' && isLastOfPart() && nextPart.isLinear === true;\n      }\n\n      /**\r\n       * Decide if we should display a warning before ending the test\r\n       */\n      function shouldWarnBeforeEnd() {\n        return shouldWarnOnTestEnd();\n      }\n\n      /**\r\n       * Decide if we should display a warning before ending the test part\r\n       */\n      function shouldWarnBeforeEndPart() {\n        return shouldWarnOnPartChange();\n      }\n\n      /**\r\n       * Are we on the last test item?\r\n       * @returns {Boolean}\r\n       */\n      function shouldWarnOnTestEnd() {\n        return isLast && (endTestWarning ||\n        // warning is explicitly required by endTestWarning category\n        warnBeforeNext) &&\n        // warning is implicitly triggered by the next item warning being true (prevent double warning)\n        shouldWarnForUnansweredItems();\n      }\n\n      /**\r\n       * Provide the opportunity to cancel the display of the warning if there are no unanswered/flagged item\r\n       * for this to work, the unansweredOnly option has to be set\r\n       * @returns {Boolean}\r\n       */\n      function shouldWarnForUnansweredItems() {\n        var hasUnanswered = stats && stats.questions - stats.answered !== 0,\n          hasFlagged = stats && stats.flagged !== 0;\n        if (unansweredOnly) {\n          return hasUnanswered || hasFlagged;\n        } else {\n          return true;\n        }\n      }\n\n      /**\r\n       * Are we on the last part item?\r\n       * @returns {Boolean}\r\n       */\n      function shouldWarnOnPartChange() {\n        return nextPartWarning && isLastOfPart() && shouldWarnForUnansweredItems();\n      }\n\n      /**\r\n       * Check if the next item belong to a different part\r\n       * @returns {Boolean}\r\n       */\n      function isLastOfPart() {\n        return nextPart && nextPart.id && testPartId !== nextPart.id;\n      }\n\n      /**\r\n       * The helper object\r\n       */\n      return {\n        shouldWarnBeforeEndPart: function () {\n          return warnBeforeEndPart;\n        },\n        shouldWarnBeforeEnd: function () {\n          return warnBeforeEnd;\n        },\n        shouldWarnBeforeNext: function () {\n          return warnBeforeNext;\n        }\n      };\n    };\n\n    return nextWarningHelper;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/next',['jquery', 'i18n', 'ui/hider', 'taoTests/runner/plugin', 'taoQtiTest/runner/plugins/navigation/next/nextWarningHelper', 'taoQtiTest/runner/helpers/messages', 'taoQtiTest/runner/helpers/map', 'taoQtiTest/runner/helpers/navigation', 'taoQtiTest/runner/helpers/stats', 'util/shortcut', 'util/namespace', 'handlebars', 'lib/handlebars/helpers'], function ($$1, __, hider, pluginFactory, nextWarningHelper, messages, mapHelper, navigationHelper, statsHelper, shortcut, namespaceHelper, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    hider = hider && Object.prototype.hasOwnProperty.call(hider, 'default') ? hider['default'] : hider;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    nextWarningHelper = nextWarningHelper && Object.prototype.hasOwnProperty.call(nextWarningHelper, 'default') ? nextWarningHelper['default'] : nextWarningHelper;\n    messages = messages && Object.prototype.hasOwnProperty.call(messages, 'default') ? messages['default'] : messages;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    navigationHelper = navigationHelper && Object.prototype.hasOwnProperty.call(navigationHelper, 'default') ? navigationHelper['default'] : navigationHelper;\n    statsHelper = statsHelper && Object.prototype.hasOwnProperty.call(statsHelper, 'default') ? statsHelper['default'] : statsHelper;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \" \";\n      if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \"\", stack1;\n      buffer += \"\\r\\n        aria-\"\n        + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n        + \"=\\\"\"\n        + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))\n        + \"\\\"\\r\\n    \";\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"icon icon-\";\n      if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"></span>\";\n      return buffer;\n      }\n    function program6(depth0,data) {\n      \n      \n      return \" no-label\";\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"text\\\">\";\n      if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\";\n      return buffer;\n      }\n\n      buffer += \"<li\\r\\n    data-control=\\\"\";\n      if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    class=\\\"small btn-info action\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"\\r\\n    title=\\\"\";\n      if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    role=\\\"button\\\"\\r\\n    \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.aria), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n>\\r\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\" onclick=\\\"return false\\\" aria-hidden=\\\"true\\\" >\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n    </a>\\r\\n</li>\\r\\n\";\n      return buffer;\n      });\n    function buttonTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The display of the next button\r\n     */\n    const buttonData = {\n      next: {\n        control: 'move-forward',\n        title: __('Submit and go to the next item'),\n        specificTitle: __('Submit and go to the item %s'),\n        icon: 'forward',\n        text: __('Next')\n      },\n      end: {\n        control: 'move-end',\n        title: __('Submit and go to the end of the test'),\n        icon: 'fast-forward',\n        text: __('End test')\n      }\n    };\n\n    /**\r\n     * Create the button based on the current context\r\n     * @param {Boolean} [isLast=false] - is the current item the last\r\n     * @returns {jQueryElement} the button\r\n     */\n    const createElement = function () {\n      let isLast = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      const dataType = isLast ? 'end' : 'next';\n      return $$1(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\r\n     * Makes an element enabled\r\n     * @param  {jQuery} $element\r\n     * @returns {jQuery}\r\n     */\n    const enableElement = $element => $element.removeProp('disabled').removeClass('disabled');\n\n    /**\r\n     * Makes an element disabled\r\n     * @param  {jQuery} $element\r\n     * @returns {jQuery}\r\n     */\n    const disableElement = $element => $element.prop('disabled', true).addClass('disabled');\n\n    /**\r\n     * Update the button based on the context\r\n     * @param {jQueryElement} $element - the element to update\r\n     * @param {TestRunner} [testRunner] - the test runner instance\r\n     * @param {Boolean} [isLast=false] - is the current item the last\r\n     */\n    const updateElement = function ($element, testRunner) {\n      let isLast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      const dataType = isLast ? 'end' : 'next';\n      const testContext = testRunner.getTestContext();\n      if (dataType === 'next' && !testContext.isAdaptive && !testContext.isCatAdaptive) {\n        const testMap = testRunner.getTestMap();\n        const nextItem = navigationHelper.getNextItem(testMap, testContext.itemPosition);\n        $element.attr('title', __(buttonData.next.specificTitle, nextItem.label));\n      } else {\n        $element.attr('title', buttonData[dataType].title);\n      }\n      if ($element.attr('data-control') !== buttonData[dataType].control) {\n        $element.attr('data-control', buttonData[dataType].control).find('.text').text(buttonData[dataType].text);\n        if (dataType === 'next') {\n          $element.find(`.icon-${buttonData.end.icon}`).removeClass(`icon-${buttonData.end.icon}`).addClass(`icon-${buttonData.next.icon}`);\n        } else {\n          $element.find(`.icon-${buttonData.next.icon}`).removeClass(`icon-${buttonData.next.icon}`).addClass(`icon-${buttonData.end.icon}`);\n        }\n      }\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var next = pluginFactory({\n      name: 'next',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n\n        /**\r\n         * Check if the current item is the last item\r\n         * @returns {Boolean} true if the last\r\n         */\n        const isLastItem = () => {\n          const testContext = testRunner.getTestContext();\n          const testMap = testRunner.getTestMap();\n          const itemIdentifier = testContext.itemIdentifier;\n          return navigationHelper.isLast(testMap, itemIdentifier);\n        };\n\n        //plugin behavior\n        /**\r\n         * @param {Boolean} nextItemWarning - enable the display of a warning when going to the next item.\r\n         * Note: the actual display of the warning depends on other conditions (see nextWarningHelper)\r\n         */\n        const doNext = nextItemWarning => {\n          const testContext = testRunner.getTestContext();\n          const testMap = testRunner.getTestMap();\n          const testPart = testRunner.getCurrentPart();\n          const nextItemPosition = testContext.itemPosition + 1;\n          const itemIdentifier = testContext.itemIdentifier;\n\n          // x-tao-option-unansweredWarning is a deprecated option whose behavior now matches the one of\n          const unansweredWarning = mapHelper.hasItemCategory(testMap, itemIdentifier, 'unansweredWarning', true);\n\n          // x-tao-option-nextPartWarning with the unansweredOnly option\n          const nextPartWarning = mapHelper.hasItemCategory(testMap, itemIdentifier, 'nextPartWarning', true) || unansweredWarning;\n          const endTestWarning = mapHelper.hasItemCategory(testMap, itemIdentifier, 'endTestWarning', true);\n\n          // this check to avoid an edge case where having both endTestWarning\n          // and unansweredWarning options would prevent endTestWarning to behave normally\n          const unansweredOnly = !endTestWarning && unansweredWarning;\n          const warningScope = nextPartWarning ? 'part' : 'test';\n          const enableNav = () => testRunner.trigger('enablenav');\n          const triggerNextAction = () => {\n            if (isLastItem()) {\n              this.trigger('end');\n            }\n            testRunner.next();\n          };\n          testRunner.trigger('disablenav');\n          if (this.getState('enabled') !== false) {\n            const warningHelper = nextWarningHelper({\n              endTestWarning: endTestWarning,\n              isLast: isLastItem(),\n              isLinear: testPart.isLinear,\n              nextItemWarning: nextItemWarning,\n              nextPartWarning: nextPartWarning,\n              nextPart: mapHelper.getItemPart(testMap, nextItemPosition),\n              remainingAttempts: testContext.remainingAttempts,\n              testPartId: testContext.testPartId,\n              unansweredWarning: unansweredWarning,\n              stats: statsHelper.getInstantStats(warningScope, testRunner),\n              unansweredOnly: unansweredOnly\n            });\n            if (warningHelper.shouldWarnBeforeEndPart()) {\n              const submitButtonLabel = __('SUBMIT THIS PART');\n              testRunner.trigger('confirm.endTestPart', messages.getExitMessage(warningScope, testRunner, '', false, submitButtonLabel), triggerNextAction,\n              // if the test taker accept\n              enableNav,\n              // if he refuse\n              {\n                buttons: {\n                  labels: {\n                    ok: submitButtonLabel,\n                    cancel: __('CANCEL')\n                  }\n                }\n              });\n            } else if (warningHelper.shouldWarnBeforeEnd()) {\n              const submitButtonLabel = __('SUBMIT THE TEST');\n              testRunner.trigger('confirm.endTest', messages.getExitMessage(warningScope, testRunner, '', false, submitButtonLabel), triggerNextAction,\n              // if the test taker accept\n              enableNav,\n              // if he refuse\n              {\n                buttons: {\n                  labels: {\n                    ok: submitButtonLabel,\n                    cancel: __('CANCEL')\n                  }\n                }\n              });\n            } else if (warningHelper.shouldWarnBeforeNext()) {\n              testRunner.trigger('confirm.next', __('You are about to go to the next item. Click OK to continue and go to the next item.'), triggerNextAction,\n              // if the test taker accept\n              enableNav // if he refuse\n              );\n            } else {\n              triggerNextAction();\n            }\n          }\n        };\n\n        //create the button (detached)\n        this.$element = createElement(isLastItem());\n\n        //attach behavior\n        this.$element.on('click', e => {\n          e.preventDefault();\n          disableElement(this.$element);\n          testRunner.trigger('nav-next');\n        });\n        const registerShortcut = kbdShortcut => {\n          if (testRunnerOptions.allowShortcuts && kbdShortcut) {\n            shortcut.add(namespaceHelper.namespaceAll(kbdShortcut, this.getName(), true), () => {\n              if (this.getState('enabled') === true) {\n                testRunner.trigger('nav-next', true);\n              }\n            }, {\n              avoidInput: true,\n              prevent: true\n            });\n          }\n        };\n        registerShortcut(pluginShortcuts.trigger);\n\n        //disabled by default\n        this.disable();\n\n        //change plugin state\n        testRunner.on('loaditem', () => {\n          updateElement(this.$element, testRunner, isLastItem());\n        }).on('enablenav', () => this.enable()).on('disablenav', () => this.disable()).on('hidenav', () => this.hide()).on('shownav', () => this.show()).on('nav-next', nextItemWarning => doNext(nextItemWarning)).on('enableaccessibilitymode', () => {\n          const kbdShortcut = pluginShortcuts.triggerAccessibility;\n          if (kbdShortcut && !this.getState('eaccessibilitymode')) {\n            shortcut.remove(`.${this.getName()}`);\n            registerShortcut(kbdShortcut);\n            this.setState('eaccessibilitymode');\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render() {\n        //attach the element to the navigation area\n        const $container = this.getAreaBroker().getNavigationArea();\n        $container.append(this.$element);\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy() {\n        shortcut.remove(`.${this.getName()}`);\n        this.$element.remove();\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable() {\n        enableElement(this.$element);\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable() {\n        disableElement(this.$element);\n      },\n      /**\r\n       * Show the button\r\n       */\n      show() {\n        hider.show(this.$element);\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide() {\n        hider.hide(this.$element);\n      }\n    });\n\n    return next;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/next/dialogConfirmNext',['jquery', 'lodash', 'i18n', 'ui/dialog', 'handlebars', 'lib/handlebars/helpers'], function ($$1, _, __, dialog, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    dialog = dialog && Object.prototype.hasOwnProperty.call(dialog, 'default') ? dialog['default'] : dialog;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      \n      return \"checked\";\n      }\n\n      buffer += \"<label for=\\\"\";\n      if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\">\\r\\n    <input type=\\\"checkbox\\\" id=\\\"\";\n      if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" name=\\\"\";\n      if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.checked), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \" />\\r\\n    <span class=\\\"icon-checkbox\\\"></span>\\r\\n    \";\n      if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\r\\n</label>\";\n      return buffer;\n      });\n    function checkboxTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Displays a confirmation dialog with a checkbox in it\r\n     *\r\n     * @param {String} heading - Above the main message\r\n     * @param {String} message - The displayed message\r\n     * @param {Function} accept - An action called when the dialog is accepted\r\n     * @param {Function} refuse - An action called when the dialog is refused\r\n     * @param {Object} checkboxParams - Checkbox options\r\n     * @param {Boolean} [checkboxParams.checked] - True to render it checked\r\n     * @param {Function} [checkboxParams.submitChecked] - Action called when dialog accepted with checkbox checked\r\n     * @param {Function} [checkboxParams.submitUnchecked] - Action called when dialog accepted with checkbox unchecked\r\n     * @returns {dialog} - Returns the dialog instance\r\n     */\n    function dialogConfirmNext(heading, message, accept, refuse, checkboxParams, dialogOptions) {\n      var accepted = false;\n      var dlg;\n      var content = null;\n      if (checkboxParams && checkboxParams.checked !== true) {\n        content = checkboxTpl({\n          checked: false,\n          text: \"Don't show this again next time\",\n          id: 'dont-show-again'\n        });\n      }\n      dialogOptions = _.defaults({\n        heading: heading,\n        message: message,\n        content: content,\n        autoRender: true,\n        autoDestroy: true,\n        buttons: [{\n          id: 'cancel',\n          type: 'regular',\n          label: __('Cancel'),\n          close: true\n        }, {\n          id: 'ok',\n          type: 'info',\n          label: __('Go to next item'),\n          close: true\n        }],\n        onOkBtn: function onOkBtn() {\n          var $checkbox;\n          accepted = true;\n          if (_.isFunction(accept)) {\n            accept.call(this);\n            if (checkboxParams) {\n              // handle checkbox callbacks:\n              $checkbox = $$1('input[name=\"dont-show-again\"]', this);\n              if ($checkbox.prop('checked') && _.isFunction(checkboxParams.submitChecked)) {\n                checkboxParams.submitChecked();\n              } else if (!$checkbox.prop('checked') && _.isFunction(checkboxParams.submitUnchecked)) {\n                checkboxParams.submitUnchecked();\n              }\n            }\n          }\n        }\n      }, dialogOptions);\n      dlg = dialog(dialogOptions);\n      if (_.isFunction(refuse)) {\n        dlg.on('closed.modal', function () {\n          if (!accepted) {\n            refuse.call(this);\n          }\n        });\n      }\n      return dlg;\n    }\n\n    return dialogConfirmNext;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/next/linearNextItemWarning',['i18n', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/map', 'taoQtiTest/runner/helpers/currentItem', 'taoQtiTest/runner/plugins/navigation/next/dialogConfirmNext', 'taoQtiTest/runner/helpers/navigation'], function (__, pluginFactory, mapHelper, currentItemHelper, dialogConfirmNext, navigationHelper) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    currentItemHelper = currentItemHelper && Object.prototype.hasOwnProperty.call(currentItemHelper, 'default') ? currentItemHelper['default'] : currentItemHelper;\n    dialogConfirmNext = dialogConfirmNext && Object.prototype.hasOwnProperty.call(dialogConfirmNext, 'default') ? dialogConfirmNext['default'] : dialogConfirmNext;\n    navigationHelper = navigationHelper && Object.prototype.hasOwnProperty.call(navigationHelper, 'default') ? navigationHelper['default'] : navigationHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var linearNextItemWarning = pluginFactory({\n      name: 'linearNextItemWarning',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const testStore = testRunner.getTestStore(); // we'll store user's checkbox choice in here\n        testStore.setVolatile(self.getName());\n\n        /**\r\n         * Retrieve the required categories of the current item\r\n         * @returns {Object} the calculator categories\r\n         */\n        function getNextItemCategories() {\n          const testContext = testRunner.getTestContext();\n          const testMap = testRunner.getTestMap();\n          return {\n            nextPartWarning: mapHelper.hasItemCategory(testMap, testContext.itemIdentifier, 'nextPartWarning', true),\n            nextSectionWarning: mapHelper.hasItemCategory(testMap, testContext.itemIdentifier, 'nextSectionWarning', true)\n          };\n        }\n\n        /**\r\n         * Provides different variants of message text\r\n         * @param {String} action - 'next' or 'skip'\r\n         * @returns {String}\r\n         */\n        function getCustomNextMessage(action) {\n          var customNextMessage;\n          var itemPartiallyAnswered = currentItemHelper.isAnswered(testRunner, true);\n          if (!itemPartiallyAnswered) {\n            customNextMessage = __('Are you sure you want to go to the next item? You will not be able to go back and provide an answer.');\n          } else if (action === 'next') {\n            customNextMessage = __('Are you sure you want to go to the next item? You will not be able to go back and change your answer.');\n          } else if (action === 'skip') {\n            customNextMessage = __('Are you sure you want to clear your answer and go to the next item? You will not be able to go back and provide an answer.');\n          } else {\n            // more generic message for default case:\n            customNextMessage = __('Are you sure you want to go to the next item? You will not be able to go back.');\n          }\n          return customNextMessage;\n        }\n\n        //plugin behavior\n        /**\r\n         * Checks configuration, shows a dialog asking to confirm the nav action\r\n         *\r\n         * @param {String} action - 'next' or 'skip'\r\n         * @returns {Promise} - resolves if dialog accepted or not shown, rejects if dialog cancelled\r\n         */\n        function doNextWarning(action) {\n          testRunner.trigger('disablenav');\n\n          // Load testStore checkbox value (async)\n          return testStore.getStore(self.getName()).then(function (store) {\n            return store.getItem('dontShowLinearNextItemWarning').then(function (checkboxValue) {\n              var checkboxParams = null;\n\n              // Show the warning unless user has turned it off:\n              if (checkboxValue !== true) {\n                // Define checkbox only if enabled by config:\n                if (testRunnerOptions.enableLinearNextItemWarningCheckbox) {\n                  checkboxParams = {\n                    checked: checkboxValue,\n                    submitChecked: function () {\n                      store.setItem('dontShowLinearNextItemWarning', true);\n                    },\n                    submitUnchecked: function () {\n                      store.setItem('dontShowLinearNextItemWarning', false);\n                    }\n                  };\n                }\n                return new Promise(function (resolve, reject) {\n                  // show special dialog:\n                  dialogConfirmNext(__('Go to the next item?'), getCustomNextMessage(action), resolve,\n                  // if the test taker accepts\n                  function cancel() {\n                    // if he refuses\n                    reject({\n                      cancel: true\n                    });\n                  }, checkboxParams);\n                });\n              }\n            });\n          }).catch(function (err) {\n            // if the rejection is due to an error, rethrow it\n            if (err && err instanceof Error) {\n              throw err;\n            }\n            if (err && err.cancel === true) {\n              testRunner.trigger('enablenav');\n              return Promise.reject(); // to cancel the move\n            }\n          });\n        }\n\n        // Attach this plugin to 'next' & 'skip' events\n        testRunner.on('init', function () {\n          // Clear the stored checkbox value before each test:\n          testStore.getStore(self.getName()).then(function (store) {\n            store.setItem('dontShowLinearNextItemWarning', null);\n          });\n        }).before('move skip', function (e, type, scope) {\n          const context = testRunner.getTestContext();\n          const map = testRunner.getTestMap();\n          const item = testRunner.getCurrentItem();\n          const currentPart = testRunner.getCurrentPart();\n          const categories = getNextItemCategories();\n          const isLast = navigationHelper.isLast(map, context.itemIdentifier);\n          if (currentPart && currentPart.isLinear) {\n            // Do nothing if nextSection warning imminent:\n            if (scope === 'section' && categories.nextSectionWarning) {\n              return;\n              // Do nothing if endOfPart warning imminent:\n            } else if (categories.nextPartWarning) {\n              return;\n              // Do nothing if 'informational item':\n            } else if (item.informational) {\n              return;\n              // Show dialog if conditions met:\n            } else if (type === 'next' && !isLast && testRunnerOptions.forceEnableLinearNextItemWarning) {\n              return doNextWarning('next');\n            } else if (e.name === 'skip' && !isLast && testRunnerOptions.forceEnableLinearNextItemWarning) {\n              return doNextWarning('skip');\n            }\n          }\n        });\n      }\n    });\n\n    return linearNextItemWarning;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/nextSection',['jquery', 'lodash', 'i18n', 'ui/hider', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/messages', 'handlebars', 'lib/handlebars/helpers', 'taoQtiTest/runner/helpers/map'], function ($$1, _, __, hider, pluginFactory, messages, Handlebars, Helpers0, mapHelper) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    hider = hider && Object.prototype.hasOwnProperty.call(hider, 'default') ? hider['default'] : hider;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    messages = messages && Object.prototype.hasOwnProperty.call(messages, 'default') ? messages['default'] : messages;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \" \";\n      if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \"\", stack1;\n      buffer += \"\\r\\n        aria-\"\n        + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n        + \"=\\\"\"\n        + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))\n        + \"\\\"\\r\\n    \";\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"icon icon-\";\n      if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"></span>\";\n      return buffer;\n      }\n    function program6(depth0,data) {\n      \n      \n      return \" no-label\";\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"text\\\">\";\n      if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\";\n      return buffer;\n      }\n\n      buffer += \"<li\\r\\n    data-control=\\\"\";\n      if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    class=\\\"small btn-info action\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"\\r\\n    title=\\\"\";\n      if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    role=\\\"button\\\"\\r\\n    \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.aria), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n>\\r\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\" onclick=\\\"return false\\\" aria-hidden=\\\"true\\\" >\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n    </a>\\r\\n</li>\\r\\n\";\n      return buffer;\n      });\n    function buttonTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2015-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n    var nextSection = pluginFactory({\n      name: 'nextsection',\n      init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n\n        /**\r\n         * Retrieve the nexSection categories of the current item\r\n         * @returns {Object} the calculator categories\r\n         */\n        function getNextSectionCategories() {\n          const testContext = testRunner.getTestContext();\n          const testMap = testRunner.getTestMap();\n          return {\n            nextSection: mapHelper.hasItemCategory(testMap, testContext.itemIdentifier, 'nextSection', true),\n            nextSectionWarning: mapHelper.hasItemCategory(testMap, testContext.itemIdentifier, 'nextSectionWarning', true),\n            noExitTimedSectionWarning: mapHelper.hasItemCategory(testMap, testContext.itemIdentifier, 'noExitTimedSectionWarning', true)\n          };\n        }\n        function toggle() {\n          const categories = getNextSectionCategories();\n          if (testRunnerOptions.nextSection && (categories.nextSection || categories.nextSectionWarning)) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        }\n        function nextSection() {\n          testRunner.next('section');\n        }\n\n        /**\r\n         * Check if warn section leaving dialog enabled to prevent showing double dialogs\r\n         * @returns {Boolean}\r\n         */\n        const isWarnSectionLeavingEabled = () => {\n          const testContext = testRunner.getTestContext();\n          const categories = getNextSectionCategories();\n          const timeConstraints = testContext.timeConstraints || [];\n          return timeConstraints.some(_ref => {\n            let {\n              source\n            } = _ref;\n            return source === testContext.sectionId;\n          }) && !categories.noExitTimedSectionWarning && !(testRunnerOptions.timer || {}).keepUpToTimeout;\n        };\n        this.$element = $$1(buttonTpl({\n          control: 'next-section',\n          title: __('Skip to the next section'),\n          icon: 'fast-forward',\n          text: __('Next Section')\n        }));\n        this.$element.on('click', function (e) {\n          const enable = _.bind(self.enable, self);\n          const categories = getNextSectionCategories();\n          e.preventDefault();\n          if (self.getState('enabled') !== false) {\n            self.disable();\n            if (categories.nextSectionWarning && !isWarnSectionLeavingEabled()) {\n              const submitButtonLabel = __('CONTINUE TO THE NEXT SECTION');\n              testRunner.trigger('confirm.nextsection', messages.getExitMessage('section', testRunner, '', false, submitButtonLabel), nextSection,\n              // if the test taker accept\n              enable,\n              // if the test taker refuse\n              {\n                buttons: {\n                  labels: {\n                    ok: submitButtonLabel,\n                    cancel: __('CANCEL')\n                  }\n                }\n              });\n            } else {\n              nextSection();\n            }\n          }\n        });\n        this.disable();\n        toggle();\n        testRunner.on('loaditem', toggle).on('enablenav', function () {\n          self.enable();\n        }).on('disablenav', function () {\n          self.disable();\n        }).on('hidenav', function () {\n          self.hide();\n        }).on('shownav', function () {\n          self.show();\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        //attach the element to the navigation area\n        var $container = this.getAreaBroker().getNavigationArea();\n        $container.append(this.$element);\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        this.$element.remove();\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.$element.removeProp('disabled').removeClass('disabled');\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.$element.prop('disabled', true).addClass('disabled');\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        hider.show(this.$element);\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        hider.hide(this.$element);\n      }\n    });\n\n    return nextSection;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/previous',['jquery', 'lodash', 'i18n', 'ui/hider', 'taoTests/runner/plugin', 'util/shortcut', 'util/namespace', 'taoQtiTest/runner/helpers/navigation', 'taoQtiTest/runner/helpers/map', 'handlebars', 'lib/handlebars/helpers'], function ($$1, _, __, hider, pluginFactory, shortcut, namespaceHelper, navigationHelper, mapHelper, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    hider = hider && Object.prototype.hasOwnProperty.call(hider, 'default') ? hider['default'] : hider;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    navigationHelper = navigationHelper && Object.prototype.hasOwnProperty.call(navigationHelper, 'default') ? navigationHelper['default'] : navigationHelper;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \" \";\n      if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \"\", stack1;\n      buffer += \"\\r\\n        aria-\"\n        + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n        + \"=\\\"\"\n        + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))\n        + \"\\\"\\r\\n    \";\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"icon icon-\";\n      if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"></span>\";\n      return buffer;\n      }\n    function program6(depth0,data) {\n      \n      \n      return \" no-label\";\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"text\\\">\";\n      if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\";\n      return buffer;\n      }\n\n      buffer += \"<li\\r\\n    data-control=\\\"\";\n      if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    class=\\\"small btn-info action\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"\\r\\n    title=\\\"\";\n      if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    role=\\\"button\\\"\\r\\n    \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.aria), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n>\\r\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\" onclick=\\\"return false\\\" aria-hidden=\\\"true\\\" >\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n    </a>\\r\\n</li>\\r\\n\";\n      return buffer;\n      });\n    function buttonTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var previous = pluginFactory({\n      name: 'previous',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n\n        /**\r\n         * Check if the \"Previous\" functionality should be available or not\r\n         */\n        var canDoPrevious = function canDoPrevious() {\n          const testMap = testRunner.getTestMap();\n          const context = testRunner.getTestContext();\n          const currentSection = testRunner.getCurrentSection();\n          const noExitTimedSectionWarning = mapHelper.hasItemCategory(testMap, context.itemIdentifier, 'noExitTimedSectionWarning', true);\n          const currentPart = testRunner.getCurrentPart();\n          let previousSection;\n          let previousPart;\n\n          // check TestMap if empty\n          if (_.isPlainObject(testMap) && _.size(testMap) === 0) {\n            return false;\n          }\n\n          //first item of the test\n          if (navigationHelper.isFirst(testMap, context.itemIdentifier)) {\n            return false;\n          }\n\n          //first item of a section\n          if (navigationHelper.isFirstOf(testMap, context.itemIdentifier, 'section')) {\n            //when entering an adaptive section,\n            //you can't leave the section from the beginning\n            if (currentSection.isCatAdaptive) {\n              return false;\n            }\n\n            //if the previous section is adaptive or a timed section\n            previousSection = mapHelper.getItemSection(testMap, context.itemPosition - 1);\n            if (previousSection.isCatAdaptive || previousSection.timeConstraint && !noExitTimedSectionWarning) {\n              return false;\n            }\n          }\n          if (navigationHelper.isFirstOf(testMap, context.itemIdentifier, 'part')) {\n            //if the previous part is linear, we don't enter it too\n            previousPart = mapHelper.getItemPart(testMap, context.itemPosition - 1);\n            if (previousPart.isLinear) {\n              return false;\n            }\n          }\n          return currentPart.isLinear === false && context.canMoveBackward === true;\n        };\n\n        /**\r\n         * Hide the plugin if the Previous functionality shouldn't be available\r\n         */\n        var toggle = function toggle() {\n          if (canDoPrevious()) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        };\n\n        //build element (detached)\n        this.$element = $$1(buttonTpl({\n          control: 'move-backward',\n          title: __('Submit and go to the previous item'),\n          icon: 'backward',\n          text: __('Previous')\n        }));\n\n        //attach behavior\n        function doPrevious(previousItemWarning) {\n          var context = testRunner.getTestContext();\n          function enableNav() {\n            testRunner.trigger('enablenav');\n          }\n          function triggerAction() {\n            testRunner.previous();\n          }\n          testRunner.trigger('disablenav');\n          if (self.getState('enabled') !== false) {\n            if (previousItemWarning && context.remainingAttempts !== -1) {\n              testRunner.trigger('confirm.previous', __('You are about to go to the previous item. Click OK to continue and go to the previous item.'), triggerAction,\n              // if the test taker accept\n              enableNav // if he refuses\n              );\n            } else {\n              triggerAction();\n            }\n          }\n        }\n        this.$element.on('click', function (e) {\n          e.preventDefault();\n          testRunner.trigger('nav-previous');\n        });\n        const registerShortcut = kbdShortcut => {\n          if (testRunnerOptions.allowShortcuts && kbdShortcut) {\n            shortcut.add(namespaceHelper.namespaceAll(kbdShortcut, this.getName(), true), function () {\n              if (canDoPrevious() && self.getState('enabled') === true) {\n                testRunner.trigger('nav-previous', [true]);\n              }\n            }, {\n              avoidInput: true,\n              prevent: true\n            });\n          }\n        };\n        registerShortcut(pluginShortcuts.trigger);\n\n        //start disabled\n        toggle();\n        self.disable();\n\n        //update plugin state based on changes\n        testRunner.on('loaditem', toggle).on('enablenav', function () {\n          self.enable();\n        }).on('disablenav', function () {\n          self.disable();\n        }).on('hidenav', function () {\n          self.hide();\n        }).on('shownav', function () {\n          self.show();\n        }).on('nav-previous', function (previousItemWarning) {\n          doPrevious(previousItemWarning);\n        }).on('enableaccessibilitymode', () => {\n          const kbdShortcut = pluginShortcuts.triggerAccessibility;\n          if (kbdShortcut && !this.getState('eaccessibilitymode')) {\n            shortcut.remove(`.${this.getName()}`);\n            registerShortcut(kbdShortcut);\n            this.setState('eaccessibilitymode');\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var $container = this.getAreaBroker().getNavigationArea();\n        $container.append(this.$element);\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        shortcut.remove(`.${this.getName()}`);\n        this.$element.remove();\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.$element.removeProp('disabled').removeClass('disabled');\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.$element.prop('disabled', true).addClass('disabled');\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        hider.show(this.$element);\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        hider.hide(this.$element);\n      }\n    });\n\n    return previous;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/review/navigator',['jquery', 'lodash', 'ui/component', 'ui/autoscroll', 'taoQtiTest/runner/helpers/map', 'handlebars', 'lib/handlebars/helpers'], function ($$1, _, component, autoscroll, mapHelper, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;\n    autoscroll = autoscroll && Object.prototype.hasOwnProperty.call(autoscroll, 'default') ? autoscroll['default'] : autoscroll;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      \n      return \" hidden\";\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \"\", helper, options;\n      buffer += \"\\r\\n    <div class=\\\"qti-navigator-info collapsible\\\">\\r\\n                <span class=\\\"qti-navigator-label\\\">\\r\\n                    <span class=\\\"qti-navigator-text\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n        + \"</span>\\r\\n                    <span class=\\\"icon-up\\\"></span>\\r\\n                    <span class=\\\"icon-down\\\"></span>\\r\\n                </span>\\r\\n        <ul class=\\\"collapsible-panel plain\\\">\\r\\n            <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n        + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n        + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n            </li>\\r\\n            <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n        + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n        + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n            </li>\\r\\n            <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n        + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n        + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n            </li>\\r\\n            <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n        + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n        + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n    \";\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      \n      return \"(<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n      }\n\n    function program7(depth0,data) {\n      \n      \n      return \"icon-unanswered \";\n      }\n\n    function program9(depth0,data) {\n      \n      var buffer = \"\", helper, options;\n      buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n        + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n      return buffer;\n      }\n\n    function program11(depth0,data) {\n      \n      \n      return \"icon-flagged \";\n      }\n\n    function program13(depth0,data) {\n      \n      var buffer = \"\", helper, options;\n      buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n        + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n      return buffer;\n      }\n\n      buffer += \"<div class=\\\"qti-panel qti-navigator qti-navigator-default\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\">\\r\\n    <div class=\\\"qti-navigator-collapsible\\\">\\r\\n        <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n        + \"\\\"></span>\\r\\n        <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n        + \"\\\"></span>\\r\\n    </div>\\r\\n    \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n\\r\\n\\r\\n    <div class=\\\"qti-navigator-filters\\\">\\r\\n        <ul role=\\\"tablist\\\" class=\\\"plain clearfix\\\">\\r\\n            <li role=\\\"tab\\\" aria-selected=\\\"true\\\" class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\r\\n                <span title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n        + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n        + \"\\r\\n                    \";\n      stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n                </span>\\r\\n            </li>\\r\\n\\r\\n            <li role=\\\"tab\\\" class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\r\\n                <span class=\\\"\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"qti-navigator-tab\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n        + \"\\\">\\r\\n                    \";\n      stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n                </span>\\r\\n            </li>\\r\\n\\r\\n            <li role=\\\"tab\\\" class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\r\\n                <span class=\\\"\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"qti-navigator-tab\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n        + \"\\\">\\r\\n                    \";\n      stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n                </span>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n\\r\\n    <nav class=\\\"qti-navigator-tree\\\"></nav>\\r\\n\\r\\n    <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\r\\n        <span class=\\\"icon icon-info\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n        + \"\\\"></span>\\r\\n        <p class=\\\"qti-navigator-message\\\">\\r\\n            \"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n        + \"\\r\\n        </p>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function navigatorTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template$1 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"\\r\\n    <li class=\\\"qti-navigator-part collapsible \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\" data-id=\\\"\";\n      if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\">\\r\\n        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\">\\r\\n            <span class=\\\"qti-navigator-text\\\">\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\\r\\n            <span class=\\\"icon-up\\\"></span>\\r\\n            <span class=\\\"icon-down\\\"></span>\\r\\n        </span>\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.isLinear), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n    </li>\\r\\n    \";\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      \n      return \"active\";\n      }\n\n    function program4(depth0,data) {\n      \n      \n      return \"collapsed\";\n      }\n\n    function program6(depth0,data) {\n      \n      var buffer = \"\", stack1, helper, options;\n      buffer += \"\\r\\n        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\r\\n            <span class=\\\"icon icon-info\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n        + \"\\\"></span>\\r\\n            <p class=\\\"qti-navigator-message\\\">\\r\\n                \"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n        + \"\\r\\n            </p>\\r\\n            <p class=\\\"qti-navigator-actions\\\">\\r\\n                <button class=\\\"btn-info small\\\" data-position=\\\"\";\n      if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n        + \"\\\">\\r\\n                    <span class=\\\"qti-navigator-text\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n        + \"</span>\\r\\n                    <span class=\\\"icon-play r\\\"></span>\\r\\n                </button>\\r\\n            </p>\\r\\n        </div>\\r\\n        \";\n      return buffer;\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"\\r\\n        <ul aria-label=\\\"\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\r\\n            \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n        </ul>\\r\\n        \";\n      return buffer;\n      }\n    function program9(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"\\r\\n            <li class=\\\"qti-navigator-section collapsible \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\" data-id=\\\"\";\n      if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\">\\r\\n                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\">\\r\\n                    <span class=\\\"qti-navigator-text\\\">\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\\r\\n                    <span class=\\\"qti-navigator-counter\\\">\"\n        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.answered)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n        + \"/\"\n        + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.total)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n        + \"</span>\\r\\n                </span>\\r\\n                <ul aria-label=\\\"\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" class=\\\"qti-navigator-items collapsible-panel plain\\\">\\r\\n                    \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.programWithDepth(10, program10, data, depth0),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n                </ul>\\r\\n            </li>\\r\\n            \";\n      return buffer;\n      }\n    function program10(depth0,data,depth1) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"\\r\\n                    <li class=\\\"qti-navigator-item \";\n      if (helper = helpers.cls) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.cls); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" data-id=\\\"\";\n      if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\" data-position=\\\"\";\n      if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n                              role=\\\"link\\\" aria-disabled=\\\"\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(13, program13, data),fn:self.program(11, program11, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"\\r\\n                              \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.noop,fn:self.program(15, program15, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n                              aria-label=\\\"\";\n      if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \" of \"\n        + escapeExpression(((stack1 = ((stack1 = (depth1 && depth1.stats)),stack1 == null || stack1 === false ? stack1 : stack1.total)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n        + \" \";\n      if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-\";\n      if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-number\\\">\";\n      if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\\r\\n                            \";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\r\\n                        </span>\\r\\n                    </li>\\r\\n                    \";\n      return buffer;\n      }\n    function program11(depth0,data) {\n      \n      \n      return \"false\";\n      }\n\n    function program13(depth0,data) {\n      \n      \n      return \"true\";\n      }\n\n    function program15(depth0,data) {\n      \n      \n      return \"aria-current=\\\"page\\\"\";\n      }\n\n      buffer += \"<ul class=\\\"qti-navigator-parts plain\\\">\\r\\n    \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n</ul>\\r\\n\";\n      return buffer;\n      });\n    function navigatorTreeTpl(data, options, asString) {\n      var html = Template$1(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Some default values\r\n     * @type {Object}\r\n     * @private\r\n     */\n    var _defaults = {\n      scope: 'test',\n      canCollapse: false,\n      preventsUnseen: true,\n      hidden: false\n    };\n\n    /**\r\n     * List of CSS classes\r\n     * @type {Object}\r\n     * @private\r\n     */\n    var _cssCls = {\n      active: 'active',\n      collapsed: 'collapsed',\n      collapsible: 'collapsible',\n      hidden: 'hidden',\n      disabled: 'disabled',\n      flagged: 'flagged',\n      answered: 'answered',\n      viewed: 'viewed',\n      unseen: 'unseen',\n      info: 'info',\n      icon: 'qti-navigator-icon',\n      scope: {\n        test: 'scope-test',\n        testPart: 'scope-test-part',\n        testSection: 'scope-test-section'\n      }\n    };\n\n    /**\r\n     * List of icon CSS classes\r\n     * @type {Array}\r\n     * @private\r\n     */\n    var _iconCls = [_cssCls.info, _cssCls.flagged, _cssCls.answered, _cssCls.viewed];\n\n    /**\r\n     * List of common CSS selectors\r\n     * @type {Object}\r\n     * @private\r\n     */\n    var _selectors = {\n      component: '.qti-navigator',\n      filterBar: '.qti-navigator-filters',\n      filter: '.qti-navigator-filter',\n      tree: '.qti-navigator-tree',\n      collapseHandle: '.qti-navigator-collapsible',\n      linearState: '.qti-navigator-linear',\n      infoAnswered: '.qti-navigator-answered .qti-navigator-counter',\n      infoViewed: '.qti-navigator-viewed .qti-navigator-counter',\n      infoUnanswered: '.qti-navigator-unanswered .qti-navigator-counter',\n      infoFlagged: '.qti-navigator-flagged .qti-navigator-counter',\n      infoPanel: '.qti-navigator-info',\n      infoPanelLabels: '.qti-navigator-info > .qti-navigator-label',\n      tabInfoAll: '[data-mode=\"all\"] .qti-navigator-counter',\n      tabInfoUnanswered: '[data-mode=\"unanswered\"] .qti-navigator-counter',\n      tabInfoFlagged: '[data-mode=\"flagged\"] .qti-navigator-counter',\n      parts: '.qti-navigator-part',\n      partLabels: '.qti-navigator-part > .qti-navigator-label',\n      sections: '.qti-navigator-section',\n      sectionLabels: '.qti-navigator-section > .qti-navigator-label',\n      items: '.qti-navigator-item',\n      itemLabels: '.qti-navigator-item > .qti-navigator-label',\n      itemIcons: '.qti-navigator-item > .qti-navigator-icon',\n      activeItem: '.qti-navigator-item.active',\n      icons: '.qti-navigator-icon',\n      linearStart: '.qti-navigator-linear-part button',\n      counters: '.qti-navigator-counter',\n      actives: '.active',\n      collapsible: '.collapsible',\n      collapsiblePanels: '.collapsible-panel',\n      unseen: '.unseen',\n      answered: '.answered',\n      flagged: '.flagged',\n      notFlagged: ':not(.flagged)',\n      notAnswered: ':not(.answered)',\n      notInformational: ':not(.info)',\n      informational: '.info',\n      hidden: '.hidden',\n      disabled: '.disabled'\n    };\n\n    /**\r\n     * Maps the filter mode to filter criteria.\r\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\r\n     * @type {Object}\r\n     * @private\r\n     */\n    var _filterMap = {\n      all: '',\n      unanswered: [_selectors.answered, _selectors.informational].join(','),\n      flagged: _selectors.notFlagged,\n      answered: _selectors.notAnswered,\n      filtered: _selectors.hidden\n    };\n\n    /**\r\n     *\r\n     * @type {Object}\r\n     */\n    var navigatorApi = {\n      /**\r\n       * Updates the stats on the flagged items in the current map\r\n       * @param {Number} position\r\n       * @param {Boolean} flag\r\n       */\n      updateStats: function updateStats(position, flag) {\n        var map = this.map;\n        var item;\n        if (map) {\n          item = mapHelper.getItemAt(map, position);\n          if (item) {\n            item.flagged = flag;\n            mapHelper.updateItemStats(map, position);\n          }\n        }\n      },\n      /**\r\n       * Gets the total number of items for the provided target\r\n       * @param {Object} progression\r\n       * @param {String} target\r\n       * @returns {Number}\r\n       */\n      getProgressionTotal: function getProgressionTotal(progression, target) {\n        var total;\n        if ('questions' === target) {\n          total = progression.questions;\n        } else {\n          total = progression.total;\n        }\n        return total;\n      },\n      /**\r\n       * Set the marked state of an item\r\n       * @param {Number|String|jQuery} position\r\n       * @param {Boolean} flag\r\n       */\n      setItemFlag: function setItemFlag(position, flag) {\n        var $item = position && position.jquery ? position : this.controls.$tree.find(`[data-position=${position}]`);\n        var progression = this.progression;\n        var icon;\n\n        // update the map stats\n        this.updateStats(position, flag);\n\n        // update the item flag\n        $item.toggleClass(_cssCls.flagged, flag);\n\n        // set the item icon according to its state\n        icon = _.find(_iconCls, _.bind($item.hasClass, $item)) || _cssCls.unseen;\n        $item.find(_selectors.icons).attr('class', `${_cssCls.icon} icon-${icon}`);\n\n        // update the info panel\n        progression.flagged = this.controls.$tree.find(_selectors.flagged).length;\n        this.writeCount(this.controls.$infoFlagged, progression.flagged, this.getProgressionTotal(progression, 'questions'));\n\n        // recompute the filters\n        this.filter(this.currentFilter);\n      },\n      /**\r\n       * Filters the items by a criteria\r\n       * @param {String} criteria\r\n       */\n      filter: function filter(criteria) {\n        var self = this;\n\n        // remove the current filter by restoring all items\n        var $items = this.controls.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\n\n        // filter the items according to the provided criteria\n        var filterCb = _filterMap[criteria];\n        if (filterCb) {\n          $items.filter(filterCb).addClass(_cssCls.hidden);\n        }\n\n        // update the section counters\n        this.controls.$tree.find(_selectors.sections).each(function () {\n          var $section = $$1(this);\n          var $itemsFound = $section.find(_selectors.items).not(_selectors.hidden);\n          var $filtered = $itemsFound.not(_selectors.disabled);\n          self.writeCount($section.find(_selectors.counters), $filtered.length, $itemsFound.length);\n        });\n        this.currentFilter = criteria;\n      },\n      /**\r\n       * Update the config\r\n       * @param {Object} [config]\r\n       * @returns {navigatorApi}\r\n       */\n      updateConfig: function updateConfig(config) {\n        var $component = this.getElement();\n        var scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n\n        // apply the new config\n        config = _.merge(this.config, config || {});\n\n        // enable/disable the collapsing of the panel\n        $component.toggleClass(_cssCls.collapsible, config.canCollapse);\n\n        // update the component CSS class according to the scope\n        $component.removeClass(scopeClass);\n        scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n        $component.addClass(scopeClass);\n        return this;\n      },\n      /**\r\n       * Keep the active item visible, auto scroll if needed\r\n       */\n      autoScroll: function autoScroll() {\n        autoscroll(this.controls.$tree.find(_selectors.activeItem), this.controls.$tree);\n      },\n      /**\r\n       * Updates the review screen\r\n       * @param {Object} map The current test map\r\n       * @param {Object} context The current test context\r\n       * @returns {navigatorApi}\r\n       * @fires navigator#update\r\n       */\n      update(map, context) {\n        const scopedMap = this.getScopedMap(map, context);\n        const testPart = mapHelper.getPart(map, context.testPartId);\n        const progression = scopedMap.stats || {\n          questions: 0,\n          answered: 0,\n          flagged: 0,\n          viewed: 0,\n          total: 0\n        };\n        const totalQuestions = this.getProgressionTotal(progression, 'questions');\n        this.map = map;\n        this.progression = progression;\n\n        // update the info panel\n        this.writeCount(this.controls.$infoAnswered, progression.answered, totalQuestions);\n        this.writeCount(this.controls.$infoUnanswered, totalQuestions - progression.answered, totalQuestions);\n        this.writeCount(this.controls.$infoViewed, progression.viewed, this.getProgressionTotal(progression, 'total'));\n        this.writeCount(this.controls.$infoFlagged, progression.flagged, totalQuestions);\n        this.writeCount(this.controls.$infoAll, totalQuestions, null);\n\n        // rebuild the tree\n        if (!testPart.isLinear) {\n          this.controls.$filterBar.show();\n          this.controls.$linearState.hide();\n          this.controls.$tree.html(navigatorTreeTpl(scopedMap));\n          this.autoScroll();\n          const activeItem = mapHelper.getActiveItem(scopedMap);\n          this.setState('prevents-unseen', this.config.preventsUnseen);\n          const isSkipaheadEnabled = activeItem && activeItem.categories && _.indexOf(activeItem.categories, 'x-tao-option-review-skipahead') >= 0;\n          this.setState('skipahead-enabled', isSkipaheadEnabled);\n          if (this.config.preventsUnseen && !isSkipaheadEnabled) {\n            // disables all unseen items to prevent the test taker has access to.\n            this.controls.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\n          }\n        } else {\n          this.controls.$filterBar.hide();\n          this.controls.$linearState.show();\n          this.controls.$tree.empty();\n        }\n\n        // apply again the current filter\n        this.filter(this.controls.$filters.filter(_selectors.actives).data('mode'));\n\n        /**\r\n         * @event navigator#update the navigation data have changed\r\n         */\n        this.trigger('update');\n        return this;\n      },\n      /**\r\n       * Gets the scoped map\r\n       * @param {Object} map The current test map\r\n       * @param {Object} context The current test context\r\n       * @returns {object} The scoped map\r\n       */\n      getScopedMap: function getScopedMap(map, context) {\n        var scopedMap = mapHelper.getScopeMapFromContext(map, context, this.config.scope);\n        var testPart = mapHelper.getPart(scopedMap, context.testPartId) || {};\n        var section = mapHelper.getSection(scopedMap, context.sectionId) || {};\n        var item = mapHelper.getItem(scopedMap, context.itemIdentifier) || {};\n\n        // set the active part/section/item\n        testPart.active = true;\n        section.active = true;\n        item.active = true;\n\n        //interactive item counter\n        let counter = 0;\n\n        // adjust each item with additional meta\n        return mapHelper.each(scopedMap, function (itm) {\n          var cls = [];\n          var icon = '';\n          if (itm.active) {\n            cls.push('active');\n          }\n          if (itm.informational) {\n            cls.push('info');\n            icon = icon || 'info';\n          }\n          if (itm.flagged) {\n            cls.push('flagged');\n            icon = icon || 'flagged';\n          }\n          if (itm.answered) {\n            cls.push('answered');\n            icon = icon || 'answered';\n          }\n          if (itm.viewed) {\n            cls.push('viewed');\n            icon = icon || 'viewed';\n          } else {\n            cls.push('unseen');\n            icon = icon || 'unseen';\n          }\n          if (!itm.informational) {\n            counter += 1;\n            itm.numberTest = counter; //item position in whole test from 1\n          }\n\n          itm.cls = cls.join(' ');\n          itm.icon = icon;\n        });\n      },\n      /**\r\n       * Updates a counter\r\n       * @param {jQuery} $place\r\n       * @param {Number} count\r\n       * @param {Number|Null} total\r\n       * @private\r\n       */\n      writeCount: function writeCount($place, count, total) {\n        var display = 0;\n        if ($place.parent().hasClass('qti-navigator-tab')) {\n          display = Math.max(count, 0);\n        } else if (total > 0) {\n          display = `${Math.min(count, total)}/${total}`;\n        }\n        $place.text(display);\n      },\n      /**\r\n       * Selects an item\r\n       * @param {String|jQuery} position The item's position\r\n       * @param {Boolean} [open] Forces the tree to be opened on the selected item\r\n       * @returns {jQuery} Returns the selected item\r\n       */\n      select: function select(position, open) {\n        // find the item to select and extract its hierarchy\n        var $tree = this.controls.$tree;\n        var selected = position && position.jquery ? position : $tree.find(`[data-position=${position}]`);\n        var hierarchy = selected.parentsUntil($tree);\n        var previousPosition = 0;\n        var $previous = $tree.find(_selectors.activeItem);\n        if ($previous.length) {\n          previousPosition = $previous.data('position');\n        }\n\n        // collapse the full tree and open only the hierarchy of the selected item\n        if (open) {\n          this.openOnly(hierarchy);\n        }\n\n        // select the item\n        $tree.find(_selectors.actives).removeClass(_cssCls.active);\n        hierarchy.add(selected).addClass(_cssCls.active);\n        position = selected.data('position');\n\n        /**\r\n         * An item is selected\r\n         *\r\n         * @param {Number} position - The item position on which select\r\n         * @param {Number} previousPosition - The item position from which select\r\n         * @event navigator#selected\r\n         */\n        this.trigger('selected', position, previousPosition);\n        return selected;\n      },\n      /**\r\n       * Opens the tree on the selected item only\r\n       * @returns {jQuery} Returns the selected item\r\n       */\n      openSelected: function openSelected() {\n        // find the selected item and extract its hierarchy\n        var $tree = this.controls.$tree;\n        var selected = $tree.find(_selectors.items + _selectors.actives);\n        var hierarchy = selected.parentsUntil($tree);\n\n        // collapse the full tree and open only the hierarchy of the selected item\n        this.openOnly(hierarchy);\n        return selected;\n      },\n      /**\r\n       * Collapses the full tree and opens only the provided branch\r\n       * @param {jQuery} opened The element to be opened\r\n       * @param {jQuery} [root] The root element from which collapse the panels\r\n       */\n      openOnly: function openOnly(opened, root) {\n        (root || this.controls.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\n        opened.removeClass(_cssCls.collapsed);\n      },\n      /**\r\n       * Toggles a panel\r\n       * @param {jQuery} panel The panel to toggle\r\n       * @param {String} [collapseSelector] Selector of panels to collapse\r\n       * @returns {Boolean} Returns `true` if the panel just expanded now\r\n       */\n      togglePanel: function togglePanel(panel, collapseSelector) {\n        var collapsed = panel.hasClass(_cssCls.collapsed);\n        if (collapseSelector) {\n          this.controls.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\n        }\n        if (collapsed) {\n          panel.removeClass(_cssCls.collapsed);\n        } else {\n          panel.addClass(_cssCls.collapsed);\n        }\n        return collapsed;\n      },\n      /**\r\n       * Toggles the display state of the component\r\n       * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\r\n       * @returns {navigatorApi}\r\n       */\n      toggle: function toggle(show) {\n        if (typeof show === 'undefined') {\n          show = this.is('hidden');\n        }\n        if (show) {\n          this.show();\n        } else {\n          this.hide();\n        }\n        return this;\n      }\n    };\n\n    /**\r\n     *\r\n     * @param {Object} config\r\n     * @param {String} [config.scope] Limit the review screen to a particular scope: test, testPart, testSection\r\n     * @param {Boolean} [config.preventsUnseen] Prevents the test taker to access unseen items\r\n     * @param {Boolean} [config.canCollapse] Allow the test taker to collapse the component\r\n     * @param {Boolean} [config.canFlag] Allow the test taker to flag items\r\n     * @param {Boolean} [config.hidden] Hide the component at init\r\n     * @returns {*}\r\n     */\n    function navigatorFactory(config) {\n      var navigator;\n\n      /**\r\n       * Flags an item\r\n       * @param {jQuery} $item\r\n       */\n      function flagItem($item) {\n        var position = $item.data('position');\n        var flagged = !$item.hasClass(_cssCls.flagged);\n\n        // update the display\n        navigator.setItemFlag(position, flagged);\n\n        /**\r\n         * An item is flagged\r\n         * @event navigator#flag\r\n         * @param {Number} position - The item position on which jump\r\n         * @param {Boolean} flag - Tells whether the item is marked for review or not\r\n         */\n        navigator.trigger('flag', position, flagged);\n      }\n\n      /**\r\n       * Jumps to an item\r\n       * @param {jQuery} $item\r\n       * @private\r\n       */\n      function jump($item) {\n        var position = $item.data('position');\n\n        /**\r\n         * A jump to a particular item is required\r\n         * @event navigator#jump\r\n         * @param {Number} position - The item position on which jump\r\n         */\n        navigator.trigger('jump', position);\n      }\n      navigator = component(navigatorApi, _defaults).setTemplate(navigatorTpl)\n\n      // uninstalls the component\n      .on('destroy', function () {\n        this.controls = null;\n      })\n\n      // keep the activ item visible\n      .on('show', function () {\n        this.autoScroll();\n      })\n\n      // renders the component\n      .on('render', function () {\n        var self = this;\n\n        // main component elements\n        var $component = this.getElement();\n        var $filterBar = $component.find(_selectors.filterBar);\n        var $filters = $filterBar.find('li');\n        var $tree = $component.find(_selectors.tree);\n\n        // links the component to the underlying DOM elements\n        this.controls = {\n          // access to info panel displaying counters\n\n          $infoAnswered: $component.find(_selectors.infoAnswered),\n          $infoViewed: $component.find(_selectors.infoViewed),\n          $infoAll: $component.find(_selectors.tabInfoAll),\n          $infoUnanswered: this.config.showLegend ? $component.find(_selectors.infoUnanswered) : $component.find(_selectors.tabInfoUnanswered),\n          $infoFlagged: this.config.showLegend ? $component.find(_selectors.infoFlagged) : $component.find(_selectors.tabInfoFlagged),\n          // access to filter switches\n          $filterBar: $filterBar,\n          $filters: $filters,\n          // access to the tree of parts/sections/items\n          $tree: $tree,\n          // access to the panel displayed when a linear part is reached\n          $linearState: $component.find(_selectors.linearState)\n        };\n\n        // apply options\n        this.updateConfig();\n\n        // click on the collapse handle: collapse/expand the review panel\n        $component.on(`click${_selectors.component}`, _selectors.collapseHandle, function () {\n          if (!self.is('disabled')) {\n            $component.toggleClass(_cssCls.collapsed);\n            if ($component.hasClass(_cssCls.collapsed)) {\n              self.openSelected();\n            }\n          }\n        });\n\n        // click on the info panel title: toggle the related panel\n        $component.on(`click${_selectors.component}`, _selectors.infoPanelLabels, function () {\n          if (!self.is('disabled')) {\n            self.togglePanel($$1(this).closest(_selectors.infoPanel), _selectors.infoPanel);\n          }\n        });\n\n        // click on a part title: toggle the related panel\n        $tree.on(`click${_selectors.component}`, _selectors.partLabels, function () {\n          var $panel;\n          if (!self.is('disabled')) {\n            $panel = $$1(this).closest(_selectors.parts);\n            if (self.togglePanel($panel, _selectors.parts)) {\n              if ($panel.hasClass(_cssCls.active)) {\n                self.openSelected();\n              } else {\n                self.openOnly($panel.find(_selectors.sections).first(), $panel);\n              }\n            }\n          }\n        });\n\n        // click on a section title: toggle the related panel\n        $tree.on(`click${_selectors.component}`, _selectors.sectionLabels, function () {\n          if (!self.is('disabled')) {\n            self.togglePanel($$1(this).closest(_selectors.sections), _selectors.sections);\n          }\n        });\n\n        // click on an item: jump to the position\n        $tree.on(`click${_selectors.component}`, _selectors.itemLabels, function (event) {\n          var $item, $target;\n          if (!self.is('disabled')) {\n            $item = $$1(this).closest(_selectors.items);\n            if (!$item.hasClass(_cssCls.disabled)) {\n              $target = $$1(event.target);\n              if (self.config.canFlag && $target.is(_selectors.icons) && !$component.hasClass(_cssCls.collapsed)) {\n                // click on the icon, just flag the item, unless the panel is collapsed\n                if (!$item.hasClass(_cssCls.unseen) && !$item.hasClass(_cssCls.info)) {\n                  flagItem($item);\n                }\n              } else if (!$item.hasClass(_cssCls.active)) {\n                // go to the selected item\n                self.select($item);\n                jump($item);\n              }\n            }\n          }\n        });\n\n        // click on the start button inside a linear part: jump to the position\n        $tree.on(`click${_selectors.component}`, _selectors.linearStart, function () {\n          var $btn;\n          if (!self.is('disabled')) {\n            $btn = $$1(this);\n\n            // go to the first item of the linear part\n            if (!$btn.hasClass(_cssCls.disabled)) {\n              $btn.addClass(_cssCls.disabled);\n              jump($btn);\n            }\n          }\n        });\n\n        // click on a filter button\n        $filterBar.on(`click${_selectors.component}`, _selectors.filter, function () {\n          var $btn, mode;\n          if (!self.is('disabled')) {\n            $btn = $$1(this);\n            mode = $btn.data('mode');\n\n            // select the button\n            $filters.removeClass(_cssCls.active);\n            $filters.attr('aria-selected', false);\n            $component.removeClass(_cssCls.collapsed);\n            $btn.addClass(_cssCls.active);\n            $btn.attr('aria-selected', true);\n\n            // filter the items\n            self.filter(mode);\n\n            //after filtering, ensure that the active item (if exists) is visible\n            self.autoScroll();\n          }\n        });\n      });\n\n      // set default filter\n      navigator.currentFilter = 'all';\n\n      // the component will be ready\n      return navigator.init(config);\n    }\n\n    return navigatorFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/review/navigatorFizzy',['lodash', 'i18n', 'ui/component', 'ui/itemButtonList', 'taoQtiTest/runner/helpers/map', 'handlebars', 'lib/handlebars/helpers'], function (_, __, componentFactory, itemButtonListFactory, mapHelper, Handlebars, Helpers0) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    componentFactory = componentFactory && Object.prototype.hasOwnProperty.call(componentFactory, 'default') ? componentFactory['default'] : componentFactory;\n    itemButtonListFactory = itemButtonListFactory && Object.prototype.hasOwnProperty.call(itemButtonListFactory, 'default') ? itemButtonListFactory['default'] : itemButtonListFactory;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n    function program1(depth0,data) {\n      \n      \n      return \" hidden\";\n      }\n\n      buffer += \"<div class=\\\"qti-panel qti-navigator\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \" qti-navigator-fizzy\\\">\\r\\n    <div class=\\\"qti-navigator-header\\\">\\r\\n        <div class=\\\"qti-navigator-text\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test overview\", options) : helperMissing.call(depth0, \"__\", \"Test overview\", options)))\n        + \"</div>\\r\\n        <a class=\\\"icon-close\\\" href=\\\"#\\\" onclick=\\\"return false\\\" aria-hidden=\\\"true\\\"></a>\\r\\n    </div>\\r\\n    <nav class=\\\"qti-navigator-tree\\\"></nav>\\r\\n    <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\r\\n        <p class=\\\"qti-navigator-message\\\">\\r\\n            \"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n        + \"\\r\\n        </p>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function navigatorTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template$1 = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1;\n      buffer += \"\\r\\n    \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n\";\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \"\", stack1;\n      buffer += \"\\r\\n        \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n    \";\n      return buffer;\n      }\n    function program3(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"\\r\\n            <li class=\\\"qti-navigator-section\\\">\\r\\n                <div class=\\\"qti-navigator-label\\\" title=\\\"\";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\">\\r\\n                    \";\n      if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\r\\n                </div>\\r\\n                <div class=\\\"qti-navigator-items\\\"></div>\\r\\n            </li>\\r\\n        \";\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      \n      return \"\\r\\n    <li class=\\\"qti-navigator-section\\\">\\r\\n        <div class=\\\"qti-navigator-items\\\"></div>\\r\\n    </li>\\r\\n\";\n      }\n\n      buffer += \"<ol class=\\\"qti-navigator-sections plain\\\">\\r\\n\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.displaySectionTitles), {hash:{},inverse:self.program(5, program5, data),fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n</ol>\\r\\n\";\n      return buffer;\n      });\n    function navigatorTreeTpl(data, options, asString) {\n      var html = Template$1(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2022 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Some default values\r\n     * @type {Object}\r\n     * @private\r\n     */\n    const _defaults = {\n      scope: 'test',\n      preventsUnseen: true\n    };\n\n    /**\r\n     * List of common CSS selectors\r\n     * @type {Object}\r\n     * @private\r\n     */\n    const _selectors = {\n      component: '.qti-navigator',\n      tree: '.qti-navigator-tree',\n      linearState: '.qti-navigator-linear',\n      closeButton: '.icon-close',\n      itemButtonListContainer: '.qti-navigator-items'\n    };\n\n    /**\r\n     * @param {Object} config\r\n     * @param {String} [config.scope] Limit the review screen to a particular scope: test, testPart, testSection\r\n     * @param {Boolean} [config.preventsUnseen] Prevents the test taker to access unseen items\r\n     * @returns {*}\r\n     */\n    function navigatorFactory(config) {\n      let component;\n\n      /**\r\n       * Handle click on an item: jump to the position, if allowed\r\n       * @param {String} itemId\r\n       */\n      function onItemClick(itemId) {\n        const item = mapHelper.getItem(component.map, itemId);\n        const activeItem = mapHelper.getItem(component.map, component.testContext.itemIdentifier);\n        if (item && item.id && !component.is('disabled')) {\n          if (!(component.disableUnseenItems && !item.viewed) && (!activeItem || item.position !== activeItem.position)) {\n            component.select(item.position);\n            /**\r\n             * A jump to a particular item is required\r\n             * @event navigator#jump\r\n             * @param {Number} position - The item position on which jump\r\n             */\n            component.trigger('jump', item.position);\n          }\n        }\n      }\n\n      /**\r\n       * Render items\r\n       * @param {Object} fizzyItemButtonMap - list of items in format needed for rendering\r\n       * @param {String} activeItemId\r\n       */\n      function renderItemButtonListComponents(fizzyItemButtonMap, activeItemId) {\n        component.itemButtonListComponents.forEach(c => c.destroy());\n        component.itemButtonListComponents = [];\n        component.controls.$tree.find(_selectors.itemButtonListContainer).each((index, itemButtonListContainerElem) => {\n          const itemButtonListComponent = itemButtonListFactory({\n            items: fizzyItemButtonMap.sections[index].items,\n            scrollContainer: component.controls.$tree\n          }).render(itemButtonListContainerElem).on('click', _ref => {\n            let {\n              id\n            } = _ref;\n            return onItemClick(id);\n          });\n          component.itemButtonListComponents.push(itemButtonListComponent);\n        });\n        component.itemButtonListComponents.forEach(c => c.setActiveItem(activeItemId));\n      }\n\n      /**\r\n       * Get list of items in format needed for rendering\r\n       * @param {Object} scopedMap - test map, limited to the scope\r\n       * @param {Boolean} disableUnseenItems\r\n       * @returns {Object}\r\n       */\n      function getFizzyItemButtonMap(scopedMap, disableUnseenItems) {\n        const {\n          displaySectionTitles,\n          displayItemTooltip\n        } = component.getConfig();\n        let nonInformationalCount = 0;\n        const fizzyMap = {\n          sections: []\n        };\n        _.forEach(scopedMap.parts, function (part) {\n          _.forEach(part.sections, function (dataSection) {\n            let fizzySection;\n            if (displaySectionTitles) {\n              fizzySection = {\n                label: dataSection.label,\n                items: []\n              };\n              fizzyMap.sections.push(fizzySection);\n            } else {\n              if (fizzyMap.sections.length) {\n                fizzySection = fizzyMap.sections[0];\n              } else {\n                fizzySection = {\n                  items: []\n                };\n                fizzyMap.sections.push(fizzySection);\n              }\n            }\n            _.forEach(dataSection.items, function (dataItem) {\n              if (!dataItem.informational) {\n                nonInformationalCount++;\n              }\n              const fizzyItem = {\n                id: dataItem.id,\n                position: dataItem.position\n              };\n              fizzySection.items.push(fizzyItem);\n              fizzyItem.numericLabel = dataItem.informational ? '' : `${nonInformationalCount}`;\n              if (dataItem.informational) {\n                fizzyItem.icon = 'info';\n                fizzyItem.ariaLabel = __('Informational item');\n              } else if (dataItem.flagged) {\n                fizzyItem.icon = 'flagged';\n                fizzyItem.ariaLabel = __('Bookmarked question %s', nonInformationalCount);\n              } else {\n                fizzyItem.icon = null;\n                fizzyItem.ariaLabel = __('Question %s', nonInformationalCount);\n              }\n              if (dataItem.answered) {\n                fizzyItem.status = 'answered';\n              } else if (dataItem.viewed) {\n                fizzyItem.status = 'viewed';\n              } else {\n                fizzyItem.status = 'unseen';\n              }\n              if (disableUnseenItems && !dataItem.viewed) {\n                // disables all unseen items to prevent the test taker has access to.\n                fizzyItem.disabled = true;\n              } else if (displayItemTooltip) {\n                fizzyItem.title = dataItem.label;\n              }\n            });\n          });\n        });\n        return fizzyMap;\n      }\n\n      /**\r\n       *\r\n       * @type {Object}\r\n       */\n      const navigatorApi = {\n        /**\r\n         * Set the marked state of an item\r\n         * @param {Number} position\r\n         * @param {Boolean} flag\r\n         */\n        setItemFlag(position, flag) {\n          const updatedMap = _.cloneDeep(this.map);\n          const updatedItem = mapHelper.getItemAt(updatedMap, position);\n          if (updatedItem && updatedItem.id) {\n            updatedItem.flagged = flag;\n            const updatedScopeMap = mapHelper.getScopeMapFromContext(updatedMap, this.testContext, this.config.scope);\n            const updatedFizzyMap = getFizzyItemButtonMap(updatedScopeMap, this.disableUnseenItems);\n            let updatedItemData;\n            _.forEach(updatedFizzyMap.sections, fizzySection => {\n              updatedItemData = _.find(fizzySection.items, fizzyItem => fizzyItem.id === updatedItem.id);\n              if (updatedItemData) {\n                return false;\n              }\n            });\n            this.itemButtonListComponents.forEach(c => c.updateItem(updatedItem.id, updatedItemData));\n          }\n        },\n        /**\r\n         * Update the config\r\n         * @returns {navigatorApi}\r\n         */\n        updateConfig() {\n          //not implemented\n          return this;\n        },\n        /**\r\n         * Updates the review screen\r\n         * @param {Object} map The current test map\r\n         * @param {Object} context The current test context\r\n         * @returns {navigatorApi}\r\n         * @fires navigator#update\r\n         */\n        update(map, context) {\n          const scopedMap = mapHelper.getScopeMapFromContext(map, context, this.config.scope);\n          scopedMap.displaySectionTitles = this.getConfig().displaySectionTitles;\n          const activeItemId = context.itemIdentifier;\n          const isSkipaheadEnabled = mapHelper.hasItemCategory(map, activeItemId, 'x-tao-option-review-skipahead');\n          this.map = map;\n          this.testContext = context;\n          this.disableUnseenItems = this.config.preventsUnseen && !isSkipaheadEnabled;\n\n          // rebuild the tree\n          const testPart = mapHelper.getPart(map, context.testPartId);\n          if (!testPart.isLinear) {\n            this.setState('skipahead-enabled', isSkipaheadEnabled);\n            this.setState('prevents-unseen', this.config.preventsUnseen);\n            this.controls.$linearState.hide();\n            this.controls.$tree.html(navigatorTreeTpl(scopedMap));\n            const fizzyItemButtonMap = getFizzyItemButtonMap(scopedMap, this.disableUnseenItems);\n            renderItemButtonListComponents(fizzyItemButtonMap, activeItemId);\n          } else {\n            this.controls.$linearState.show();\n            this.controls.$tree.empty();\n          }\n\n          /**\r\n           * @event navigator#update the navigation data have changed\r\n           */\n          this.trigger('update');\n          return this;\n        },\n        /**\r\n         * Selects an item\r\n         * @param {Number} position The item's position\r\n         */\n        select(position) {\n          let previousPosition = 0;\n          const previousItem = mapHelper.getItem(this.map, this.testContext.itemIdentifier);\n          if (previousItem && previousItem.id) {\n            previousPosition = previousItem.position;\n          }\n          const item = mapHelper.getItemAt(this.map, parseInt(position));\n          if (item && item.id) {\n            this.itemButtonListComponents.forEach(c => c.setActiveItem(item.id));\n          }\n\n          /**\r\n           * An item is selected\r\n           * @param {Number} position - The item position on which select\r\n           * @param {Number} previousPosition - The item position from which select\r\n           * @event navigator#selected\r\n           */\n          this.trigger('selected', position, previousPosition);\n        }\n      };\n      component = componentFactory(navigatorApi, _defaults).setTemplate(navigatorTpl).on('init', function () {\n        this.itemButtonListComponents = [];\n      }).on('destroy', function () {\n        this.controls = null;\n        this.itemButtonListComponents.forEach(c => c.destroy());\n        this.itemButtonListComponents = [];\n      }).on('render', function () {\n        const $component = this.getElement();\n        this.controls = {\n          $tree: $component.find(_selectors.tree),\n          $linearState: $component.find(_selectors.linearState),\n          $closeButton: $component.find(_selectors.closeButton)\n        };\n        this.controls.$closeButton.on('click', function (e) {\n          e.preventDefault();\n          /**\r\n           * Review screen should be closed\r\n           * @event navigator#close\r\n           */\n          component.trigger('close');\n        });\n      }).on('enable', function () {\n        this.itemButtonListComponents.forEach(c => c.enable());\n      }).on('disable', function () {\n        this.itemButtonListComponents.forEach(c => c.disable());\n      });\n      return component.init(config);\n    }\n\n    return navigatorFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/review/review',['lodash', 'i18n', 'ui/hider', 'util/shortcut', 'util/namespace', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/map', 'taoQtiTest/runner/plugins/navigation/review/navigator', 'taoQtiTest/runner/plugins/navigation/review/navigatorFizzy'], function (_, __, hider, shortcut, namespaceHelper, pluginFactory, mapHelper, defaultNavigatorFactory, fizzyNavigatorFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    defaultNavigatorFactory = defaultNavigatorFactory && Object.prototype.hasOwnProperty.call(defaultNavigatorFactory, 'default') ? defaultNavigatorFactory['default'] : defaultNavigatorFactory;\n    fizzyNavigatorFactory = fizzyNavigatorFactory && Object.prototype.hasOwnProperty.call(fizzyNavigatorFactory, 'default') ? fizzyNavigatorFactory['default'] : fizzyNavigatorFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The display states of the buttons\r\n     */\n    var buttonData = {\n      setFlag: {\n        control: 'set-item-flag',\n        title: __('Flag the current item for later review'),\n        icon: 'anchor',\n        text: __('Flag for Review')\n      },\n      unsetFlag: {\n        control: 'unset-item-flag',\n        title: __('Do not flag the current item for later review'),\n        icon: 'anchor',\n        text: __('Unflag for Review')\n      },\n      setFlagBookmarked: {\n        control: 'set-item-flag',\n        title: __('Bookmark the current question for later review'),\n        icon: 'bookmark',\n        text: __('Bookmark question')\n      },\n      unsetFlagBookmarked: {\n        control: 'unset-item-flag',\n        title: __('Do not bookmark the current question for later review'),\n        icon: 'bookmark-outline',\n        text: __('Bookmark question')\n      },\n      showReview: {\n        control: 'show-review',\n        title: __('Show the review screen'),\n        icon: 'right',\n        text: __('Show Review')\n      },\n      hideReview: {\n        control: 'hide-review',\n        title: __('Hide the review screen'),\n        icon: 'left',\n        text: __('Hide Review')\n      },\n      showTestOverview: {\n        control: 'show-test-overview',\n        title: __('Show test overview panel'),\n        icon: 'desktop-preview',\n        text: __('Test overview')\n      },\n      hideTestOverview: {\n        control: 'hide-test-overview',\n        title: __('Hide test overview panel'),\n        icon: 'desktop-preview',\n        text: __('Test overview')\n      }\n    };\n\n    /**\r\n     * Get the flagged value for the item at that position\r\n     * @param {Object} testMap\r\n     * @param {Number} position - the item position\r\n     * @returns {Boolean}\r\n     */\n    function isItemFlagged(testMap, position) {\n      const item = mapHelper.getItemAt(testMap, position);\n      return !!item.flagged;\n    }\n\n    /**\r\n     * Update the button based on the provided data\r\n     * @param {Component} button - the element to update\r\n     * @param {Object} data - the button data\r\n     */\n    function updateButton(button, data) {\n      var $button = button.getElement();\n      if (button.is('rendered')) {\n        if ($button.data('control') !== data.control) {\n          $button.data('control', data.control).attr('title', data.title);\n          $button.find('.icon').attr('class', `icon icon-${data.icon}`);\n          $button.find('.text').text(data.text);\n          if (data.control.includes('flag') || data.control.includes('overview')) {\n            if (button.is('active')) {\n              button.turnOff();\n            } else {\n              button.turnOn();\n            }\n          }\n        }\n      }\n    }\n\n    /**\r\n     * Checks if the current context allows to mark the item for review\r\n     * @param {Object} testRunner\r\n     * @returns {Boolean}\r\n     */\n    function canFlag(testRunner) {\n      const testContext = testRunner.getTestContext();\n      const testMap = testRunner.getTestMap();\n      const item = testRunner.getCurrentItem();\n      const testPart = testRunner.getCurrentPart();\n      const markReviewCategory = mapHelper.hasItemCategory(testMap, testContext.itemIdentifier, 'markReview', true);\n      return !!(!testPart.isLinear && markReviewCategory && !(item && item.informational));\n    }\n\n    /**\r\n     * Creates the timer plugin\r\n     */\n    var review = pluginFactory({\n      name: 'review',\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testContext = testRunner.getTestContext();\n        const testMap = testRunner.getTestMap();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n        const pluginConfig = this.getConfig();\n        let navigatorConfig = testRunnerOptions.review || {\n          defaultOpen: false\n        };\n        navigatorConfig = Object.assign({}, navigatorConfig, pluginConfig);\n        this.isFizzyLayout = navigatorConfig && navigatorConfig.reviewLayout === 'fizzy';\n        let previousItemPosition;\n\n        /**\r\n         * Gets the definition of the flagItem button related to the context\r\n         * @param {Boolean} flag - the flag status\r\n         * @returns {Object}\r\n         */\n        function getFlagItemButtonData(flag) {\n          let dataType = flag ? 'unsetFlag' : 'setFlag';\n          if (self.isFizzyLayout) {\n            dataType = flag ? 'unsetFlagBookmarked' : 'setFlagBookmarked';\n          }\n          return buttonData[dataType];\n        }\n\n        /**\r\n         * Gets the definition of the toggleNavigator button related to the context\r\n         * @param {Object} navigator - the navigator component\r\n         * @returns {Object}\r\n         */\n        function getToggleButtonData(navigator) {\n          let dataType = navigator.is('hidden') ? 'showReview' : 'hideReview';\n          if (self.isFizzyLayout) {\n            dataType = navigator.is('hidden') ? 'showTestOverview' : 'hideTestOverview';\n          }\n          return buttonData[dataType];\n        }\n\n        /**\r\n         * Retrieve the review categories of the current item\r\n         * @returns {Object} the calculator categories\r\n         */\n        function getReviewCategories() {\n          const currentContext = testRunner.getTestContext();\n          const currentMap = testRunner.getTestMap();\n          return {\n            reviewScreen: mapHelper.hasItemCategory(currentMap, currentContext.itemIdentifier, 'reviewScreen', true),\n            markReview: mapHelper.hasItemCategory(currentMap, currentContext.itemIdentifier, 'markReview', true)\n          };\n        }\n\n        /**\r\n         * Tells if the component is enabled\r\n         * @returns {Boolean}\r\n         */\n        function isPluginAllowed() {\n          const categories = getReviewCategories();\n          return navigatorConfig.enabled && categories.reviewScreen;\n        }\n\n        /**\r\n         * Mark an item for review\r\n         * @param {Number} position\r\n         * @param {Boolean} flag\r\n         * @returns {Promise}\r\n         */\n        function flagItem(position, flag) {\n          self.disable();\n          return testRunner.getProxy().callTestAction('flagItem', {\n            position,\n            flag\n          }).then(function () {\n            const item = mapHelper.getItemAt(testRunner.getTestMap(), position);\n\n            //update the value in the current testMap\n            item.flagged = flag;\n\n            // update the display of the flag button\n            updateButton(self.flagItemButton, getFlagItemButtonData(flag));\n\n            // update the item state\n            self.navigator.setItemFlag(position, flag);\n            self.enable();\n          }).catch(function () {\n            // rollback on the item flag\n            self.navigator.setItemFlag(position, !flag);\n            self.enable();\n          });\n        }\n\n        /**\r\n         * Mark the current item for review\r\n         */\n        function flagCurrentItem() {\n          if (self.getState('enabled') !== false) {\n            const itemPosition = testRunner.getTestContext().itemPosition;\n            const flagStatus = isItemFlagged(testRunner.getTestMap(), itemPosition);\n            flagItem(itemPosition, !flagStatus);\n          }\n        }\n\n        /**\r\n         * Shows/hides the review panel\r\n         *\r\n         * @param [{Boolean} forcedState], true will show the panel\r\n         */\n        function togglePanel(forcedState) {\n          var isHidden = _.isUndefined(forcedState) ? self.navigator.is('hidden') : forcedState;\n          if (isHidden) {\n            self.explicitlyHidden = false;\n            self.navigator.show();\n          } else {\n            self.explicitlyHidden = true;\n            self.navigator.hide();\n          }\n          updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n        }\n        const navigatorFactory = this.isFizzyLayout ? fizzyNavigatorFactory : defaultNavigatorFactory;\n        this.navigator = navigatorFactory(navigatorConfig).on('selected', function (position, previousPosition) {\n          previousItemPosition = previousPosition;\n        }).on('jump', function (position) {\n          if (self.getState('enabled') !== false) {\n            self.disable();\n            testRunner.jump(position, 'item');\n          }\n        }).on('flag', function (position, flag) {\n          if (self.getState('enabled') !== false) {\n            flagItem(position, flag);\n          }\n        }).on('close', function () {\n          testRunner.trigger('tool-reviewpanel');\n        }).render();\n\n        // restore current item in the navigator if movement not allowed\n        testRunner.on('alert.notallowed', function () {\n          self.navigator.select(previousItemPosition);\n        });\n        this.explicitlyHidden = false;\n\n        // register buttons in the toolbox component\n        this.toggleButton = this.getAreaBroker().getToolbox().createEntry(getToggleButtonData(this.navigator));\n        this.toggleButton.on('click', function (e) {\n          e.preventDefault();\n          testRunner.trigger('tool-reviewpanel');\n        });\n        this.flagItemButton = this.getAreaBroker().getToolbox().createEntry(getFlagItemButtonData(isItemFlagged(testMap, testContext.itemPosition)));\n        this.flagItemButton.on('click', function (e) {\n          e.preventDefault();\n          testRunner.trigger('tool-flagitem');\n        });\n        if (testRunnerOptions.allowShortcuts) {\n          if (pluginShortcuts.flag) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.flag, this.getName(), true), function () {\n              testRunner.trigger('tool-flagitem');\n            }, {\n              avoidInput: true\n            });\n          }\n          if (pluginShortcuts.toggle) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n              testRunner.trigger('tool-reviewpanel');\n            }, {\n              avoidInput: true\n            });\n          }\n        }\n        if (!isPluginAllowed()) {\n          this.hide();\n        }\n\n        //disabled by default\n        this.disable();\n        togglePanel(navigatorConfig.defaultOpen);\n\n        //change plugin state\n        testRunner.on('render', function () {\n          if (isPluginAllowed()) {\n            self.show();\n            updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n          } else {\n            self.hide();\n          }\n        }).on('loaditem', function () {\n          const context = testRunner.getTestContext();\n          const map = testRunner.getTestMap();\n          const testPart = testRunner.getCurrentPart();\n          const categories = getReviewCategories();\n          if (isPluginAllowed()) {\n            updateButton(self.flagItemButton, getFlagItemButtonData(isItemFlagged(map, context.itemPosition)));\n            self.navigator.update(map, context).updateConfig({\n              canFlag: !testPart.isLinear && categories.markReview\n            });\n            self.show();\n            updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n          } else {\n            self.hide();\n          }\n        }).on('enabletools enablenav', function () {\n          if (isPluginAllowed()) {\n            self.enable();\n          }\n        }).on('disabletools disablenav', function () {\n          if (isPluginAllowed()) {\n            self.disable();\n          }\n        }).on('hidenav', function () {\n          self.hide();\n        }).on('shownav', function () {\n          if (isPluginAllowed()) {\n            self.show();\n          }\n        }).on('tool-flagitem', function () {\n          if (isPluginAllowed() && canFlag(testRunner)) {\n            flagCurrentItem();\n          }\n        }).on('tool-reviewpanel', function () {\n          if (isPluginAllowed() && self.getState('enabled')) {\n            togglePanel();\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var areaBroker = this.getAreaBroker();\n        var $panelContainer = areaBroker.getPanelArea();\n        $panelContainer.append(this.navigator.getElement());\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        shortcut.remove(`.${this.getName()}`);\n        this.navigator.destroy();\n      },\n      /**\r\n       * Enables the button\r\n       */\n      enable: function enable() {\n        const testRunner = this.getTestRunner();\n        const testContext = testRunner.getTestContext();\n        const testMap = testRunner.getTestMap();\n        this.flagItemButton.enable();\n        this.toggleButton.enable();\n        this.navigator.enable();\n        if (isItemFlagged(testMap, testContext.itemPosition)) {\n          this.flagItemButton.turnOn();\n        } else {\n          this.flagItemButton.turnOff();\n        }\n        if (this.isFizzyLayout) {\n          if (!this.explicitlyHidden) {\n            this.toggleButton.turnOn();\n          } else {\n            this.toggleButton.turnOff();\n          }\n        }\n      },\n      /**\r\n       * Disables the button\r\n       */\n      disable: function disable() {\n        this.flagItemButton.disable();\n        this.flagItemButton.turnOff();\n        this.toggleButton.disable();\n        if (this.isFizzyLayout) {\n          this.toggleButton.turnOff();\n        }\n        this.navigator.disable();\n      },\n      /**\r\n       * Shows the button\r\n       */\n      show: function show() {\n        var testRunner = this.getTestRunner();\n        if (canFlag(testRunner)) {\n          this.flagItemButton.show();\n        } else {\n          this.flagItemButton.hide();\n        }\n        this.toggleButton.show();\n        if (!this.explicitlyHidden) {\n          this.navigator.show();\n        } else {\n          this.navigator.hide();\n        }\n      },\n      /**\r\n       * Hides the button\r\n       */\n      hide: function hide() {\n        this.flagItemButton.hide();\n        this.toggleButton.hide();\n        this.navigator.hide();\n      }\n    });\n\n    return review;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/skip',['jquery', 'i18n', 'ui/hider', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/messages', 'handlebars', 'lib/handlebars/helpers', 'taoQtiTest/runner/helpers/navigation', 'taoQtiTest/runner/helpers/map'], function ($$1, __, hider, pluginFactory, messages, Handlebars, Helpers0, navigationHelper, mapHelper) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    hider = hider && Object.prototype.hasOwnProperty.call(hider, 'default') ? hider['default'] : hider;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    messages = messages && Object.prototype.hasOwnProperty.call(messages, 'default') ? messages['default'] : messages;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n    navigationHelper = navigationHelper && Object.prototype.hasOwnProperty.call(navigationHelper, 'default') ? navigationHelper['default'] : navigationHelper;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \" \";\n      if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \"\", stack1;\n      buffer += \"\\r\\n        aria-\"\n        + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n        + \"=\\\"\"\n        + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))\n        + \"\\\"\\r\\n    \";\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"icon icon-\";\n      if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1);\n      stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"></span>\";\n      return buffer;\n      }\n    function program6(depth0,data) {\n      \n      \n      return \" no-label\";\n      }\n\n    function program8(depth0,data) {\n      \n      var buffer = \"\", stack1, helper;\n      buffer += \"<span class=\\\"text\\\">\";\n      if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\";\n      return buffer;\n      }\n\n      buffer += \"<li\\r\\n    data-control=\\\"\";\n      if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    class=\\\"small btn-info action\";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\\"\\r\\n    title=\\\"\";\n      if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"\\\"\\r\\n    role=\\\"button\\\"\\r\\n    \";\n      stack1 = helpers.each.call(depth0, (depth0 && depth0.aria), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n>\\r\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\" onclick=\\\"return false\\\" aria-hidden=\\\"true\\\" >\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n        \";\n      stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"\\r\\n    </a>\\r\\n</li>\\r\\n\";\n      return buffer;\n      });\n    function buttonTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The display of the skip\r\n     */\n    var buttonData = {\n      skip: {\n        control: 'skip',\n        title: __('Skip and go to the next item'),\n        icon: 'external',\n        text: __('Skip')\n      },\n      end: {\n        control: 'skip-end',\n        title: __('Skip and go to the end of the test'),\n        icon: 'external',\n        text: __('Skip and end test')\n      }\n    };\n\n    /**\r\n     * Create the button based on the current context\r\n     * @param {Object} testRunner - testRunner\r\n     * @returns {jQueryElement} the button\r\n     */\n    var createElement = function createElement(testRunner) {\n      const testContext = testRunner.getTestContext();\n      const testMap = testRunner.getTestMap();\n      const isLast = navigationHelper.isLast(testMap, testContext.itemIdentifier);\n      const dataType = isLast ? 'end' : 'skip';\n      return $$1(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\r\n     * Update the button based on the context\r\n     * @param {jQueryElement} $element - the element to update\r\n     * @param {Boolean} [isLast=false] - are we on the last item ?\r\n     */\n    const updateElement = function updateElement($element) {\n      let isLast = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const dataType = isLast ? 'end' : 'skip';\n      const button = buttonData[dataType];\n      if (button && $element.attr('data-control') !== button.control) {\n        $element.attr('data-control', button.control).attr('title', button.title).find('.text').text(button.text);\n      }\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var skip = pluginFactory({\n      name: 'skip',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        const toggle = () => {\n          const testContext = testRunner.getTestContext();\n          if (testContext.allowSkipping === true) {\n            this.show();\n            return true;\n          }\n          this.hide();\n          return false;\n        };\n        function doSkip() {\n          testRunner.skip();\n        }\n        this.$element = createElement(testRunner);\n        this.$element.on('click', e => {\n          const enable = this.enable.bind(this);\n          const testContext = testRunner.getTestContext();\n          const testMap = testRunner.getTestMap();\n          const isLast = navigationHelper.isLast(testMap, testContext.itemIdentifier);\n          const endTestWarning = mapHelper.hasItemCategory(testMap, testContext.itemIdentifier, 'endTestWarning', true);\n          e.preventDefault();\n          if (this.getState('enabled') !== false) {\n            this.disable();\n            if (endTestWarning && isLast) {\n              testRunner.trigger('confirm.endTest', messages.getExitMessage('test', testRunner), doSkip,\n              // if the test taker accept\n              enable // if the test taker refuse\n              );\n            } else {\n              doSkip();\n            }\n          }\n        });\n        toggle();\n        this.disable();\n        testRunner.on('loaditem', () => {\n          if (toggle()) {\n            const testContext = testRunner.getTestContext();\n            const testMap = testRunner.getTestMap();\n            const isLast = navigationHelper.isLast(testMap, testContext.itemIdentifier);\n            updateElement(this.$element, isLast);\n          }\n        }).on('enablenav', () => this.enable()).on('disablenav', () => this.disable()).on('hidenav', () => this.hide()).on('shownav', () => this.show());\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var $container = this.getAreaBroker().getNavigationArea();\n        $container.append(this.$element);\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        this.$element.remove();\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.$element.removeProp('disabled').removeClass('disabled');\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.$element.prop('disabled', true).addClass('disabled');\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        hider.show(this.$element);\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        hider.hide(this.$element);\n      }\n    });\n\n    return skip;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/validateResponses',['lodash', 'i18n', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/currentItem'], function (_, __, pluginFactory, currentItemHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    currentItemHelper = currentItemHelper && Object.prototype.hasOwnProperty.call(currentItemHelper, 'default') ? currentItemHelper['default'] : currentItemHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2017-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n    var pluginName = 'validateResponses';\n\n    /**\r\n     * Plugin\r\n     * @returns {Object}\r\n     */\n    var validateResponses = pluginFactory({\n      /**\r\n       * Plugin name\r\n       * @type {String}\r\n       */\n      name: pluginName,\n      /**\r\n       * Initialize plugin (called during runner's initialization)\r\n       * @returns {this}\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginConfig = this.getConfig();\n        testRunner.before('move', (e, direction) => {\n          const testContext = testRunner.getTestContext();\n          const isInteracting = !testRunner.getItemState(testContext.itemIdentifier, 'disabled');\n          if (!pluginConfig.validateOnPreviousMove && direction === 'previous') {\n            return Promise.resolve();\n          }\n          if (isInteracting && testRunnerOptions.enableValidateResponses) {\n            const currenItem = testRunner.getCurrentItem();\n            //@deprecated use validateResponses from testMap instead of the testContext\n            const validateResponses = typeof currenItem.validateResponses === 'boolean' ? currenItem.validateResponses : testContext.validateResponses;\n            if (validateResponses) {\n              return new Promise((resolve, reject) => {\n                if (_.size(currentItemHelper.getDeclarations(testRunner)) === 0) {\n                  return resolve();\n                }\n                if (currentItemHelper.isAnswered(testRunner, false)) {\n                  return resolve();\n                }\n                if (!testRunner.getState('alerted.notallowed')) {\n                  // Only show one alert for itemSessionControl\n                  testRunner.setState('alerted.notallowed', true);\n                  testRunner.trigger('alert.notallowed', __('A valid response to this item is required.'), () => {\n                    testRunner.trigger('resumeitem');\n                    reject();\n                    testRunner.setState('alerted.notallowed', false);\n                  });\n                }\n              });\n            }\n          }\n        });\n        return this;\n      }\n    });\n\n    return validateResponses;\n\n});\n\n","define('taoQtiTest/runner/plugins/navigation/warnBeforeLeaving',['i18n', 'taoTests/runner/plugin'], function (__, pluginFactory) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * There's only a few chance to have this message displayed.\r\n     * Most browsers doesn't support custom message anymore.\r\n     * See https://www.chromestatus.com/feature/5349061406228480\r\n     */\n    var warnMessage = __('Please confirm you want to leave the test.');\n\n    /**\r\n     * The beforeunload listener\r\n     * @param {Event} e\r\n     * @returns {String} the custom message (for some browser, just need to be a string)\r\n     */\n    var warnListener = function warnListener(e) {\n      e.returnValue = warnMessage;\n      return warnMessage;\n    };\n\n    /**\r\n     * Plugin factory\r\n     * @returns {Object}\r\n     */\n    var warnBeforeLeaving = pluginFactory({\n      /**\r\n       * Plugin name\r\n       * @type {String}\r\n       */\n      name: 'warnBeforeLeaving',\n      /**\r\n       * Initialize plugin (called during runner's initialization)\r\n       */\n      init: function init() {\n        this.enable();\n      },\n      /**\r\n       * Destroy plugin (called during runner's destruction)\r\n       */\n      destroy: function destroy() {\n        this.disable();\n      },\n      /**\r\n       * Enables the warning\r\n       */\n      enable: function enable() {\n        window.addEventListener('beforeunload', warnListener);\n      },\n      /**\r\n       * Disables the warning\r\n       */\n      disable: function disable() {\n        window.removeEventListener('beforeunload', warnListener);\n      }\n    });\n\n    return warnBeforeLeaving;\n\n});\n\n","define('taoQtiTest/runner/plugins/security/disableRightClick',['taoTests/runner/plugin'], function (pluginFactory) { 'use strict';\n\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n    var disableRightClick = pluginFactory({\n      name: 'disableRightClick',\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var rightClickEvents = ['contextmenu', 'mousedown', 'mouseup'];\n        rightClickEvents.forEach(function (eventName) {\n          window.document.addEventListener(eventName, function disableRightClick(event) {\n            if (event.button === 2) {\n              event.preventDefault();\n            }\n          });\n        });\n      }\n    });\n\n    return disableRightClick;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/answerElimination/eliminator',['lodash', 'i18n', 'ui/hider', 'util/shortcut', 'util/namespace', 'taoQtiTest/runner/helpers/map', 'taoTests/runner/plugin'], function (_, __, hider, shortcut, namespaceHelper, mapHelper, pluginFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\r\n     */\n\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\n    var pluginName = 'eliminator';\n\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\n    var actionPrefix = `tool-${pluginName}-`;\n\n    /**\r\n     * Some default options for the plugin\r\n     * @type {Object}\r\n     */\n    var defaultConfig = {\n      // when hiding the buttons, don't remove existing eliminations\n      removeEliminationsOnClose: false,\n      // when showing the buttons, restore previously set eliminations\n      restoreEliminationsOnOpen: false\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var eliminator = pluginFactory({\n      name: pluginName,\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const $container = testRunner.getAreaBroker().getContentArea().parent();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[pluginName] || {};\n        const config = Object.assign({}, defaultConfig, this.getConfig());\n\n        // register the button in the toolbox\n        this.button = this.getAreaBroker().getToolbox().createEntry({\n          control: 'eliminator',\n          title: __('Eliminate choices'),\n          icon: 'eliminate',\n          text: __('Answer Eliminator')\n        });\n\n        /**\r\n         * Checks if the plugin is currently available\r\n         * @returns {Boolean}\r\n         */\n        function isPluginEnabled() {\n          //to be activated with the special category x-tao-option-eliminator\n          return mapHelper.hasItemCategory(testRunner.getTestMap(), testRunner.getTestContext().itemIdentifier, 'eliminator', true);\n        }\n\n        /**\r\n         * Is plugin activated ? if not, then we hide the plugin\r\n         */\n        function togglePluginButton() {\n          if (isPluginEnabled()) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        }\n        function togglePlugin() {\n          if (!self.$choiceInteractions) {\n            return;\n          }\n          self.$choiceInteractions.toggleClass('eliminable');\n          if (isEliminable()) {\n            enableEliminator();\n          } else {\n            disableEliminator();\n          }\n        }\n        function isEliminable() {\n          if (!self.$choiceInteractions) {\n            return;\n          }\n          return self.$choiceInteractions.hasClass('eliminable');\n        }\n        function enableEliminator() {\n          var $choices;\n          if (!self.$choiceInteractions) {\n            return;\n          }\n          $choices = self.$choiceInteractions.find('.qti-choice');\n          self.button.turnOn();\n          self.trigger('start');\n          if (config.restoreEliminationsOnOpen) {\n            $choices.each(function () {\n              var input = this.querySelector('.real-label input');\n              if (this.dataset.wasEliminated) {\n                this.dataset.wasEliminated = null;\n                this.classList.add('eliminated');\n                input.setAttribute('disabled', 'disabled');\n                input.checked = false;\n              }\n            });\n          }\n        }\n        function disableEliminator() {\n          var $choices;\n          if (!self.$choiceInteractions) {\n            return;\n          }\n          $choices = self.$choiceInteractions.find('.qti-choice');\n          self.$choiceInteractions.removeClass('eliminable');\n          self.button.turnOff();\n          self.trigger('end');\n          $choices.each(function () {\n            if (this.classList.contains('eliminated')) {\n              this.dataset.wasEliminated = true;\n              this.classList.remove('eliminated');\n              this.querySelector('.real-label input').removeAttribute('disabled');\n            }\n          });\n        }\n\n        //add a new mask each time the button is pressed\n        this.button.on('click', function (e) {\n          e.preventDefault();\n          testRunner.trigger(`${actionPrefix}toggle`);\n        });\n\n        // handle the plugin's shortcuts\n        if (testRunnerOptions.allowShortcuts) {\n          _.forEach(pluginShortcuts, function (command, key) {\n            shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n              // just fire the action using the event loop\n              testRunner.trigger(actionPrefix + key);\n            }, {\n              avoidInput: true\n            });\n          });\n        }\n\n        //start disabled\n        this.disable();\n\n        //update plugin state based on changes\n        testRunner.on('loaditem', togglePluginButton).on('renderitem', function conditionalInit() {\n          // show button only when in the presence of choice interactions\n          self.$choiceInteractions = $container.find('.qti-choiceInteraction');\n          if (!self.$choiceInteractions.length) {\n            self.hide();\n            return;\n          }\n          if (isPluginEnabled()) {\n            self.show();\n          }\n        }).on('enabletools renderitem', function () {\n          self.enable();\n        }).on('disabletools unloaditem', function () {\n          self.disable();\n          disableEliminator();\n        })\n\n        // commands that controls the plugin\n        .on(`${actionPrefix}toggle`, function () {\n          if (isPluginEnabled()) {\n            togglePlugin();\n          }\n        })\n        // Answer-eliminator and Answer-masking are mutually exclusive tools\n        .on('tool-answer-masking-toggle', function () {\n          if (isEliminable()) {\n            disableEliminator();\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        shortcut.remove(`.${pluginName}`);\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.button.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.button.disable();\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        this.button.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        this.button.hide();\n      }\n    });\n\n    return eliminator;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/answerMasking/answerMasking',['lodash', 'jquery', 'core/statifier', 'ui/component', 'handlebars', 'lib/handlebars/helpers'], function (_, $$1, statifier, componentFactory, Handlebars, Helpers0) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    statifier = statifier && Object.prototype.hasOwnProperty.call(statifier, 'default') ? statifier['default'] : statifier;\n    componentFactory = componentFactory && Object.prototype.hasOwnProperty.call(componentFactory, 'default') ? componentFactory['default'] : componentFactory;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers);  \n\n\n      return \"<div class=\\\"answer-mask\\\">\\r\\n    <span class=\\\"answer-mask-toggle\\\"></span>\\r\\n</div>\";\n      });\n    function maskTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\r\n     */\n    var ns = '.answerMasking';\n\n    /**\r\n     * @param {jQuery} $contentArea - DOM element containing the rendered item\r\n     */\n    function answerMaskingFactory($contentArea) {\n      var answerMasking,\n        allMasks = [],\n        maskApi = {\n          /**\r\n           * Toggle mask visibility\r\n           * @returns {component}\r\n           */\n          toggle: function toggle() {\n            if (this.is('masked')) {\n              return this.reveal();\n            } else {\n              return this.mask();\n            }\n          },\n          /**\r\n           * Show the choice under the current mask\r\n           * @returns {component}\r\n           */\n          reveal: function reveal() {\n            var $container = this.getContainer();\n            $container.removeClass('masked');\n            $container.find('input').removeAttr('disabled');\n            this.setState('masked', false);\n            return this;\n          },\n          /**\r\n           * Cover the whole choice with the mask\r\n           * @returns {component}\r\n           */\n          mask: function mask() {\n            var $container = this.getContainer();\n            $container.addClass('masked');\n            $container.find('input').attr('disabled', 'disabled');\n            this.setState('masked', true);\n            return this;\n          }\n        };\n\n      /**\r\n       * Creates a ui/component to serve as a mask over a QTI Choice\r\n       * @param {jQuery} $container - the qti-choice element\r\n       * @returns {component}\r\n       */\n      function createMask($container) {\n        return componentFactory(maskApi).setTemplate(maskTpl).on('render', function () {\n          var self = this,\n            $component = this.getElement();\n          $component.on(`click${ns}`, function (e) {\n            e.stopPropagation();\n            e.preventDefault();\n            self.toggle();\n          });\n        }).on('destroy', function () {\n          var $component = this.getElement();\n          $component.off(ns);\n        }).init().render($container).mask();\n      }\n\n      /**\r\n       * The answer masking helper\r\n       */\n      answerMasking = {\n        /**\r\n         * Enable the answer masking functionality by creating masks over the Qti Choices\r\n         */\n        enable: function enable() {\n          var $choiceInteractions = $contentArea.find('.qti-choiceInteraction'),\n            $qtiChoices = $contentArea.find('.qti-choice');\n          allMasks = [];\n          $choiceInteractions.addClass('maskable');\n          $qtiChoices.each(function () {\n            var $choice = $$1(this);\n            allMasks.push(createMask($choice));\n          });\n          this.setState('enabled', true);\n        },\n        /**\r\n         * Remove any answerMasking-related markup from the rendered item\r\n         */\n        disable: function disable() {\n          var $choiceInteractions = $contentArea.find('.qti-choiceInteraction');\n          $choiceInteractions.removeClass('maskable');\n          allMasks.forEach(function (mask) {\n            mask.reveal(); // remove class on container\n            mask.destroy();\n          });\n          allMasks = [];\n          this.setState('enabled', false);\n        },\n        /**\r\n         * Return the current state of the masks\r\n         * @returns {Boolean[]} - true if the choice is masked, false if the choice is revealed\r\n         */\n        getMasksState: function getMasksState() {\n          var state = allMasks.map(function (mask) {\n            return mask.is('masked');\n          });\n          return state;\n        },\n        /**\r\n         * Restore a previously saved state for the masked choices\r\n         * @param {Boolean[]} state - array of boolean, most probably given by the getMasksState method\r\n         */\n        setMasksState: function setMasksState(state) {\n          state = state || [];\n          state.forEach(function (masked, index) {\n            var mask = allMasks[index];\n            if (_.isObject(mask) && _.isFunction(mask.reveal) && !masked) {\n              mask.reveal();\n            }\n          });\n        }\n      };\n      statifier(answerMasking);\n      return answerMasking;\n    }\n\n    return answerMaskingFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/answerMasking/plugin',['i18n', 'taoTests/runner/plugin', 'ui/hider', 'util/shortcut', 'util/namespace', 'taoQtiTest/runner/helpers/map', 'taoQtiTest/runner/plugins/tools/answerMasking/answerMasking'], function (__, pluginFactory, hider, shortcut, namespaceHelper, mapHelper, answerMaskingFactory) { 'use strict';\n\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    answerMaskingFactory = answerMaskingFactory && Object.prototype.hasOwnProperty.call(answerMaskingFactory, 'default') ? answerMaskingFactory['default'] : answerMaskingFactory;\n\n    /*\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2017 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n     *\r\n     */\n\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\n    var pluginName = 'answer-masking';\n\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\n    var actionPrefix = `tool-${pluginName}-`;\n\n    /**\r\n     * Stores the masking state for each item in the test\r\n     * @type {Object}\r\n     */\n    var itemStates = {};\n\n    /**\r\n     * Default Configuration\r\n     */\n    var defaultConfig = {\n      restoreStateOnToggle: true,\n      restoreStateOnMove: true\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var plugin = pluginFactory({\n      name: pluginName,\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginConfig = Object.assign({}, defaultConfig, this.getConfig());\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[pluginName] || {};\n        const $contentArea = this.getAreaBroker().getContentArea();\n        var answerMasking = answerMaskingFactory($contentArea);\n        function isPluginEnabled() {\n          //to be activated with the special category x-tao-option-answerMasking\n          const answerMaskingCategory = mapHelper.hasItemCategory(testRunner.getTestMap(), testRunner.getTestContext().itemIdentifier, 'answerMasking', true);\n          return answerMaskingCategory && itemContainsChoiceInteraction();\n        }\n        function itemContainsChoiceInteraction() {\n          var $container = self.getAreaBroker().getContentArea().parent();\n          return $container.find('.qti-choiceInteraction').length;\n        }\n        function togglePluginButton() {\n          if (isPluginEnabled()) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        }\n        function togglePlugin() {\n          if (!answerMasking.getState('enabled')) {\n            enableMasking();\n          } else {\n            disableMasking();\n          }\n        }\n        function enableMasking() {\n          var testContext = testRunner.getTestContext(),\n            itemId = testContext.itemIdentifier;\n          answerMasking.enable();\n          if (pluginConfig.restoreStateOnToggle) {\n            answerMasking.setMasksState(itemStates[itemId]);\n          }\n          self.button.turnOn();\n          self.trigger('start');\n        }\n        function disableMasking() {\n          var testContext = testRunner.getTestContext(),\n            itemId = testContext.itemIdentifier;\n          if (answerMasking.getState('enabled')) {\n            itemStates[itemId] = answerMasking.getMasksState();\n          }\n          answerMasking.disable();\n          self.button.turnOff();\n          self.trigger('end');\n        }\n\n        // create buttons\n        this.button = this.getAreaBroker().getToolbox().createEntry({\n          title: __('Answer Masking'),\n          icon: 'result-nok',\n          control: 'answer-masking',\n          text: __('Answer Masking')\n        });\n\n        // attach user events\n        this.button.on('click', function (e) {\n          e.preventDefault();\n          testRunner.trigger(`${actionPrefix}toggle`);\n        });\n        if (testRunnerOptions.allowShortcuts) {\n          if (pluginShortcuts.toggle) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n              testRunner.trigger(`${actionPrefix}toggle`);\n            }, {\n              avoidInput: true,\n              prevent: true\n            });\n          }\n        }\n\n        //start disabled\n        this.disable();\n\n        //update plugin state based on changes\n        testRunner.on('loaditem', function () {\n          var testContext = testRunner.getTestContext(),\n            itemId = testContext.itemIdentifier;\n          if (!pluginConfig.restoreStateOnMove) {\n            itemStates[itemId] = [];\n          }\n          togglePluginButton();\n        }).on('enabletools renderitem', function () {\n          togglePluginButton(); // we repeat this here as we need the rendered item markup in order to decide whether the plugin is enabled\n          self.enable();\n        }).on('beforeunloaditem', function () {\n          disableMasking();\n        }).on('disabletools unloaditem', function () {\n          self.disable();\n          disableMasking();\n        }).on(`${actionPrefix}toggle`, function () {\n          if (isPluginEnabled()) {\n            togglePlugin();\n          }\n        })\n        // Answer-eliminator and Answer-masking are mutually exclusive tools\n        .on('tool-eliminator-toggle', function () {\n          disableMasking();\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        shortcut.remove(`.${this.getName()}`);\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.button.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.button.disable();\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        this.button.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        this.button.hide();\n      }\n    });\n\n    return plugin;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/apipTextToSpeech/textToSpeech',['jquery', 'i18n', 'handlebars', 'lib/handlebars/helpers', 'ui/component', 'interact', 'ui/component/stackable', 'ui/component/placeable', 'ui/feedback', 'nouislider'], function ($$1, __, Handlebars, Helpers0, component, interact, makeStackable, makePlaceable, feedback, nouislider) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;\n    interact = interact && Object.prototype.hasOwnProperty.call(interact, 'default') ? interact['default'] : interact;\n    makeStackable = makeStackable && Object.prototype.hasOwnProperty.call(makeStackable, 'default') ? makeStackable['default'] : makeStackable;\n    makePlaceable = makePlaceable && Object.prototype.hasOwnProperty.call(makePlaceable, 'default') ? makePlaceable['default'] : makePlaceable;\n    feedback = feedback && Object.prototype.hasOwnProperty.call(feedback, 'default') ? feedback['default'] : feedback;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      buffer += \"<div class=\\\"tts-container\\\">\\r\\n    <div class=\\\"tts-controls\\\">\\r\\n        <div class=\\\"tts-control-container\\\">\\r\\n            <a class=\\\"tts-control tts-control-close\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close\", options) : helperMissing.call(depth0, \"__\", \"Close\", options)))\n        + \"\\\">\\r\\n                <span class=\\\"icon-result-nok tts-icon\\\"></span>\\r\\n            </a>\\r\\n        </div>\\r\\n        <div class=\\\"tts-control-container\\\">\\r\\n            <a class=\\\"tts-control tts-control-drag\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move\", options) : helperMissing.call(depth0, \"__\", \"Move\", options)))\n        + \"\\\">\\r\\n                <span class=\\\"icon-grip tts-icon\\\"></span>\\r\\n                <span class=\\\"tts-control-label\\\">\\r\\n                    \"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Text to Speech\", options) : helperMissing.call(depth0, \"__\", \"Text to Speech\", options)))\n        + \"\\r\\n                </span>\\r\\n            </a>\\r\\n        </div>\\r\\n        <div class=\\\"tts-control-container\\\">\\r\\n            <a class=\\\"tts-control tts-control-playback\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Toggle playback\", options) : helperMissing.call(depth0, \"__\", \"Toggle playback\", options)))\n        + \"\\\">\\r\\n                <span class=\\\"icon-play tts-icon\\\"></span>\\r\\n                <span class=\\\"icon-pause tts-icon\\\"></span>\\r\\n            </a>\\r\\n        </div>\\r\\n        <div class=\\\"tts-control-container\\\">\\r\\n            <a class=\\\"tts-control tts-control-mode\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Toggle start from here mode\", options) : helperMissing.call(depth0, \"__\", \"Toggle start from here mode\", options)))\n        + \"\\\">\\r\\n                <span class=\\\"icon-play-from-here tts-icon\\\"></span>\\r\\n            </a>\\r\\n        </div>\\r\\n        <div class=\\\"tts-control-container\\\">\\r\\n            <a class=\\\"tts-control tts-control-settings\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Settings\", options) : helperMissing.call(depth0, \"__\", \"Settings\", options)))\n        + \"\\\">\\r\\n                <span class=\\\"icon-property-advanced tts-icon\\\"></span>\\r\\n            </a>\\r\\n            <div class=\\\"tts-slider-container\\\">\\r\\n                \"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Speed\", options) : helperMissing.call(depth0, \"__\", \"Speed\", options)))\n        + \"<div class=\\\"tts-slider\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function ttsTemplate(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2019 (original work) Open Assessment Technologies SA;\r\n     */\n    const defaultConfig = {\n      activeElementClass: 'tts-active-content-node',\n      elementClass: 'tts-content-node',\n      left: -10,\n      maxPlaybackRate: 2,\n      minPlaybackRate: 0.5,\n      playbackRate: 1,\n      top: 50\n    };\n    const stackingOptions = {\n      stackingScope: 'test-runner'\n    };\n\n    /**\r\n     * Creates an instance of Text to Speech component\r\n     *\r\n     * @param {Element} container\r\n     * @param {Object} config - component configurations\r\n     * @param {String} config.activeElementClass - class applied to active content element. Default value 'tts-active-content-node'\r\n     * @param {String} config.elementClass - class applied to content element. Default value 'tts-content-node'\r\n     * @param {Number} config.left - initial left position of component. Default value 50\r\n     * @param {Number} config.maxPlaybackRate - max playback rate. Default value 2\r\n     * @param {Number} config.minPlaybackRate - min playback rate. Default value 0.5\r\n     * @param {Number} config.playbackRate - playback rate. Default value 1\r\n     * @param {Number} config.top - initial top position of component. Default value 50\r\n     * @returns {ttsComponent} the textToSpeech component (uninitialized)\r\n     */\n    function maskingComponentFactory(container, config) {\n      const audio = new Audio();\n      let currentPlayback = [];\n      let currentItem;\n      let mediaContentData = [];\n      let playbackRate;\n\n      // Browser does not support selection Api If getSelection is not defined\n      const selection = window.getSelection && window.getSelection();\n\n      // component API\n      const spec = {\n        /**\r\n         * Remove APIP element class and click handlers from APIP elements\r\n         */\n        clearAPIPElements() {\n          const {\n            elementClass\n          } = this.config;\n          const $contentNodes = $$1(mediaContentData.map(_ref => {\n            let {\n              selector\n            } = _ref;\n            return selector;\n          }).join(', '), container);\n          $contentNodes.removeClass(elementClass);\n          $contentNodes.off('click', this.handleContentNodeClick);\n        },\n        /**\r\n         * Update componet state and stop playback\r\n         *\r\n         * @fires close\r\n         */\n        close() {\n          this.setTTSStateOnContainer('playing', false);\n          this.setTTSStateOnContainer('sfhMode', false);\n          this.setState('settings', false);\n          this.stop();\n          this.trigger('close');\n        },\n        /**\r\n         * Get current active APIP item\r\n         *\r\n         * @returns {Object} active APIP item\r\n         */\n        getCurrentItem() {\n          return currentItem;\n        },\n        /**\r\n         * When component in start from here mode, switch to clicked content element\r\n         *\r\n         * @param {Object} e - event object\r\n         */\n        handleContentNodeClick(e) {\n          const $target = $$1(e.target);\n\n          // Allow default behaviour for inputs\n          if ($target.hasClass('icon-checkbox') || $target.hasClass('icon-radio') || $target.is('input')) {\n            return;\n          }\n\n          // Prevent default behaviour for lables and links\n          e.stopPropagation();\n          e.preventDefault();\n          if (!this.is('sfhMode')) {\n            return;\n          }\n          const $currentTarget = $$1(e.currentTarget);\n          // Find APIP item associated with clicked element\n          const selectedItemIndex = mediaContentData.findIndex(_ref2 => {\n            let {\n              selector\n            } = _ref2;\n            return $currentTarget.is(selector);\n          });\n          currentPlayback = mediaContentData.slice(selectedItemIndex);\n          this.stop();\n          this.initNextItem();\n          this.togglePlayback();\n        },\n        /**\r\n         * Select APIP item for default mode\r\n         */\n        initDefaultModeItem() {\n          this.initItemWithTextSelection();\n          if (!currentItem) {\n            this.initDefaultModePlayback();\n          }\n        },\n        /**\r\n         * Check if there is some selected content inside APIP elelemts on the page\r\n         */\n        initItemWithTextSelection() {\n          // Check if there is selected content\n          if (this.is('sfhMode') || !selection || !selection.toString()) {\n            return;\n          }\n\n          // Get APIP item by current selection\n          const currentSelection = selection.getRangeAt(0);\n          const {\n            commonAncestorContainer\n          } = currentSelection;\n          const selectedItem = mediaContentData.find(_ref3 => {\n            let {\n              selector\n            } = _ref3;\n            const $item = $$1(selector, container);\n            return $item.is(commonAncestorContainer) || $$1.contains($item[0], commonAncestorContainer);\n          });\n          if (selectedItem && selectedItem !== currentItem) {\n            currentPlayback = [selectedItem];\n            this.initNextItem();\n          }\n        },\n        /**\r\n         * Check if there is next APIP item to play and start playback if component in playing state.\r\n         * If there is no APIP item to play stop playback\r\n         *\r\n         * @fires finish\r\n         * @fires next\r\n         */\n        initNextItem() {\n          const {\n            activeElementClass\n          } = this.config;\n          currentItem && $$1(currentItem.selector, container).removeClass(activeElementClass);\n          currentItem = currentPlayback.shift();\n          if (currentItem) {\n            const {\n              selector,\n              url\n            } = currentItem;\n            $$1(selector, container).addClass(activeElementClass);\n            audio.setAttribute('src', url);\n            audio.load();\n            audio.playbackRate = playbackRate;\n            if (this.is('playing')) {\n              audio.play();\n            }\n            this.trigger('next');\n            return;\n          }\n          this.trigger('finish');\n          this.stop();\n        },\n        /**\r\n         * Init default mode playback\r\n         */\n        initDefaultModePlayback() {\n          currentPlayback = [...mediaContentData];\n          this.initNextItem();\n        },\n        /**\r\n         * Set APIP data. Apply handlers to APIP elements. Stop current playback\r\n         *\r\n         * @param {Array} data - APIP data items\r\n         */\n        setMediaContentData(data) {\n          this.clearAPIPElements();\n          const {\n            elementClass\n          } = this.config;\n          mediaContentData = data;\n          const $contentNodes = $$1(mediaContentData.map(_ref4 => {\n            let {\n              selector\n            } = _ref4;\n            return selector;\n          }).join(', '), container);\n          $contentNodes.addClass(elementClass);\n          $contentNodes.on('click', this.handleContentNodeClick);\n          this.stop();\n        },\n        /**\r\n         * Set playback rate\r\n         *\r\n         * @param {Object} e - event object\r\n         * @param {Number} value - playback rate\r\n         */\n        setPlaybackRate(e, value) {\n          playbackRate = value;\n          audio.playbackRate = value;\n        },\n        /**\r\n         * Update component state. Toggle state class on page body\r\n         *\r\n         * @param {String} name\r\n         * @param {Boolean} value\r\n         */\n        setTTSStateOnContainer(name, value) {\n          this.setState(name, value);\n          $$1(container).toggleClass(`tts-${name}`, value);\n        },\n        /**\r\n         * Pause playback and update component state. Set current item to null\r\n         */\n        stop() {\n          const {\n            activeElementClass\n          } = this.config;\n          audio.pause();\n          audio.currentTime = 0;\n          currentItem && $$1(currentItem.selector, container).removeClass(activeElementClass);\n          currentItem = null;\n          this.setTTSStateOnContainer('playing', false);\n        },\n        /**\r\n         * Toggle playback\r\n         *\r\n         * @param {Object} e - event object\r\n         */\n        togglePlayback(e) {\n          e && e.preventDefault();\n          const isPlaying = this.is('playing');\n          this.initDefaultModeItem();\n          if (!isPlaying && currentItem) {\n            audio.play();\n            this.setTTSStateOnContainer('playing', true);\n          } else {\n            audio.pause();\n            this.setTTSStateOnContainer('playing', false);\n          }\n        },\n        /**\r\n         * Toggle start from here mode\r\n         */\n        toggleSFHMode() {\n          const isSFHMode = this.is('sfhMode');\n          this.setTTSStateOnContainer('sfhMode', !isSFHMode);\n          this.stop();\n        },\n        /**\r\n         * Toggle settings element\r\n         */\n        toggleSettings() {\n          const isSettings = this.is('settings');\n          this.setState('settings', !isSettings);\n\n          // if settings was enabled make sure that component still inside the container\n          if (!isSettings) {\n            this.handleResize();\n          }\n        },\n        /**\r\n         * Handle browser resize\r\n         */\n        handleResize() {\n          // offset from right\n          const offsetFromRight = 10;\n          const {\n            x,\n            y\n          } = this.getPosition();\n          const maxXPosition = window.innerWidth - this.getElement().width() - offsetFromRight;\n          this.moveTo(x > maxXPosition ? maxXPosition : x, y);\n        }\n      };\n      const ttsComponent = component(spec, defaultConfig);\n      makePlaceable(ttsComponent);\n      makeStackable(ttsComponent, stackingOptions);\n      ttsComponent.setTemplate(ttsTemplate).on('init', function () {\n        if (container.hasClass('tts-component-container')) {\n          throw new Error('Container already has assigned text to speech component');\n        }\n        container.addClass('tts-component-container');\n        this.render(container);\n      }).on('render', function () {\n        let {\n          left,\n          maxPlaybackRate,\n          minPlaybackRate,\n          playbackRate: defaultPlaybackRate,\n          top\n        } = this.getConfig();\n        if (left < 0) {\n          left = window.innerWidth - this.getElement().width() + left;\n        }\n        const $element = this.getElement();\n        const $closeElement = $$1('.tts-control-close', $element);\n        const $dragElement = $$1('.tts-control-drag', $element);\n        const $playbackElement = $$1('.tts-control-playback', $element);\n        const $sfhModeElement = $$1('.tts-control-mode', $element);\n        const $sliderElement = $$1('.tts-slider', $element);\n        const $settingsElement = $$1('.tts-control-settings', $element);\n        playbackRate = defaultPlaybackRate;\n        $element.css('touch-action', 'none');\n\n        // make component dragable\n        const interactElement = interact($element).draggable({\n          autoScroll: true,\n          manualStart: true,\n          restrict: {\n            restriction: container[0],\n            elementRect: {\n              left: 0,\n              right: 1,\n              top: 0,\n              bottom: 1\n            }\n          },\n          onmove: event => {\n            const xOffset = Math.round(event.dx),\n              yOffset = Math.round(event.dy);\n            this.moveBy(xOffset, yOffset);\n          }\n        });\n        interact($dragElement[0]).on('down', event => {\n          const interaction = event.interaction;\n          interaction.start({\n            name: 'drag'\n          }, interactElement, $element[0]);\n        });\n\n        // initialise slider\n        $sliderElement.noUiSlider({\n          animate: true,\n          connected: true,\n          range: {\n            min: minPlaybackRate,\n            max: maxPlaybackRate\n          },\n          start: defaultPlaybackRate,\n          step: 0.1\n        }).on('change', this.setPlaybackRate);\n\n        // handle controls\n        $closeElement.on('click', this.close);\n        // handle mousedown instead of click to prevent selection lose\n        $playbackElement.on('mousedown touchstart', this.togglePlayback);\n        $sfhModeElement.on('click', this.toggleSFHMode);\n        $settingsElement.on('click', this.toggleSettings);\n        audio.addEventListener('ended', this.initNextItem);\n        audio.addEventListener('error', () => {\n          feedback().error(__('Can not playback media file!'));\n          this.initNextItem();\n        });\n        window.addEventListener('resize', this.handleResize);\n\n        // move to initial position\n        this.moveTo(left, top);\n      }).on('hide', function () {\n        this.setTTSStateOnContainer('visible', false);\n      }).on('show', function () {\n        this.setTTSStateOnContainer('visible', true);\n      }).on('destroy', function () {\n        container.removeClass('tts-component-container');\n        this.clearAPIPElements();\n        this.stop();\n        window.removeEventListener('resize', this.handleResize);\n      });\n      ttsComponent.init(config);\n      return ttsComponent;\n    }\n\n    return maskingComponentFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/apipTextToSpeech/ttsApipDataProvider',[],function () { 'use strict';\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019  (original work) Open Assessment Technologies SA;\r\n     *\r\n     * @author Anton Tsymuk <anton@taotesting.com>\r\n     */\n\n    /**\r\n     * Extract TTS data from APIP item data\r\n     *\r\n     * @param {Object} apipElement - APIP item Data\r\n     * @returns {Object}\r\n     */\n    const getTTSItemData = apipElement => {\n      const {\n        identifier\n      } = apipElement['@attributes'];\n      const {\n        contentLinkInfo = {\n          '@attributes': {}\n        },\n        relatedElementInfo: {\n          spoken: {\n            audioFileInfo = []\n          } = {}\n        } = {}\n      } = apipElement;\n      const {\n        fileHref = ''\n      } = audioFileInfo.find(audioFile => audioFile['@attributes'].mimeType === 'audio/mpeg') || {};\n      const elementId = contentLinkInfo['@attributes'].qtiLinkIdentifierRef;\n      return {\n        identifier,\n        selector: elementId && `#${elementId}`,\n        url: fileHref.replace('assets/', '')\n      };\n    };\n\n    /**\r\n     * Get APIP item order from APIP order data\r\n     *\r\n     * @param {String} identifier - APIP item identifier\r\n     * @param {Object} elementOrder - APIP order data\r\n     * @returns {Number}\r\n     */\n    const getTTSItemOrder = (identifier, elementOrder) => {\n      const {\n        order\n      } = elementOrder.find(apipElementOrder => apipElementOrder['@attributes'].identifierRef === identifier) || {};\n      return parseInt(order) || Number.POSITIVE_INFINITY;\n    };\n\n    /**\r\n     * Extract data related to Text To Speech from item APIP data\r\n     * @param {Object} apipData\r\n     * @returns {Object}\r\n     */\n    var ttsApipDataProvider = (apipData => {\n      const {\n        accessibilityInfo: {\n          accessElement = []\n        } = {},\n        inclusionOrder: {\n          textGraphicsDefaultOrder: {\n            elementOrder = []\n          } = {}\n        } = {}\n      } = apipData;\n      return accessElement.map(getTTSItemData).filter(_ref => {\n        let {\n          url\n        } = _ref;\n        return !!url;\n      }).sort((a, b) => getTTSItemOrder(a.identifier, elementOrder) - getTTSItemOrder(b.identifier, elementOrder));\n    });\n\n    return ttsApipDataProvider;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/apipTextToSpeech/plugin',['lodash', 'i18n', 'ui/hider', 'util/shortcut', 'util/namespace', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/map', 'ui/keyNavigation/navigator', 'ui/keyNavigation/navigableDomElement', 'taoQtiTest/runner/plugins/tools/apipTextToSpeech/textToSpeech', 'taoQtiTest/runner/plugins/tools/apipTextToSpeech/ttsApipDataProvider'], function (_, __, hider, shortcut, namespaceHelper, pluginFactory, mapHelper, keyNavigator, navigableDomElement, ttsComponentFactory, ttsApipDataProvider) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    keyNavigator = keyNavigator && Object.prototype.hasOwnProperty.call(keyNavigator, 'default') ? keyNavigator['default'] : keyNavigator;\n    navigableDomElement = navigableDomElement && Object.prototype.hasOwnProperty.call(navigableDomElement, 'default') ? navigableDomElement['default'] : navigableDomElement;\n    ttsComponentFactory = ttsComponentFactory && Object.prototype.hasOwnProperty.call(ttsComponentFactory, 'default') ? ttsComponentFactory['default'] : ttsComponentFactory;\n    ttsApipDataProvider = ttsApipDataProvider && Object.prototype.hasOwnProperty.call(ttsApipDataProvider, 'default') ? ttsApipDataProvider['default'] : ttsApipDataProvider;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019  (original work) Open Assessment Technologies SA;\r\n     *\r\n     * @author Anton Tsymuk <anton@taotesting.com>\r\n     */\n    const pluginName = 'apiptts';\n    const actionPrefix = `tool-${pluginName}-`;\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var plugin = pluginFactory({\n      name: pluginName,\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n        let ttsComponent;\n        let ttsApipData;\n        const createNavigationGroup = () => {\n          const $container = testRunner.getAreaBroker().getContainer();\n          const $navigationGroupElement = this.button.getElement();\n          const groupNavigationId = `${pluginName}_navigation_group`;\n          const $navigationElements = $container.find(ttsApipData.map(_ref => {\n            let {\n              selector\n            } = _ref;\n            return selector;\n          }).join(', '));\n          this.navigationGroup = keyNavigator({\n            id: groupNavigationId,\n            group: $navigationGroupElement,\n            elements: navigableDomElement.createFromDoms($navigationElements.add($navigationGroupElement)),\n            propagateTab: false,\n            loop: true,\n            keepState: true\n          }).on('tab', () => {\n            if (ttsComponent.is('sfhMode')) {\n              this.navigationGroup.next();\n              testRunner.trigger(`${actionPrefix}next`);\n            }\n          }).on('shift+tab', () => {\n            if (ttsComponent.is('sfhMode')) {\n              this.navigationGroup.previous();\n              testRunner.trigger(`${actionPrefix}previous`);\n            }\n          }).on('activate', () => {\n            if (ttsComponent.is('sfhMode')) {\n              testRunner.trigger(`${actionPrefix}togglePlayback`);\n            }\n          }).on('blur', () => {\n            setTimeout(() => {\n              if (!this.navigationGroup.isFocused()) {\n                this.navigationGroup.focus();\n              }\n            }, 0);\n          }).setCursorAt($navigationElements.length);\n          ttsComponent.on('next finish', () => {\n            if (ttsComponent.is('sfhMode')) {\n              const $currentElement = this.navigationGroup.getCursor().navigable.getElement();\n              const {\n                selector\n              } = ttsComponent.getCurrentItem() || {};\n              if (!selector || !$currentElement.is(selector)) {\n                this.navigationGroup.next();\n              }\n            }\n          });\n        };\n\n        /**\r\n         * Creates the tts component on demand\r\n         * @returns {textToSpeech}\r\n         */\n        const getTTSComponent = () => {\n          if (!ttsComponent) {\n            const $container = testRunner.getAreaBroker().getContainer();\n            ttsComponent = ttsComponentFactory($container, {}).on('close', () => {\n              if (this.getState('active')) {\n                testRunner.trigger(`${actionPrefix}toggle`);\n              }\n            }).hide();\n          }\n          return ttsComponent;\n        };\n\n        /**\r\n         * Checks if the plugin is currently available.\r\n         * To be activated with the special category x-tao-option-apiptts\r\n         *\r\n         * @returns {Boolean}\r\n         */\n        const isConfigured = () => mapHelper.hasItemCategory(testRunner.getTestMap(), testRunner.getTestContext().itemIdentifier, 'apiptts', true);\n\n        /**\r\n         * Is plugin activated ? if not, then we hide the plugin\r\n         */\n        const togglePlugin = () => {\n          if (isConfigured()) {\n            this.show();\n          } else {\n            this.hide();\n          }\n        };\n\n        /**\r\n         * Show the plugin panel\r\n         *\r\n         * @fires plugin-open.apiptts\r\n         */\n        const enablePlugin = () => {\n          createNavigationGroup();\n          this.button.turnOn();\n          this.setState('active', true);\n          this.trigger('open');\n          if (ttsComponent.is('hidden')) {\n            ttsComponent.show();\n          }\n        };\n\n        /**\r\n         * Hide the plugin panel\r\n         *\r\n         * @fires plugin-close.apiptts\r\n         */\n        const disablePlugin = () => {\n          if (this.getState('active')) {\n            this.navigationGroup.blur();\n            this.navigationGroup.destroy();\n            this.setState('active', false);\n            this.button.turnOff();\n            this.trigger('close');\n            if (ttsComponent && !ttsComponent.is('hidden')) {\n              ttsComponent.close();\n              ttsComponent.hide();\n            }\n          }\n        };\n\n        /**\r\n         * Shows/hides the plugin\r\n         */\n        const toggleTool = () => {\n          if (this.getState('enabled')) {\n            if (this.getState('active')) {\n              disablePlugin();\n              this.setState('sleep', true);\n            } else {\n              enablePlugin();\n              this.setState('sleep', false);\n            }\n          }\n        };\n\n        // Add plugin button to toolbox\n        this.button = this.getAreaBroker().getToolbox().createEntry({\n          className: `${this.getName()}-plugin`,\n          control: this.getName(),\n          icon: 'headphones',\n          text: __('Text To Speech'),\n          title: __('Enable text to speech')\n        });\n\n        // Handle plugin button click\n        this.button.on('click', e => {\n          e.preventDefault();\n          testRunner.trigger(`${actionPrefix}toggle`);\n        });\n\n        // Register plugin shortcuts\n        if (testRunnerOptions.allowShortcuts) {\n          _.forEach(pluginShortcuts, (command, key) => {\n            shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), () => {\n              if (key === 'spaceTogglePlayback' && ttsComponent && ttsComponent.is('sfhMode')) {\n                return;\n              }\n              const eventKey = key.endsWith('TogglePlayback') ? 'togglePlayback' : key;\n              testRunner.trigger(actionPrefix + eventKey);\n            }, {\n              avoidInput: true\n            });\n          });\n        }\n\n        // Hide plugin by default\n        togglePlugin();\n        this.disable();\n        this.hide();\n\n        //update plugin state based on changes\n        testRunner.on('loaditem', () => {\n          togglePlugin();\n          this.disable();\n        }).on('enabletools renderitem', () => {\n          this.enable();\n        }).on('disabletools unloaditem', () => {\n          disablePlugin();\n          this.disable();\n        }).on(`${actionPrefix}toggle`, () => {\n          if (isConfigured()) {\n            toggleTool();\n          }\n        }).on(`${actionPrefix}togglePlayback`, () => {\n          if (this.getState('enabled')) {\n            if (this.getState('active')) {\n              if (ttsComponent.is('sfhMode')) {\n                const $currentElement = this.navigationGroup.getCursor().navigable.getElement();\n                const {\n                  selector\n                } = ttsComponent.getCurrentItem() || {};\n                if (!$currentElement.is(selector)) {\n                  if (this.button.getElement()[0] !== $currentElement[0]) {\n                    $currentElement.trigger('click');\n                  }\n                  return;\n                }\n              }\n              ttsComponent.togglePlayback();\n            }\n          }\n        }).on('renderitem', () => {\n          if (!isConfigured()) {\n            return;\n          }\n          ttsApipData = ttsApipDataProvider(testRunner.itemRunner.getData().apipAccessibility || {}).map(apipItemData => Object.assign({}, apipItemData, {\n            url: testRunner.itemRunner.assetManager.resolve(apipItemData.url)\n          }));\n          if (!ttsApipData.length) {\n            disablePlugin();\n            this.hide();\n            return;\n          }\n          getTTSComponent().setMediaContentData(ttsApipData);\n          this.show();\n          if (!this.getState('sleep')) {\n            this.setState('enabled', true);\n            toggleTool();\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy() {\n        shortcut.remove(`.${this.getName()}`);\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable() {\n        this.button.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable() {\n        this.button.disable();\n      },\n      /**\r\n       * Show the button\r\n       */\n      show() {\n        this.button.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide() {\n        this.button.hide();\n      }\n    });\n\n    return plugin;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/areaMasking/mask',['lodash', 'handlebars', 'lib/handlebars/helpers', 'ui/dynamicComponent'], function (_, Handlebars, Helpers0, dynamicComponent) { 'use strict';\n\n   _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n   Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n   Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n   dynamicComponent = dynamicComponent && Object.prototype.hasOwnProperty.call(dynamicComponent, 'default') ? dynamicComponent['default'] : dynamicComponent;\n\n   if (!Helpers0.__initialized) {\n     Helpers0(Handlebars);\n     Helpers0.__initialized = true;\n   }\n   var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n     this.compilerInfo = [4,'>= 1.0.0'];\n   helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n     var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n     buffer += \"<div class=\\\"mask\\\">\\r\\n   <div class=\\\"inner\\\"></div>\\r\\n   <div class=\\\"controls\\\">\\r\\n        <a href=\\\"#\\\" class=\\\"view\\\"  title=\\\"\"\n       + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Preview the covered area\", options) : helperMissing.call(depth0, \"__\", \"Preview the covered area\", options)))\n       + \"\\\"><span class=\\\"icon-preview\\\"></span></a>\\r\\n        <a href=\\\"#\\\" class=\\\"close\\\" title=\\\"\"\n       + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close the mask\", options) : helperMissing.call(depth0, \"__\", \"Close the mask\", options)))\n       + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\r\\n   </div>\\r\\n</div>\\r\\n\";\n     return buffer;\n     });\n   function areaMaskingTpl(data, options, asString) {\n     var html = Template(data, options);\n     return (asString || true) ? html : $(html);\n   }\n\n   /**\r\n    * This program is free software; you can redistribute it and/or\r\n    * modify it under the terms of the GNU General Public License\r\n    * as published by the Free Software Foundation; under version 2\r\n    * of the License (non-upgradable).\r\n    *\r\n    * This program is distributed in the hope that it will be useful,\r\n    * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    * GNU General Public License for more details.\r\n    *\r\n    * You should have received a copy of the GNU General Public License\r\n    * along with this program; if not, write to the Free Software\r\n    * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n    *\r\n    * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\r\n    */\n   var defaultConfig = {\n     draggable: true,\n     resizable: true,\n     preserveAspectRatio: false,\n     width: 250,\n     minWidth: 160,\n     maxWidth: 1000,\n     minHeight: 60,\n     height: 100,\n     stackingScope: 'test-runner',\n     top: 50,\n     left: 10,\n     previewDelay: 3000\n   };\n\n   /**\r\n    * Creates a new masking component\r\n    * @returns {maskComponent} the component (uninitialized)\r\n    */\n   function maskingComponentFactory() {\n     var dynamicComponentInstance;\n\n     /**\r\n      * @typedef {Object} dynamicComponent\r\n      */\n     dynamicComponentInstance = dynamicComponent({\n       /**\r\n        * Preview the content under the masked area\r\n        * @returns {maskComponent} chains\r\n        *\r\n        * @fires maskComponent#preview\r\n        */\n       preview: function preview() {\n         var self = this;\n         var delay = this.config.previewDelay || 1000;\n         if (this.is('rendered') && !this.is('disabled') && !this.is('previewing')) {\n           this.setState('previewing', true);\n           this.trigger('preview');\n           _.delay(function () {\n             self.setState('previewing', false);\n           }, delay);\n         }\n         return this;\n       }\n     }, defaultConfig).on('rendercontent', function ($content) {\n       var self = this;\n       var $element = this.getElement();\n       $content.append(areaMaskingTpl({}));\n       $element.addClass('mask-container');\n       $element.on('click touchstart', '.view', function (e) {\n         e.preventDefault();\n         self.preview();\n       }).on('click touchend', '.close', function (e) {\n         e.preventDefault();\n         self.destroy();\n       });\n     }).init();\n     return dynamicComponentInstance;\n   }\n\n   return maskingComponentFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/areaMasking/areaMasking',['lodash', 'i18n', 'ui/hider', 'util/shortcut', 'util/namespace', 'taoTests/runner/plugin', 'taoQtiTest/runner/plugins/tools/areaMasking/mask', 'taoQtiTest/runner/helpers/map'], function (_, __, hider, shortcut, namespaceHelper, pluginFactory, maskComponent, mapHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    maskComponent = maskComponent && Object.prototype.hasOwnProperty.call(maskComponent, 'default') ? maskComponent['default'] : maskComponent;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\r\n     */\n\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\n    var pluginName = 'area-masking';\n\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\n    var actionPrefix = `tool-${pluginName}-`;\n\n    /**\r\n     * Some default options for the plugin\r\n     * @type {Object}\r\n     */\n    var defaultConfig = {\n      max: 5,\n      foo: true\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var areaMasking = pluginFactory({\n      name: pluginName,\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const $container = testRunner.getAreaBroker().getContentArea().parent();\n        const testRunnerOptions = testRunner.getOptions();\n        const config = Object.assign({}, defaultConfig, this.getConfig());\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[pluginName] || {};\n        function addMask() {\n          maskComponent().on('render', function () {\n            self.masks.push(this);\n            self.button.turnOn();\n\n            /**\r\n             * @event areaMasking#maskadd\r\n             */\n            self.trigger('maskadd');\n          }).on('destroy', function () {\n            self.masks = _.without(self.masks, this);\n            if (self.masks.length < config.max) {\n              self.enable();\n            }\n            if (self.masks.length === 0) {\n              self.button.turnOff();\n              self.trigger('close');\n            }\n\n            /**\r\n             * @event areaMasking#maskclose\r\n             */\n            self.trigger('maskclose');\n          }).init({\n            renderTo: $container,\n            draggableContainer: $container\n          });\n        }\n\n        //keep a ref to all masks\n        this.masks = [];\n\n        // register the element in the Toolbox\n        this.button = this.getAreaBroker().getToolbox().createEntry({\n          control: 'area-masking',\n          text: __('Masking'),\n          title: __('Covers parts of the item'),\n          icon: 'eye-slash'\n        });\n\n        //add a new mask each time the button is pressed\n        this.button.on('click', function (e) {\n          e.preventDefault();\n          testRunner.trigger(`${actionPrefix}toggle`);\n        });\n\n        // handle the plugin's shortcuts\n        if (testRunnerOptions.allowShortcuts) {\n          _.forEach(pluginShortcuts, function (command, key) {\n            shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n              // just fire the action using the event loop\n              testRunner.trigger(actionPrefix + key);\n            }, {\n              avoidInput: true\n            });\n          });\n        }\n\n        //start disabled\n        this.disable();\n\n        /**\r\n         * Checks if the plugin is currently available\r\n         * @returns {Boolean}\r\n         */\n        function isEnabled() {\n          //to be activated with the special category x-tao-option-areaMasking\n          return mapHelper.hasItemCategory(testRunner.getTestMap(), testRunner.getTestContext().itemIdentifier, 'areaMasking', true);\n        }\n\n        /**\r\n         * Is plugin activated ? if not, then we hide the plugin\r\n         */\n        function togglePlugin() {\n          if (isEnabled()) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        }\n        //update plugin state based on changes\n        testRunner.on('loaditem', togglePlugin).on('enabletools renderitem', function () {\n          self.enable();\n        }).on('disabletools unloaditem', function () {\n          self.disable();\n          //remove all masks\n          _.invoke(self.masks, 'destroy');\n        })\n        // commands that controls the plugin\n        .on(`${actionPrefix}toggle`, function () {\n          if (isEnabled()) {\n            if (self.masks.length === 0) {\n              self.trigger('open');\n            }\n            if (self.masks.length < config.max) {\n              addMask();\n            } else if (config.max === 1) {\n              _.invoke(self.masks, 'destroy');\n            }\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        shortcut.remove(`.${pluginName}`);\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.button.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.button.disable();\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        this.button.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        this.button.hide();\n      }\n    });\n\n    return areaMasking;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/calculator',['jquery', 'lodash', 'i18n', 'ui/hider', 'ui/calculator', 'ui/maths/calculator/basicCalculator', 'ui/maths/calculator/scientificCalculator', 'util/shortcut', 'util/namespace', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/map', 'handlebars', 'lib/handlebars/helpers'], function ($$1, _, __, hider, calculatorFactory, basicCalculatorFactory, scientificCalculatorFactory, shortcut, namespaceHelper, pluginFactory, mapHelper, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    calculatorFactory = calculatorFactory && Object.prototype.hasOwnProperty.call(calculatorFactory, 'default') ? calculatorFactory['default'] : calculatorFactory;\n    basicCalculatorFactory = basicCalculatorFactory && Object.prototype.hasOwnProperty.call(basicCalculatorFactory, 'default') ? basicCalculatorFactory['default'] : basicCalculatorFactory;\n    scientificCalculatorFactory = scientificCalculatorFactory && Object.prototype.hasOwnProperty.call(scientificCalculatorFactory, 'default') ? scientificCalculatorFactory['default'] : scientificCalculatorFactory;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers);  \n\n\n      return \"<div class=\\\"widget-calculator\\\" dir=\\\"ltr\\\"></div>\";\n      });\n    function calculatorTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Default config for calculator components\r\n     * @type {Object}\r\n     */\n    var defaultCalcConfig = {\n      height: 380,\n      width: 280,\n      top: 50,\n      left: 10,\n      stackingScope: 'test-runner',\n      proportionalResize: true\n    };\n\n    /**\r\n     * Default config for BODMAS calculator component\r\n     * @type {Object}\r\n     */\n    var bodmasCalcConfig = _.defaults({\n      height: 380,\n      width: 280\n    }, defaultCalcConfig);\n\n    /**\r\n     * Default config for scientific calculator component\r\n     * @type {Object}\r\n     */\n    var scientificCalcConfig = _.defaults({\n      width: 490,\n      height: 420,\n      calculator: {\n        maths: {\n          degree: true\n        }\n      }\n    }, defaultCalcConfig);\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var calculator = pluginFactory({\n      name: 'calculator',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const areaBroker = this.getAreaBroker();\n        const testRunnerOptions = testRunner.getOptions();\n        const config = this.getConfig();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n\n        /**\r\n         * Retrieve the calculators categories of the current item\r\n         * @returns {Object} the calculator categories\r\n         */\n        function getCalculatorCategories() {\n          const testContext = testRunner.getTestContext();\n          const itemIdentifier = testContext.itemIdentifier;\n          const testMap = testRunner.getTestMap();\n          return {\n            calculator: mapHelper.hasItemCategory(testMap, itemIdentifier, 'calculator', true),\n            bodmas: mapHelper.hasItemCategory(testMap, itemIdentifier, 'calculator-bodmas', true),\n            scientific: mapHelper.hasItemCategory(testMap, itemIdentifier, 'calculator-scientific', true)\n          };\n        }\n\n        /**\r\n         * Checks if the plugin is currently available\r\n         * @returns {Boolean}\r\n         */\n        function isEnabled() {\n          //to be activated with a special category from:\n          // - x-tao-option-calculator\n          // - x-tao-option-calculator-bodmas\n          // - x-tao-option-calculator-scientific\n          const categories = getCalculatorCategories();\n          return categories.calculator || categories.bodmas || categories.scientific;\n        }\n\n        /**\r\n         * Is calculator activated ? if not, then we hide the plugin\r\n         */\n        function togglePlugin() {\n          if (isEnabled()) {\n            //allow calculator\n            self.show();\n          } else {\n            self.hide();\n          }\n        }\n\n        /**\r\n         * Build the calculator component\r\n         * @param {Function} [calcTpl] - An optional alternative template for the calculator.\r\n         *                               Only compatible with the four-functions version\r\n         */\n        function buildCalculator(calcTpl) {\n          const categories = getCalculatorCategories();\n          let factory, calcConfig;\n          if (categories.scientific) {\n            factory = scientificCalculatorFactory;\n            calcConfig = scientificCalcConfig;\n            calcConfig.calculator.maths.degree = _.isUndefined(config.degree) ? scientificCalcConfig.calculator.maths.degree : config.degree;\n          } else if (categories.bodmas) {\n            factory = basicCalculatorFactory;\n            calcConfig = bodmasCalcConfig;\n          } else {\n            factory = calculatorFactory;\n            calcConfig = defaultCalcConfig;\n          }\n          self.calculator = factory(_.defaults({\n            renderTo: self.$calculatorContainer,\n            replace: true,\n            draggableContainer: areaBroker.getContainer(),\n            alternativeTemplate: calcTpl || null\n          }, calcConfig)).on('show', function () {\n            self.trigger('open');\n            self.button.turnOn();\n          }).on('hide', function () {\n            self.trigger('close');\n            self.button.turnOff();\n          }).after('render', function () {\n            this.show();\n          });\n        }\n\n        /**\r\n         * Show/hide the calculator\r\n         */\n        function toggleCalculator() {\n          if (self.getState('enabled') !== false) {\n            if (self.calculator) {\n              //just show/hide the calculator widget\n              if (self.calculator.is('hidden')) {\n                self.calculator.show();\n              } else {\n                self.calculator.hide();\n              }\n            } else {\n              //build calculator widget\n              if (config.template) {\n                require([`tpl!${config.template.replace(/\\.tpl$/, '')}`], function (calcTpl) {\n                  buildCalculator(calcTpl);\n                }, function () {\n                  //in case of error, display the default calculator:\n                  buildCalculator();\n                });\n              } else {\n                buildCalculator();\n              }\n            }\n          }\n        }\n\n        //build element (detached)\n        this.button = this.getAreaBroker().getToolbox().createEntry({\n          control: 'calculator',\n          title: __('Open Calculator'),\n          icon: 'table',\n          text: __('Calculator')\n        });\n        this.$calculatorContainer = $$1(calculatorTpl());\n\n        //init calculator instance var, it will be created only necessary\n        this.calculator = null;\n\n        //attach behavior\n        this.button.on('click', function (e) {\n          //prevent action if the click is made inside the form which is a sub part of the button\n          if ($$1(e.target).closest('.widget-calculator').length) {\n            return;\n          }\n          e.preventDefault();\n          testRunner.trigger('tool-calculator');\n        });\n        if (testRunnerOptions.allowShortcuts) {\n          if (pluginShortcuts.toggle) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n              testRunner.trigger('tool-calculator');\n            }, {\n              avoidInput: true,\n              allowIn: '.widget-calculator'\n            });\n          }\n        }\n\n        //start disabled\n        togglePlugin();\n        this.disable();\n\n        //update plugin state based on changes\n        testRunner.on('loaditem', togglePlugin).on('enabletools renderitem', function () {\n          self.enable();\n        }).on('disabletools unloaditem', function () {\n          self.disable();\n          if (self.calculator) {\n            //destroy calculator to create a new instance of calculator each time\n            self.calculator.destroy();\n            self.calculator = null;\n          }\n        }).on('tool-calculator', function () {\n          if (isEnabled()) {\n            toggleCalculator();\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {\n        var areaBroker = this.getAreaBroker();\n        areaBroker.getContainer().append(this.$calculatorContainer);\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        shortcut.remove(`.${this.getName()}`);\n        this.$calculatorContainer.remove();\n        if (this.calculator) {\n          this.calculator.destroy();\n        }\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.button.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.button.disable();\n        if (this.calculator) {\n          this.calculator.hide();\n        }\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        this.button.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        this.button.hide();\n        if (this.calculator) {\n          this.calculator.hide();\n        }\n      }\n    });\n\n    return calculator;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/comment/comment',['jquery', 'i18n', 'taoTests/runner/plugin', 'ui/hider', 'ui/stacker', 'util/shortcut', 'util/namespace', 'handlebars', 'lib/handlebars/helpers'], function ($$1, __, pluginFactory, hider, stackerFactory, shortcut, namespaceHelper, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    hider = hider && Object.prototype.hasOwnProperty.call(hider, 'default') ? hider['default'] : hider;\n    stackerFactory = stackerFactory && Object.prototype.hasOwnProperty.call(stackerFactory, 'default') ? stackerFactory['default'] : stackerFactory;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      buffer += \"<div data-control=\\\"qti-comment\\\" class=\\\"hidden\\\">\\r\\n    <textarea data-control=\\\"qti-comment-text\\\" placeholder=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Your comment…\", options) : helperMissing.call(depth0, \"__\", \"Your comment…\", options)))\n        + \"\\\"></textarea>\\r\\n    <button data-control=\\\"qti-comment-cancel\\\" class=\\\"btn-info small\\\"></span>\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cancel\", options) : helperMissing.call(depth0, \"__\", \"Cancel\", options)))\n        + \"</button>\\r\\n    <button data-control=\\\"qti-comment-send\\\" class=\\\"btn-info small\\\">\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Send\", options) : helperMissing.call(depth0, \"__\", \"Send\", options)))\n        + \"</button>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function commentTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var comment = pluginFactory({\n      name: 'comment',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n        const stacker = stackerFactory('test-runner');\n\n        /**\r\n         * Checks if the plugin is currently available\r\n         * @returns {Boolean}\r\n         */\n        function isEnabled() {\n          const currentItem = testRunner.getCurrentItem();\n          if (typeof currentItem.allowComment === 'boolean') {\n            return currentItem.allowComment;\n          }\n\n          //@deprecated use allowComment from the testMap\n          const testContext = testRunner.getTestContext();\n          const contextOptions = testContext.options || {};\n          return !!contextOptions.allowComment;\n        }\n\n        /**\r\n         * Can we comment ? if not, then we hide the plugin\r\n         */\n        function togglePlugin() {\n          if (isEnabled()) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        }\n\n        /**\r\n         * Show/hide the comment panel\r\n         */\n        function toggleComment() {\n          if (self.getState('enabled') !== false) {\n            //just show/hide the form\n            hider.toggle(self.$form);\n            if (!hider.isHidden(self.$form)) {\n              //reset the form on each display\n              self.$input.val('').focus();\n              self.button.turnOn();\n              stacker.bringToFront(self.$form);\n            } else {\n              self.button.turnOff();\n            }\n          }\n        }\n\n        // register button in toolbox\n        this.button = this.getAreaBroker().getToolbox().createEntry({\n          control: 'comment',\n          title: __('Leave a comment'),\n          icon: 'tag',\n          text: __('Comment')\n        });\n\n        //get access to controls\n        this.button.on('render', function () {\n          self.$button = self.button.getElement();\n          self.$form = $$1(commentTpl()).appendTo(self.$button);\n          self.$input = self.$button.find('[data-control=\"qti-comment-text\"]');\n          self.$cancel = self.$button.find('[data-control=\"qti-comment-cancel\"]');\n          self.$submit = self.$button.find('[data-control=\"qti-comment-send\"]');\n          stacker.autoBringToFront(self.$form);\n\n          //hide the form without submit\n          self.$cancel.on('click', function () {\n            hider.hide(self.$form);\n            self.button.turnOff();\n          });\n\n          //submit the comment, then hide the form\n          self.$submit.on('click', function () {\n            var comment = self.$input.val();\n            if (comment) {\n              self.disable();\n              self.button.turnOff();\n              testRunner.getProxy().callTestAction('comment', {\n                comment: comment\n              }).then(function () {\n                hider.hide(self.$form);\n                self.enable();\n              }).catch(function () {\n                hider.hide(self.$form);\n                self.enable();\n              });\n            }\n          });\n        });\n\n        //attach behavior\n        this.button.on('click', function (e) {\n          //prevent action if the click is made inside the form which is a sub part of the button\n          if ($$1(e.target).closest('[data-control=\"qti-comment\"]').length) {\n            return;\n          }\n          e.preventDefault();\n          testRunner.trigger('tool-comment');\n        });\n        if (testRunnerOptions.allowShortcuts) {\n          if (pluginShortcuts.toggle) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n              testRunner.trigger('tool-comment');\n            }, {\n              avoidInput: true\n            });\n          }\n        }\n\n        //start disabled\n        togglePlugin();\n        this.disable();\n\n        //update plugin state based on changes\n        testRunner.on('loaditem', togglePlugin).on('renderitem enabletools', function () {\n          self.enable();\n        }).on('unloaditem disabletools', function () {\n          self.disable();\n        }).on('tool-comment', function () {\n          if (isEnabled()) {\n            toggleComment();\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        shortcut.remove(`.${this.getName()}`);\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.button.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        if (this.$form) {\n          hider.hide(this.$form);\n        }\n        this.button.disable();\n        this.button.turnOff();\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        this.button.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        if (this.$form) {\n          hider.hide(this.$form);\n        }\n        this.button.hide();\n      }\n    });\n\n    return comment;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/documentViewer/documentViewer',['jquery', 'lodash', 'ui/hider', 'ui/documentViewer', 'ui/documentViewer/providers/pdfViewer', 'taoTests/runner/plugin', 'handlebars', 'lib/handlebars/helpers'], function ($$1, _, hider, viewerFactory, pdfViewer, pluginFactory, Handlebars, Helpers0) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    hider = hider && Object.prototype.hasOwnProperty.call(hider, 'default') ? hider['default'] : hider;\n    viewerFactory = viewerFactory && Object.prototype.hasOwnProperty.call(viewerFactory, 'default') ? viewerFactory['default'] : viewerFactory;\n    pdfViewer = pdfViewer && Object.prototype.hasOwnProperty.call(pdfViewer, 'default') ? pdfViewer['default'] : pdfViewer;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n      buffer += \"<div class=\\\"document-viewer-plugin hidden\\\">\\r\\n    <div class=\\\"viewer-overlay\\\"></div>\\r\\n    <div class=\\\"viewer-panel\\\">\\r\\n        <div class=\\\"viewer-header\\\">\\r\\n            <span class=\\\"viewer-title\\\">\";\n      if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</span>\\r\\n            <span class=\\\"icon icon-close\\\"></span>\\r\\n        </div>\\r\\n        <div class=\\\"viewer-content\\\">\";\n      if (helper = helpers.content) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.content); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      if(stack1 || stack1 === 0) { buffer += stack1; }\n      buffer += \"</div>\\r\\n        <div class=\\\"viewer-footer\\\"></div>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function panelTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The name of the plugin\r\n     * @type {String}\r\n     */\n    var pluginName = 'documentViewer';\n\n    /**\r\n     * Shows the panel, trigger the `panelshow` event\r\n     *\r\n     * @param plugin\r\n     */\n    function showPanel(plugin) {\n      hider.show(plugin.controls.$panel);\n      plugin.trigger('panelshow');\n      $$1(window).on(`resize.${plugin.getName()}`, _.debounce(_.partial(resizeViewer, plugin), 50));\n    }\n\n    /**\r\n     * Hides the panel, trigger the `panelhide` event\r\n     *\r\n     * @param plugin\r\n     */\n    function hidePanel(plugin) {\n      hider.hide(plugin.controls.$panel);\n      plugin.trigger('panelhide');\n      $$1(window).off(`resize.${plugin.getName()}`);\n    }\n\n    /**\r\n     * Hides the panel if it is visible\r\n     *\r\n     * @param plugin\r\n     * @returns {Boolean} Returns `true` if the panel was visible and has been hidden\r\n     */\n    function hideIfVisible(plugin) {\n      var isVisible = !hider.isHidden(plugin.controls.$panel, true);\n      if (isVisible) {\n        hidePanel(plugin);\n      }\n      return isVisible;\n    }\n\n    /**\r\n     * Initializes the event handlers for the panel container\r\n     *\r\n     * @param plugin\r\n     */\n    function initPanelEvents(plugin) {\n      var namespace = `.${plugin.getName()}`;\n      var stopEvents = ['click', 'mousedown', 'mouseup', 'touchstart', 'touchend', 'keyup', 'keydow', 'keypress', 'scroll', 'drop'].join(`${namespace} `) + namespace;\n      var hideViewer = _.partial(hidePanel, plugin);\n      function stopPropagation(e) {\n        e.stopImmediatePropagation();\n        e.stopPropagation();\n      }\n      plugin.controls.$overlay.off(namespace).on(`click${namespace}`, hideViewer).on(stopEvents, stopPropagation);\n      plugin.controls.$panel.off(namespace).on(`click${namespace}`, '.icon-close', hideViewer).on(stopEvents, stopPropagation);\n    }\n\n    /**\r\n     * Resizes the viewer to fit the panel content area\r\n     * @param plugin\r\n     */\n    function resizeViewer(plugin) {\n      var $content = plugin.controls.$content;\n      plugin.viewer.setSize($content.width(), $content.height());\n    }\n\n    // all document viewers need to be registered\n    viewerFactory.registerProvider('pdf', pdfViewer);\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var documentViewer = pluginFactory({\n      name: pluginName,\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var self = this;\n        var testRunner = this.getTestRunner();\n        var $panel = $$1(panelTpl());\n\n        /**\r\n         * @param {Object} data\r\n         * @param {String} data.label - document title\r\n         * @param {String} data.document - document url\r\n         */\n        function displayViewer(data) {\n          if (self.getState('enabled') !== false) {\n            showPanel(self);\n            self.controls.$title.text(data.label);\n            resizeViewer(self);\n            self.viewer.load(data.document, 'pdf');\n          }\n        }\n        this.controls = {\n          $panel: $panel,\n          $overlay: $panel.find('.viewer-overlay'),\n          $title: $panel.find('.viewer-title'),\n          $content: $panel.find('.viewer-content')\n        };\n        this.viewer = viewerFactory({\n          renderTo: this.controls.$content,\n          replace: true,\n          fitToWidth: true,\n          allowSearch: true\n        });\n\n        //update plugin state based on changes\n        testRunner.on('renderitem enabletools', function () {\n          self.enable();\n        }).on('renderitem', function () {\n          self.getAreaBroker().getContentArea().append(self.controls.$panel).off(`.${self.getName()}`).on(`viewDocument.${self.getName()}`, function (event) {\n            var data = event.originalEvent.detail;\n            displayViewer(data);\n          });\n          initPanelEvents(self);\n        }).on('move', function () {\n          hideIfVisible(self);\n        }).on('skip', function () {\n          hideIfVisible(self);\n        }).on('unloaditem disabletools', function () {\n          self.disable();\n        }).on('tool-documentViewer', function (data) {\n          displayViewer(data);\n        });\n      },\n      /**\r\n       * Called during the runner's render phase\r\n       */\n      render: function render() {},\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        this.getAreaBroker().getContentArea().off(`.${this.getName()}`);\n        if (this.viewer) {\n          this.viewer.destroy();\n        }\n        if (this.controls.$panel) {\n          this.controls.$panel.remove();\n        }\n        this.viewer = null;\n        this.controls = {};\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {},\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        hideIfVisible(this);\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {},\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        hideIfVisible(this);\n      }\n    });\n\n    return documentViewer;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/highlighter/highlighter',['lodash', 'jquery', 'core/eventifier', 'ui/highlighter'], function (_, $, eventifier, highlighterFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    eventifier = eventifier && Object.prototype.hasOwnProperty.call(eventifier, 'default') ? eventifier['default'] : eventifier;\n    highlighterFactory = highlighterFactory && Object.prototype.hasOwnProperty.call(highlighterFactory, 'default') ? highlighterFactory['default'] : highlighterFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\r\n     */\n    var prevSelection = [];\n    var selection;\n    if (!window.getSelection) throw new Error('Browser does not support getSelection()');\n    selection = window.getSelection();\n\n    /**\r\n     * Returns an array of active ranges.\r\n     * If browser doesn't support multiple Ranges, returns only the first range\r\n     * see note on https://w3c.github.io/selection-api/#methods\r\n     *\r\n     * @returns {Range[]}\r\n     */\n    function getAllRanges() {\n      var i,\n        allRanges = [];\n      for (i = 0; i < selection.rangeCount; i++) {\n        allRanges.push(selection.getRangeAt(i));\n      }\n      return allRanges;\n    }\n\n    /**\r\n     * Discards the global text selection from the browser (window.selection)\r\n     */\n    function discardSelection() {\n      // delay discarding, to allow time for multiple highlighters logic\n      setTimeout(function () {\n        selection.removeAllRanges();\n      }, 250);\n    }\n\n    /**\r\n     * The highlighter Factory\r\n     * @param {Object} options\r\n     * @param {String} [options.className]\r\n     * @param {String} [options.containerSelector]\r\n     * @param {Array} [options.containersBlackList]\r\n     * @param {String} [options.id]\r\n     * @returns {Object} the highlighter instance\r\n     */\n    function testHighlighterFactory(options) {\n      /**\r\n       * Is this highlighter enabled or disabled?\r\n       * @type {boolean}\r\n       */\n      var enabled = true;\n\n      /**\r\n       * Are we in highlight mode, meaning that each new selection is automatically highlighted\r\n       * without having to press any button\r\n       * @type {boolean}\r\n       */\n      var isHighlighting = false;\n\n      /**\r\n       * The helper that does the highlight magic\r\n       */\n      var highlightHelper = highlighterFactory({\n        className: options.className || 'txt-user-highlight',\n        containerSelector: options.containerSelector || '.qti-itemBody',\n        containersBlackList: options.containersBlackList || [],\n        clearOnClick: true\n      });\n\n      //add event to automatically highlight the recently made selection if needed\n      $(document).on('mouseup.highlighter', function () {\n        if (isHighlighting && !selection.isCollapsed) {\n          highlightHelper.highlightRanges(getAllRanges());\n          discardSelection();\n        }\n      });\n\n      //add event to automatically highlight the recently made selection if needed\n      //added touch event (as from TAO-6578)\n      $(document).on('touchend.highlighter', function () {\n        if (isHighlighting && !selection.isCollapsed) {\n          highlightHelper.highlightRanges(getAllRanges());\n        }\n      });\n\n      // iOS devices clears selection after click on button,\n      // so we store prev selection for this devices to be able\n      // to use it after click on highlight button\n      if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {\n        $(document).on('selectionchange', function () {\n          if (!isHighlighting) {\n            prevSelection = _.clone(getAllRanges(), true);\n          }\n        });\n      }\n\n      /**\r\n       * The highlighter instance\r\n       */\n      return eventifier({\n        /**\r\n         * Enable this instance\r\n         */\n        enable: function enable() {\n          enabled = true;\n        },\n        /**\r\n         * Disable this instance\r\n         */\n        disable: function disable() {\n          enabled = false;\n        },\n        /**\r\n         * Is this instance currently enabled?\r\n         * @returns {Boolean}\r\n         */\n        isEnabled: function isEnabled() {\n          return enabled;\n        },\n        /**\r\n         * toggle highlighting mode on and off\r\n         * @param {Boolean} bool - wanted state\r\n         */\n        toggleHighlighting: function toggleHighlighting(bool) {\n          isHighlighting = bool;\n          if (isHighlighting) {\n            this.trigger('start');\n            $('.qti-itemBody').toggleClass('highlighter-cursor', true);\n          } else {\n            this.trigger('end');\n            $('.qti-itemBody').toggleClass('highlighter-cursor', false);\n          }\n          return this;\n        },\n        /**\r\n         * Either highlight the current or selection, or toggle highlighting mode\r\n         */\n        highlight: function highlight() {\n          if (!isHighlighting) {\n            if (!selection.isCollapsed) {\n              this.toggleHighlighting(true);\n              highlightHelper.highlightRanges(getAllRanges());\n              this.toggleHighlighting(false);\n              discardSelection();\n            } else if (prevSelection[0] && !prevSelection[0].collapsed) {\n              this.toggleHighlighting(true);\n              highlightHelper.highlightRanges(prevSelection);\n              this.toggleHighlighting(false);\n              discardSelection();\n            } else {\n              this.toggleHighlighting(true);\n            }\n          } else {\n            this.toggleHighlighting(false);\n          }\n        },\n        /**\r\n         * restore the highlight from a given index\r\n         * @param {Array} index\r\n         */\n        restoreIndex: function restoreIndex(index) {\n          if (index && index.length > 0) {\n            highlightHelper.highlightFromIndex(index);\n          }\n        },\n        /**\r\n         * Get the current index\r\n         * @returns {Array} index\r\n         */\n        getIndex: function getIndex() {\n          return highlightHelper.getHighlightIndex();\n        },\n        /**\r\n         * remove all highlights\r\n         */\n        clearHighlights: function clearHighlights() {\n          highlightHelper.clearHighlights();\n          selection.removeAllRanges();\n        },\n        /**\r\n         * Getter for the instance's id\r\n         * @returns {String}\r\n         */\n        getId: function getId() {\n          return options.id;\n        }\n      });\n    }\n\n    return testHighlighterFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/highlighter/collection',['taoQtiTest/runner/plugins/tools/highlighter/highlighter'], function (highlighterFactory) { 'use strict';\n\n    highlighterFactory = highlighterFactory && Object.prototype.hasOwnProperty.call(highlighterFactory, 'default') ? highlighterFactory['default'] : highlighterFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * @var {Array} highlighters - Highlighters collection\r\n     * We can run multiple instances of the highlighter plugin on one page:\r\n     * - one for item-level highlights, which persist for the Test session\r\n     * - others for stimulus-level highlights, which should persist across multiple sessions (TAO-7617)\r\n     */\n    var highlighters = [];\n\n    /**\r\n     * @typedef {highlighterCollection}\r\n     * @returns {Object}\r\n     */\n    var highlighterCollection = function highlighterCollection() {\n      return {\n        /**\r\n         * Instantiates new highlighter and adds it to array\r\n         * @param {Object} options\r\n         * @param {String} options.className - class applied to highlighted spans\r\n         * @param {String} options.containerSelector - selector for the unique root DOM node the HL will work on\r\n         * @param {Array}  options.containersBlackList - list of children which should not receive highlights\r\n         * @param {String} options.id\r\n         * @returns {Object} a highlighter instance\r\n         */\n        addHighlighter: function addHighlighter(options) {\n          var hl = highlighterFactory(options);\n          highlighters.push(hl);\n          return hl;\n        },\n        /**\r\n         * Retrieves one highlighter from the collection by matching its id\r\n         * @param {String} id\r\n         * @returns {Object} highlighter instance\r\n         */\n        getHighlighterById: function getHighlighterById(id) {\n          return highlighters.find(function (hl) {\n            return hl.getId() === id;\n          });\n        },\n        /**\r\n         * Retrieves the full array of highlighters from the collection\r\n         * @returns {Array}\r\n         */\n        getAllHighlighters: function getAllHighlighters() {\n          return highlighters;\n        },\n        /**\r\n         * Retrieves the first highlighter in the collection\r\n         * @returns {Object} highlighter instance\r\n         */\n        getItemHighlighter: function getItemHighlighter() {\n          return highlighters[0];\n        },\n        /**\r\n         * Retrieves the fully array of highlighter from the collection, minus the first one\r\n         * @returns {Array} highlighter instance\r\n         */\n        getNonItemHighlighters: function getNonItemHighlighters() {\n          return highlighters.slice(1);\n        },\n        /**\r\n         * Empties th highlighter collection\r\n         * @returns {Integer}\r\n         */\n        getLength: function getLength() {\n          return highlighters.length;\n        },\n        /**\r\n         * Empties the highlighter collection\r\n         * @returns {Object}\r\n         */\n        empty: function empty() {\n          highlighters = [];\n          return this;\n        }\n      };\n    };\n\n    return highlighterCollection;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/highlighter/plugin',['jquery', 'lodash', 'i18n', 'core/logger', 'taoTests/runner/plugin', 'util/shortcut', 'util/namespace', 'taoQtiTest/runner/helpers/currentItem', 'taoQtiTest/runner/plugins/tools/highlighter/collection', 'taoQtiTest/runner/helpers/map'], function ($, _, __, loggerFactory, pluginFactory, shortcut, namespaceHelper, itemHelper, highlighterCollection, mapHelper) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    loggerFactory = loggerFactory && Object.prototype.hasOwnProperty.call(loggerFactory, 'default') ? loggerFactory['default'] : loggerFactory;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    itemHelper = itemHelper && Object.prototype.hasOwnProperty.call(itemHelper, 'default') ? itemHelper['default'] : itemHelper;\n    highlighterCollection = highlighterCollection && Object.prototype.hasOwnProperty.call(highlighterCollection, 'default') ? highlighterCollection['default'] : highlighterCollection;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2019 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var plugin = pluginFactory({\n      name: 'highlighter',\n      /**\r\n       * Install plugin's functions\r\n       *\r\n       */\n      install: function install() {\n        var testRunner = this.getTestRunner();\n\n        //define the \"highlighter\" store as \"volatile\" (removed on browser change).\n        testRunner.getTestStore().setVolatile(this.getName());\n      },\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       * @returns {void}\r\n       */\n      init: function init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n        let hasHighlights = false;\n        const logger = loggerFactory('highlighterPlugin');\n\n        /**\r\n         * @var {Object} highlighters - Highlighters collection\r\n         * See taoQtiTest/views/js/runner/plugins/tools/highlighter/collection.js\r\n         */\n        var highlighters = highlighterCollection();\n\n        // Create the first (item-level) highlighter instance:\n        highlighters.addHighlighter({\n          className: 'txt-user-highlight',\n          containerSelector: '.qti-itemBody',\n          containersBlackList: ['.qti-include'],\n          id: 'item-highlighter'\n        });\n\n        // create buttons\n        this.buttonMain = this.getAreaBroker().getToolbox().createEntry({\n          title: __('Highlight Text'),\n          icon: 'text-marker',\n          control: 'highlight-trigger',\n          aria: {\n            pressed: 'false',\n            label: __('(Visual) Highlight Text')\n          },\n          text: __('Highlight')\n        });\n        this.buttonRemove = this.getAreaBroker().getToolbox().createEntry({\n          title: __('Clear all active highlights'),\n          icon: 'result-nok',\n          control: 'highlight-clear',\n          aria: {\n            label: __('(Visual) Clear all active highlights')\n          },\n          text: __('Clear Highlights')\n        });\n\n        // attach user events\n        this.buttonMain.on('mousedown', function (e) {\n          // using 'mousedown' instead of 'click' to avoid losing current selection\n          e.preventDefault();\n          if (isPluginEnabled()) {\n            _.forEach(highlighters.getAllHighlighters(), function (instance) {\n              if (instance.isEnabled()) {\n                instance.highlight();\n              }\n            });\n          }\n        });\n        this.buttonRemove.on('click', function (e) {\n          e.preventDefault();\n          if (isPluginEnabled()) {\n            _.forEach(highlighters.getAllHighlighters(), function (instance) {\n              if (instance.isEnabled()) {\n                instance.clearHighlights();\n              }\n            });\n            testRunner.trigger('clear');\n          }\n        });\n        if (testRunnerOptions.allowShortcuts) {\n          if (pluginShortcuts.toggle) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n              if (isPluginEnabled()) {\n                _.forEach(highlighters.getAllHighlighters(), function (instance) {\n                  if (instance.isEnabled()) {\n                    instance.highlight();\n                  }\n                });\n              }\n            }, {\n              avoidInput: true,\n              prevent: true\n            });\n          }\n        }\n\n        //start disabled\n        this.disable();\n\n        /**\r\n         * Checks if the plugin is currently available\r\n         * @returns {Boolean}\r\n         */\n        function isPluginEnabled() {\n          //to be activated with the special category x-tao-option-highlighter\n          return mapHelper.hasItemCategory(testRunner.getTestMap(), testRunner.getTestContext().itemIdentifier, 'highlighter', true);\n        }\n\n        /**\r\n         * Is plugin activated ? if not, then we hide the plugin\r\n         */\n        function togglePlugin() {\n          if (isPluginEnabled()) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        }\n\n        /**\r\n         * Gets the browser test store\r\n         * Can be in volatile or non-volatile mode, depending on config\r\n         * @returns {Promise}\r\n         */\n        function getStore() {\n          return testRunner.getTestStore().getStore(self.getName());\n        }\n\n        /**\r\n         * Load the stores and hook the behavior\r\n         */\n        return getStore().then(function (highlighterStore) {\n          /**\r\n           * Saves a highlighter's state to the appropriate store\r\n           * @param {String} [itemId] - must be provided to save item-level highlights,\r\n           *                            will be used as store key if no key provided\r\n           * @param {String} [key] - a key (e.g. a stimulus href) under which we store non-item-level highlights\r\n           * @returns {Boolean} true if save was done\r\n           */\n          function saveHighlight(itemId, key) {\n            var instance;\n            var highlightsIndex;\n            if (!itemId) {\n              instance = highlighters.getHighlighterById(key);\n            } else {\n              key = itemId;\n              instance = highlighters.getItemHighlighter();\n            }\n            if (!instance) return Promise.resolve(false);\n            highlightsIndex = instance.getIndex();\n            if (isPluginEnabled() && hasHighlights && key) {\n              logger.debug(`Saving ${highlightsIndex.length} highlights for id ${key}`);\n              return highlighterStore.setItem(key, highlightsIndex);\n            }\n            return false;\n          }\n\n          /**\r\n           * Saves all the highlighters states in the store\r\n           * First the non-item highlighters, then the item highlighter (index 0)\r\n           * @returns {Promise} resolves once the save is done\r\n           */\n          function saveAll() {\n            var nonItemHighlighters = highlighters.getNonItemHighlighters();\n            return Promise.all(_(nonItemHighlighters).filter(function (instance) {\n              return instance.isEnabled();\n            }).map(function (instance) {\n              var key = instance.getId();\n              return saveHighlight(null, key);\n            }).value()).then(function (results) {\n              // Now save the main item highlight\n              // and if every setItem() returned true, return true\n              var itemId = testRunner.getTestContext().itemIdentifier;\n              return saveHighlight(itemId) && _.every(results);\n            });\n          }\n\n          /**\r\n           * Retrieves a highlighter's state from a store and applies it to the DOM\r\n           * @param {String} [itemId] - must be provided to save item-level highlights,\r\n           *                            will be used as store key if no key provided\r\n           * @param {String} [key] - a key (e.g. a stimulus href) under which we store non-item-level highlights\r\n           * @returns {Promise} resolves once the load is done\r\n           */\n          function loadHighlight(itemId, key) {\n            var instance;\n            if (!itemId) {\n              instance = highlighters.getHighlighterById(key);\n            } else {\n              key = itemId;\n              instance = highlighters.getItemHighlighter();\n            }\n            if (!instance) return Promise.resolve(false);\n            return highlighterStore.getItem(key).then(function (index) {\n              if (index) {\n                logger.debug(`Loading ${index.length} highlights for key ${key}`);\n                hasHighlights = true;\n                instance.restoreIndex(index);\n              }\n            }).then(function () {\n              //save highlighter state during the item session,\n              //when the highlighting ends\n              instance.on('end.save', function () {\n                return saveHighlight(itemId, key);\n              });\n            });\n          }\n\n          //update plugin state based on changes\n          testRunner.on('loaditem', togglePlugin).on('enabletools renderitem', function () {\n            self.enable();\n            if (isPluginEnabled()) {\n              _.forEach(highlighters.getAllHighlighters(), function (instance) {\n                if (!instance.isEnabled()) {\n                  instance.on('start').toggleHighlighting(false).enable();\n                }\n              });\n            }\n          }).on('renderitem', function () {\n            var textStimuli;\n            var itemId = testRunner.getTestContext().itemIdentifier;\n            if (itemId && isPluginEnabled()) {\n              hasHighlights = false;\n              highlighters.getItemHighlighter().enable();\n              // Load item-level highlights from store:\n              loadHighlight(itemId);\n\n              // Count stimuli in this item:\n              textStimuli = itemHelper.getTextStimuliHrefs(testRunner);\n\n              // NOW we can instantiate the extra highlighters:\n              _.forEach(textStimuli, function (textStimulusHref) {\n                var stimHighlighter = highlighters.getHighlighterById(textStimulusHref);\n                // Instantiate, if id not already present in highlighters...\n                if (!stimHighlighter) {\n                  stimHighlighter = highlighters.addHighlighter({\n                    className: 'txt-user-highlight',\n                    containerSelector: `.qti-include[data-href=\"${textStimulusHref}\"]`,\n                    id: textStimulusHref\n                  });\n                }\n                stimHighlighter.enable();\n                // And load its data:\n                loadHighlight(null, textStimulusHref);\n              });\n            }\n          }).after('renderitem', function () {\n            // Attach start/end listeners only to item level highlighter\n            const instance = highlighters.getItemHighlighter();\n            if (instance.isEnabled()) {\n              instance.on('start', function () {\n                self.buttonMain.turnOn();\n                self.buttonMain.$component.attr('aria-pressed', 'true');\n                self.trigger('start');\n                hasHighlights = true;\n              }).on('end', function () {\n                self.buttonMain.turnOff();\n                self.buttonMain.$component.attr('aria-pressed', 'false');\n                self.trigger('end');\n              });\n            }\n          }).after('clear.highlighter', function () {\n            saveAll();\n          }).before('skip move timeout', function () {\n            return saveAll();\n          }).on('disabletools unloaditem', function () {\n            self.disable();\n            if (isPluginEnabled()) {\n              _.forEach(highlighters.getAllHighlighters(), function (instance) {\n                if (instance.isEnabled()) {\n                  instance.off('end.save end start').toggleHighlighting(false).disable();\n                }\n              });\n            }\n          });\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        shortcut.remove(`.${this.getName()}`);\n        $(document).off('.highlighter');\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.buttonMain.enable();\n        this.buttonRemove.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.buttonMain.disable();\n        this.buttonRemove.disable();\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        this.buttonMain.show();\n        this.buttonRemove.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        this.buttonMain.hide();\n        this.buttonRemove.hide();\n      }\n    });\n\n    return plugin;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher',['jquery', 'lodash', 'i18n', 'taoTests/runner/plugin', 'ui/hider', 'ui/themes', 'util/shortcut', 'util/namespace', 'ui/themeLoader'], function ($, _, __, pluginFactory, hider, themeHandler, shortcut, namespaceHelper, themeLoader) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    themeHandler = themeHandler && Object.prototype.hasOwnProperty.call(themeHandler, 'default') ? themeHandler['default'] : themeHandler;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    themeLoader = themeLoader && Object.prototype.hasOwnProperty.call(themeLoader, 'default') ? themeLoader['default'] : themeLoader;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var itemThemeSwitcher = pluginFactory({\n      name: 'itemThemeSwitcher',\n      /**\r\n       * Install step, add behavior before the lifecycle.\r\n       */\n      install: function install() {\n        //define the \"itemThemeSwitcher\" store as \"volatile\" (removed on browser change).\n        this.getTestRunner().getTestStore().setVolatile(this.getName());\n      },\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        var self = this;\n        var pluginName = this.getName();\n        var testRunner = this.getTestRunner();\n        var testRunnerOptions = testRunner.getOptions();\n        var pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n        const pluginConfig = this.getConfig();\n        this.oldNamespace = themeHandler.getActiveNamespace();\n        const state = {\n          availableThemes: [],\n          defaultTheme: '',\n          selectedTheme: ''\n        };\n        const allMenuEntries = [];\n        if (pluginConfig.activeNamespace) {\n          themeHandler.setActiveNamespace(pluginConfig.activeNamespace);\n        }\n        const themesConfig = themeHandler.get('items') || {};\n        if (pluginConfig.activeNamespace !== this.oldNamespace && !_.isEmpty(themesConfig)) {\n          reloadThemes();\n        }\n\n        /**\r\n         * Tells if the component is enabled\r\n         * @returns {Boolean}\r\n         */\n        function isPluginAllowed() {\n          return themesConfig && _.size(themesConfig.available) > 1;\n        }\n\n        /**\r\n         * Reloads theme config and changes theme\r\n         */\n        function reloadThemes() {\n          var themeConfig = themeHandler.get('items');\n          themeLoader(themeConfig).load();\n          if (state && state.selectedTheme) {\n            changeTheme(state.selectedTheme);\n          } else {\n            changeTheme(themeConfig.default);\n          }\n        }\n\n        /**\r\n         * Load the selected theme\r\n         * @param themeId\r\n         */\n        function changeTheme(themeId) {\n          var $qtiItem = $('.qti-item');\n          var previousTheme = state.selectedTheme;\n          state.selectedTheme = themeId;\n          if ($qtiItem) {\n            _.defer(function () {\n              $qtiItem.trigger('themechange', [state.selectedTheme]);\n            });\n          }\n          if (self.storage) {\n            self.storage.setItem('itemThemeId', themeId);\n          }\n          if (previousTheme !== state.selectedTheme) {\n            testRunner.trigger('themechange', state.selectedTheme, previousTheme);\n          }\n          allMenuEntries.forEach(function (menuEntry) {\n            if (menuEntry.getId() === themeId) {\n              menuEntry.turnOn();\n            } else {\n              menuEntry.turnOff();\n            }\n          });\n        }\n\n        //init plugin state\n        if (themesConfig) {\n          if (themesConfig.default) {\n            state.defaultTheme = themesConfig.default;\n            state.selectedTheme = themesConfig.default;\n            changeTheme(themesConfig.default);\n          }\n          if (themesConfig.available) {\n            _.forEach(themesConfig.available, function (theme) {\n              state.availableThemes.push({\n                id: theme.id,\n                label: __(theme.name)\n              });\n            });\n          }\n        }\n\n        // register toolbox button\n        this.menuButton = this.getAreaBroker().getToolbox().createMenu({\n          control: 'color-contrast',\n          title: __('Change the current color preset'),\n          icon: 'contrast',\n          text: __('Contrast')\n        }).after('render', () => {\n          if (!isPluginAllowed()) {\n            self.hide();\n          }\n        }).on('click', function (e) {\n          e.preventDefault();\n          testRunner.trigger('tool-themeswitcher-toggle');\n        }).on('openmenu', function () {\n          testRunner.trigger(`plugin-open.${pluginName}`, state.selectedTheme);\n        }).on('closemenu', function () {\n          testRunner.trigger(`plugin-close.${pluginName}`, state.selectedTheme);\n        });\n\n        // register menu entries\n        state.availableThemes.forEach(function (theme) {\n          var themeEntry = self.getAreaBroker().getToolbox().createEntry({\n            role: 'option',\n            control: theme.id,\n            title: theme.label,\n            icon: 'preview',\n            text: __(theme.label)\n          });\n          themeEntry.setMenuId('color-contrast');\n          themeEntry.on('click', function (e) {\n            var themeId = this.config.control;\n            e.preventDefault();\n            self.menuButton.turnOffAll();\n            this.turnOn();\n            changeTheme(themeId);\n          });\n          if (state.defaultTheme === theme.id) {\n            themeEntry.on('render', function () {\n              this.turnOn();\n            });\n          }\n          allMenuEntries.push(themeEntry);\n        });\n        if (testRunnerOptions.allowShortcuts) {\n          if (pluginShortcuts.toggle) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n              testRunner.trigger('tool-themeswitcher-toggle');\n            }, {\n              avoidInput: true\n            });\n          }\n        }\n        if (!isPluginAllowed()) {\n          this.hide();\n        }\n\n        //start disabled\n        this.disable();\n\n        //update plugin state based on changes\n        testRunner.on('loaditem', function () {\n          if (isPluginAllowed()) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        }).on('renderitem', function () {\n          self.enable();\n          changeTheme(state.selectedTheme);\n        }).on('enabletools', function () {\n          self.enable();\n        }).on('disabletools unloaditem', function () {\n          self.disable();\n        }).on('tool-themeswitcher-toggle', function () {\n          if (self.getState('enabled') !== false) {\n            self.menuButton.toggleMenu();\n          }\n        }).on('tool-themeswitcher-setnavtype', function (type) {\n          self.menuButton.setNavigationType(type);\n        });\n        return testRunner.getPluginStore(this.getName()).then(function (itemThemesStore) {\n          self.storage = itemThemesStore;\n          self.storage.getItem('itemThemeId').then(function (itemThemeId) {\n            if (itemThemeId && state.selectedTheme !== itemThemeId) {\n              changeTheme(itemThemeId);\n            }\n          });\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        themeHandler.setActiveNamespace(this.oldNamespace);\n        shortcut.remove(`.${this.getName()}`);\n        return this.getTestRunner().getPluginStore(this.getName()).then(function (itemThemesStore) {\n          return itemThemesStore.removeItem('itemThemeId');\n        });\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.menuButton.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.menuButton.disable();\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        this.menuButton.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        this.menuButton.hide();\n      }\n    });\n\n    return itemThemeSwitcher;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/lineReader/compoundMask',['jquery', 'lodash', 'core/statifier', 'core/eventifier', 'ui/component', 'ui/component/placeable', 'ui/component/draggable', 'ui/component/resizable', 'ui/component/stackable'], function ($, _, statifier, eventifier, componentFactory, makePlaceable, makeDraggable, makeResizable, makeStackable) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    statifier = statifier && Object.prototype.hasOwnProperty.call(statifier, 'default') ? statifier['default'] : statifier;\n    eventifier = eventifier && Object.prototype.hasOwnProperty.call(eventifier, 'default') ? eventifier['default'] : eventifier;\n    componentFactory = componentFactory && Object.prototype.hasOwnProperty.call(componentFactory, 'default') ? componentFactory['default'] : componentFactory;\n    makePlaceable = makePlaceable && Object.prototype.hasOwnProperty.call(makePlaceable, 'default') ? makePlaceable['default'] : makePlaceable;\n    makeDraggable = makeDraggable && Object.prototype.hasOwnProperty.call(makeDraggable, 'default') ? makeDraggable['default'] : makeDraggable;\n    makeResizable = makeResizable && Object.prototype.hasOwnProperty.call(makeResizable, 'default') ? makeResizable['default'] : makeResizable;\n    makeStackable = makeStackable && Object.prototype.hasOwnProperty.call(makeStackable, 'default') ? makeStackable['default'] : makeStackable;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\r\n     */\n    var defaultDimensions = {\n      outerWidth: 600,\n      outerHeight: 400,\n      innerWidth: 500,\n      innerHeight: 20\n    };\n    var defaultPosition = {\n      outerX: 0,\n      outerY: 0,\n      innerX: 50,\n      innerY: 50\n    };\n    var defaultOptions = {\n      dragMinWidth: 10,\n      dragMinHeight: 10,\n      resizeHandleSize: 10,\n      innerDragHeight: 20\n    };\n    var stackingOptions = {\n      stackingScope: 'test-runner'\n    };\n    var constrains;\n\n    /**\r\n     * @param {Object} options\r\n     * @param {Number} options.resizeHandleSize - size of the resize handlers on each resizable edge\r\n     * @param {Number} options.dragMinWidth - minimal width for the draggable area of each component.\r\n     * @param {Number} options.dragMinHeight - minimal height for the draggable area of each component.\r\n     * @param {Number} options.innerDragHeight - height of the inner window drag handle\r\n     * @param {Object} dimensions\r\n     * @param {Number} dimensions.outerWidth - overall mask width\r\n     * @param {Number} dimensions.outerHeight - overall mask height\r\n     * @param {Number} dimensions.innerWidth - inner window width\r\n     * @param {Number} dimensions.innerHeight - inner window height\r\n     * @param {Number} position\r\n     * @param {Number} position.outerX - overall mask x\r\n     * @param {Number} position.outerY - overall mask y\r\n     * @param {Number} position.innerX - inner window mask x\r\n     * @param {Number} position.innerY - inner window mask y\r\n     */\n    function compoundMaskFactory(options, dimensions, position) {\n      var compoundMask,\n        allParts = {},\n        innerDrag,\n        closer,\n        visualGuides = {};\n\n      /**\r\n       * ============================================\r\n       * Definition of Mask & Overlay component types\r\n       * ============================================\r\n       */\n\n      /**\r\n       * Create a mask component. They are used for masking (obviously) but also resizing the compound mask\r\n       * @param {Object} maskConfig\r\n       * @param {String} maskConfig.id\r\n       * @param {Function} maskConfig.place - size and position the mask according to the transform model\r\n       * @param {Function} maskConfig.placeOverlay - size and position the overlay according to the transform model\r\n       * @param {Function} maskConfig.beforeResize - used to set the resize limit depending on which edge the resizing occurs\r\n       * @param {Function} maskConfig.onResize - how the resize affect the transform model\r\n       * @param {Object} maskConfig.edges - Interact configuration to specify which edges can be used for resizing\r\n       * @param {Number} maskConfig.minWidth\r\n       * @param {Number} maskConfig.minHeight\r\n       */\n      function createMask(maskConfig) {\n        var mask,\n          maskAPI = {\n            place: maskConfig.place,\n            placeOverlay: maskConfig.placeOverlay,\n            styleResizableEdges: function styleResizableEdges() {\n              var $element = this.getElement();\n              _.forOwn(this.config.edgesBorders, function (isResizable, edgeId) {\n                if (isResizable) {\n                  $element.addClass(`border-${edgeId}`);\n                }\n              });\n            },\n            addResizeControll: function addResizeControll() {\n              var $element = this.getElement();\n              var $resizeControll = $('<div>', {\n                class: 'resize-control'\n              });\n              $element.append($resizeControll);\n            }\n          };\n        mask = componentFactory(maskAPI, maskConfig);\n        makeResizable(mask);\n        makeStackable(mask, stackingOptions);\n        return mask.on('render', function () {\n          var $element = this.getElement();\n          this.styleResizableEdges();\n          if (this.config.resizeControll) {\n            this.addResizeControll();\n          }\n          $element.addClass(`line-reader-mask ${maskConfig.id}`).on('mousedown touchstart', function () {\n            bringAllToFront();\n          });\n\n          // uncomment this to see what's going on with masks:\n          // $element.css({ border: '1px solid olive'});\n        }).on('resizestart', function () {\n          innerDrag.hide();\n          closer.hide();\n          invokeOnOverlays('hide');\n          invokeOnMasks('setState', ['resizing', true]);\n          this.setState('resizer', true);\n        }).on('beforeresize', maskConfig.beforeResize || _.noop).on('resize', maskConfig.onResize || _.noop).on('resizeend', function () {\n          applyTransformsToOverlays();\n          applyTransformsToInnerDrag();\n          applyTransformsToCloser();\n          invokeOnMasks('setState', ['resizing', false]);\n          invokeOnOverlays('show');\n          innerDrag.show();\n          closer.show();\n          this.setState('resizer', false);\n        }).init();\n      }\n\n      /**\r\n       * Create a overlay component. Overlay are invisible and are used for dragging.\r\n       * When clicked, the whole mask is hidden and only the overlay is displayed, after being resized to fit the whole mask surface\r\n       * this allows for performance improvement as well as giving the dragged element proper dragging boundaries.\r\n       * Also, visual guides are added, like a fake inner window, during the drag\r\n       * @param {Object} overlayConfig\r\n       * @param {String} overlayConfig.id\r\n       */\n      function createOverlay(overlayConfig) {\n        var overlay,\n          overlayAPI = {\n            transformOverlay: function transformOverlay() {\n              var $element = this.getElement();\n              this._sizeBackup = this.getSize();\n              this._posBackup = this.getPosition();\n              this.setSize(dimensions.outerWidth, dimensions.outerHeight).moveTo(position.outerX, position.outerY);\n              $element.addClass('moving');\n              this.setState('transformed', true);\n            },\n            restoreOverlay: function restoreOverlay() {\n              var $element = this.getElement();\n              if (this.is('transformed')) {\n                this.setSize(this._sizeBackup.width, this._sizeBackup.height).moveTo(this._posBackup.x, this._posBackup.y);\n                $element.removeClass('moving');\n                this._sizeBackup = null;\n                this._posBackup = null;\n                this.setState('transformed', false);\n              }\n            },\n            appendVisualGuides: function appendVisualGuides() {\n              var $element = this.getElement(),\n                borderWidth = 1,\n                // this mirror the $lrBorderWidth css variable\n                borderOffset = borderWidth * 2;\n              $element.append(visualGuides.$maskBg);\n              $element.append(visualGuides.$innerWindow);\n              visualGuides.$maskBg.css({\n                width: dimensions.outerWidth - borderOffset,\n                height: dimensions.outerHeight - borderOffset,\n                'border-top-width': dimensions.topHeight - borderOffset,\n                'border-right-width': dimensions.rightWidth - borderOffset,\n                'border-bottom-width': dimensions.bottomHeight - borderOffset,\n                'border-left-width': dimensions.leftWidth - borderOffset\n              });\n              visualGuides.$innerWindow.css({\n                width: dimensions.innerWidth,\n                height: dimensions.innerHeight,\n                left: dimensions.leftWidth - borderOffset,\n                top: dimensions.topHeight - borderOffset\n              });\n            },\n            removeVisualGuides: function removeVisualGuides() {\n              visualGuides.$maskBg.remove();\n              visualGuides.$innerWindow.remove();\n            }\n          };\n        overlay = componentFactory(overlayAPI, overlayConfig);\n        makeDraggable(overlay);\n        makeStackable(overlay, stackingOptions);\n        return overlay.on('render', function () {\n          var self = this,\n            $element = this.getElement(),\n            // captures touch and mouse\n            // also fixes issue with IE not capturing 'mousedown' etc\n            pointerEventsPrefix = window.PointerEvent ? 'pointer' : 'mouse',\n            $moveIcon = $('<div>', {\n              class: 'icon icon-mobile-menu'\n            });\n          $element.addClass(`line-reader-overlay ${overlayConfig.id}`).on(`${pointerEventsPrefix}down` + ` touchstart`, function () {\n            bringAllToFront();\n            self.transformOverlay();\n          }).on(`${pointerEventsPrefix}up` + ` touchend`, function () {\n            self.restoreOverlay();\n          }).prepend($moveIcon);\n        }).on('dragstart', function () {\n          innerDrag.hide();\n          closer.hide();\n          invokeOnMasks('hide');\n          this.appendVisualGuides();\n        }).on('dragmove', function moveAllPartsTogether(xOffsetRelative, yOffsetRelative) {\n          // update the transform model\n          position.outerX += xOffsetRelative;\n          position.outerY += yOffsetRelative;\n          position.innerX += xOffsetRelative;\n          position.innerY += yOffsetRelative;\n        }).on('dragend', function () {\n          this.removeVisualGuides();\n          // although they are already display, calling show() again on the overlays\n          // will force their z-Index at the top of the stack\n          invokeOnAll('show');\n          innerDrag.show();\n          closer.show();\n\n          // apply the new transform model\n          applyTransforms();\n        }).init();\n      }\n\n      /**\r\n       * ==========================\r\n       * Inner Drag Handle & Closer\r\n       * ==========================\r\n       */\n\n      /**\r\n       * This handle allows to drag the inner window\r\n       */\n      function createInnerDragHandle() {\n        // uncomment this (and a few lines below) if debugging is needed:\n        // var $boundingBox = $('<div>').css({ position: 'fixed', 'box-sizing': 'border-box', border: '1px solid red' });\n\n        innerDrag = componentFactory();\n        makeStackable(innerDrag, stackingOptions);\n        makeDraggable(innerDrag, {\n          dragRestriction: function dragRestriction() {\n            var fixedXY = allParts.nw.mask.getElement().offset(),\n              rect;\n            rect = {\n              x: fixedXY.left + constrains.minWidth,\n              y: fixedXY.top + (constrains.minTopHeight + dimensions.innerHeight + options.resizeHandleSize),\n              width: dimensions.outerWidth - constrains.minWidth * 2,\n              height: dimensions.outerHeight - (dimensions.innerHeight + constrains.minTopHeight + constrains.minBottomHeight - options.innerDragHeight)\n            };\n\n            // uncomment to see what's going on:\n            // allParts.ne.mask.getContainer().append($boundingBox);\n            // $boundingBox.css({ width: rect.width, height: rect.height, top: rect.y, left: rect.x });\n\n            return rect;\n          }\n        }).on('render', function () {\n          var $element = this.getElement(),\n            $dragIcon = $('<div>', {\n              class: 'icon icon-move'\n            });\n          $element.css('touch-action', 'none');\n          $element.addClass('line-reader-inner-drag');\n          $element.css({\n            background: 'none'\n          });\n          $element.append($dragIcon);\n        }).on('dragstart', function () {\n          closer.hide();\n          bringAllToFront();\n          invokeOnMasks('setState', ['resizing', true]);\n        }).on('dragmove', function (xOffsetRelative, yOffsetRelative) {\n          position.innerX += xOffsetRelative;\n          position.innerY += yOffsetRelative;\n          dimensions.leftWidth += xOffsetRelative;\n          dimensions.topHeight += yOffsetRelative;\n          dimensions.rightWidth -= xOffsetRelative;\n          dimensions.bottomHeight -= yOffsetRelative;\n          applyTransformsToMasks();\n        }).on('dragend', function () {\n          innerDrag.bringToFront();\n          closer.show();\n          invokeOnMasks('setState', ['resizing', false]);\n          applyTransformsToOverlays();\n        }).init();\n      }\n\n      /**\r\n       * Close button for the compound mask\r\n       */\n      function createCloser() {\n        closer = componentFactory();\n        makeStackable(closer, stackingOptions);\n        makePlaceable(closer).on('render', function () {\n          var self = this,\n            $element = this.getElement(),\n            $closeIcon = $('<div>', {\n              class: 'icon icon-result-nok'\n            });\n          $element.append($closeIcon);\n          $element.addClass('line-reader-closer');\n          $element.on('mousedown touchstart', function () {\n            bringAllToFront();\n          });\n          $element.on('click', function (e) {\n            e.stopPropagation();\n            self.trigger('click');\n          });\n        }).init();\n      }\n\n      /**\r\n       * =================\r\n       * Utility functions\r\n       * =================\r\n       */\n      function bringAllToFront() {\n        invokeOnAll('bringToFront');\n        innerDrag.bringToFront();\n        closer.bringToFront();\n      }\n      function invokeOnAll(fn, args) {\n        invokeOnMasks(fn, args);\n        invokeOnOverlays(fn, args);\n      }\n      function invokeOnMasks(fn, args) {\n        invokeOn('mask', fn, args);\n      }\n      function invokeOnOverlays(fn, args) {\n        invokeOn('overlay', fn, args);\n      }\n\n      /**\r\n       * Invoke a method on all compound mask parts, whether mask or overlays\r\n       * @param {String} target - mask | overlay\r\n       * @param {String} fn - the name of the method to invoke\r\n       * @param {*[]} args - arguments passed on invoke\r\n       */\n      function invokeOn(target, fn, args) {\n        _.forOwn(allParts, function (part) {\n          if (_.isObject(part[target]) && _.isFunction(part[target][fn])) {\n            part[target][fn](...(args || []));\n          }\n        });\n      }\n\n      /**\r\n       * =================================\r\n       * Transform model related functions\r\n       * =================================\r\n       */\n\n      function applyTransforms() {\n        applyTransformsToMasks();\n        applyTransformsToOverlays();\n        applyTransformsToInnerDrag();\n        applyTransformsToCloser();\n      }\n      function applyTransformsToMasks() {\n        invokeOnMasks('place');\n      }\n      function applyTransformsToOverlays() {\n        _.forOwn(allParts, function (part) {\n          if (part.overlay) {\n            part.mask.placeOverlay(part.overlay);\n          }\n        });\n      }\n      function applyTransformsToInnerDrag() {\n        if (innerDrag) {\n          innerDrag.setSize(dimensions.innerWidth - 20, options.innerDragHeight).moveTo(position.innerX + 10, position.innerY + dimensions.innerHeight + options.resizeHandleSize);\n        }\n      }\n      function applyTransformsToCloser() {\n        if (closer) {\n          closer.setSize(constrains.minWidth - options.resizeHandleSize, constrains.minHeight - options.resizeHandleSize).moveTo(position.outerX + dimensions.outerWidth - constrains.minWidth - 5,\n          // manual adjustment so it looks better\n          position.outerY + options.resizeHandleSize - 4);\n        }\n      }\n\n      /**\r\n       * Check that the given transform model respect the current constrains.\r\n       * If not, correct them\r\n       */\n      function correctTransforms() {\n        if (dimensions.topHeight < constrains.minTopHeight) {\n          dimensions.topHeight = constrains.minTopHeight;\n          position.innerY = position.outerY + constrains.minTopHeight;\n        }\n        if (dimensions.innerHeight < constrains.minHeight) {\n          dimensions.innerHeight = constrains.minHeight;\n        }\n        if (dimensions.bottomHeight < constrains.minBottomHeight) {\n          dimensions.bottomHeight = constrains.minBottomHeight;\n        }\n        dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + dimensions.bottomHeight;\n        if (dimensions.leftWidth < constrains.minWidth) {\n          dimensions.leftWidth = constrains.minWidth;\n          position.innerX = position.outerX + constrains.minWidth;\n        }\n        if (dimensions.innerWidth < constrains.minWidth) {\n          dimensions.innerWidth = constrains.minWidth;\n        }\n        if (dimensions.rightWidth < constrains.minWidth) {\n          dimensions.rightWidth = constrains.minWidth;\n        }\n        dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + dimensions.rightWidth;\n      }\n\n      /**\r\n       * Update the transform model during a resize affecting the top height\r\n       * @param {Number} newHeight\r\n       * @param {Number} newY\r\n       * @param {Boolean} fromTop - if the resize occurs from the top\r\n       */\n      function setTopHeight(newHeight, newY, fromTop) {\n        dimensions.topHeight = newHeight;\n        if (fromTop) {\n          dimensions.outerHeight = newHeight + dimensions.innerHeight + dimensions.bottomHeight;\n          position.outerY = newY;\n        } else {\n          dimensions.innerHeight = dimensions.outerHeight - newHeight - dimensions.bottomHeight;\n          position.innerY = position.outerY + newHeight;\n        }\n      }\n\n      /**\r\n       * Update the transform model during a resize affecting the right width\r\n       * @param {Number} newWidth\r\n       * @param {Number} newX\r\n       * @param {Boolean} fromLeft - if the resize occurs from the left\r\n       */\n      function setRightWidth(newWidth, newX, fromLeft) {\n        dimensions.rightWidth = newWidth;\n        if (fromLeft) {\n          dimensions.innerWidth = newX - position.innerX;\n        } else {\n          dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + newWidth;\n        }\n      }\n\n      /**\r\n       * Update the transform model during a resize affecting the bottom height\r\n       * @param {Number} newHeight\r\n       * @param {Number} newY\r\n       * @param {Boolean} fromTop - if the resize occurs from the top\r\n       */\n      function setBottomHeight(newHeight, newY, fromTop) {\n        dimensions.bottomHeight = newHeight;\n        if (fromTop) {\n          dimensions.innerHeight = newY - position.innerY;\n          dimensions.bottomHeight = newHeight;\n        } else {\n          dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + newHeight;\n        }\n      }\n\n      /**\r\n       * Update the transform model during a resize affecting the left width\r\n       * @param {Number} newWidth\r\n       * @param {Number} newX\r\n       * @param {Boolean} fromLeft - if the resize occurs from the left\r\n       */\n      function setLeftWidth(newWidth, newX, fromLeft) {\n        dimensions.leftWidth = newWidth;\n        if (fromLeft) {\n          dimensions.outerWidth = newWidth + dimensions.innerWidth + dimensions.rightWidth;\n          position.outerX = newX;\n        } else {\n          dimensions.innerWidth = dimensions.outerWidth - newWidth - dimensions.rightWidth;\n          position.innerX = position.outerX + newWidth;\n        }\n      }\n\n      /**\r\n       * Update the transform model during a resize affecting inner height\r\n       * @param {Number} newHeight\r\n       */\n      const setInnerHeight = newHeight => {\n        dimensions.innerHeight = newHeight;\n        dimensions.bottomHeight = dimensions.outerHeight - dimensions.innerHeight - dimensions.topHeight;\n      };\n      /**\r\n       * ======================================\r\n       * Mask parts and other elements creation\r\n       * ======================================\r\n       */\n\n      function createCompoundMask() {\n        // North\n        createPart({\n          id: 'n',\n          edges: {\n            top: false,\n            right: false,\n            bottom: false,\n            left: false\n          },\n          edgesBorders: {\n            top: true,\n            right: false,\n            bottom: true,\n            left: false\n          },\n          addOverlay: true,\n          minHeight: constrains.minTopHeight,\n          // move and dimension the mask\n          place: function place() {\n            this.moveTo(position.innerX, position.outerY).setSize(dimensions.innerWidth, dimensions.topHeight);\n          },\n          // move and dimension the overlay\n          placeOverlay: function placeOverlay(overlay) {\n            var pos = this.getPosition(),\n              size = this.getSize();\n            overlay.moveTo(position.outerX, pos.y).setSize(dimensions.outerWidth, size.height);\n          },\n          // set a resize limit whenever resize happens on an inner edge (here, the top inner edge, eg. the bottom of the mask),\n          // so the min/max width/height limit for \"inner component\" is respected\n          beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n            this.config.maxHeight = fromTop ? null : dimensions.topHeight + (dimensions.innerHeight - constrains.minHeight);\n          },\n          // set the new transform values (dimension and position) resulting from the current mask resize, and apply them\n          onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n            setTopHeight(height, y, fromTop);\n            applyTransformsToMasks();\n          }\n        });\n\n        // North-east\n        createPart({\n          id: 'ne',\n          edges: {\n            top: false,\n            right: false,\n            bottom: false,\n            left: false\n          },\n          edgesBorders: {\n            top: true,\n            right: true,\n            bottom: false,\n            left: false\n          },\n          minHeight: constrains.minTopHeight,\n          place: function place() {\n            this.moveTo(position.innerX + dimensions.innerWidth, position.outerY).setSize(dimensions.rightWidth, dimensions.topHeight);\n          },\n          placeOverlay: function placeOverlay(overlay) {\n            var pos = this.getPosition(),\n              size = this.getSize();\n            overlay.moveTo(pos.x, pos.y + options.resizeHandleSize).setSize(size.width - options.resizeHandleSize, size.height - options.resizeHandleSize * 2);\n          },\n          onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n            setTopHeight(height, y, fromTop);\n            setRightWidth(width, x, fromLeft);\n            applyTransformsToMasks();\n          }\n        });\n\n        // South east\n        createPart({\n          id: 'se',\n          edges: {\n            top: false,\n            right: '.resize-control',\n            bottom: '.resize-control',\n            left: false\n          },\n          edgesBorders: {\n            top: false,\n            right: true,\n            bottom: true,\n            left: false\n          },\n          minHeight: constrains.minBottomHeight,\n          resizeControll: true,\n          place: function place() {\n            this.moveTo(position.innerX + dimensions.innerWidth, position.innerY + dimensions.innerHeight).setSize(dimensions.rightWidth, dimensions.bottomHeight);\n          },\n          placeOverlay: function placeOverlay(overlay) {\n            var pos = this.getPosition(),\n              size = this.getSize();\n            overlay.moveTo(pos.x, pos.y + options.resizeHandleSize).setSize(size.width - options.resizeHandleSize, size.height - options.resizeHandleSize * 2);\n          },\n          onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n            setRightWidth(width, x, fromLeft);\n            setBottomHeight(height, y, fromTop);\n            applyTransformsToMasks();\n          }\n        });\n\n        // South\n        createPart({\n          id: 's',\n          edges: {\n            top: false,\n            right: false,\n            bottom: false,\n            left: false\n          },\n          edgesBorders: {\n            top: true,\n            right: false,\n            bottom: true,\n            left: false\n          },\n          minHeight: constrains.minBottomHeight,\n          place: function place() {\n            this.moveTo(position.innerX, position.innerY + dimensions.innerHeight).setSize(dimensions.innerWidth, dimensions.bottomHeight);\n          },\n          placeOverlay: function placeOverlay(overlay) {\n            var pos = this.getPosition(),\n              size = this.getSize();\n            overlay.moveTo(pos.x, pos.y + options.resizeHandleSize).setSize(size.width, size.height - options.resizeHandleSize * 2);\n          },\n          beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n            this.config.maxHeight = fromTop ? dimensions.bottomHeight + (dimensions.innerHeight - constrains.minHeight) : null;\n          },\n          onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n            setBottomHeight(height, y, fromTop);\n            applyTransformsToMasks();\n          }\n        });\n\n        // East\n        createPart({\n          id: 'e',\n          edges: {\n            top: false,\n            right: false,\n            bottom: '.resize-control',\n            left: '.resize-control'\n          },\n          edgesBorders: {\n            top: false,\n            right: true,\n            bottom: false,\n            left: true\n          },\n          resizeControll: true,\n          place: function place() {\n            this.moveTo(position.innerX + dimensions.innerWidth, position.innerY).setSize(dimensions.rightWidth, dimensions.innerHeight);\n          },\n          placeOverlay: function placeOverlay(overlay) {\n            var pos = this.getPosition(),\n              size = this.getSize();\n            overlay.moveTo(pos.x + options.resizeHandleSize, pos.y - options.resizeHandleSize).setSize(size.width - options.resizeHandleSize * 2, size.height + options.resizeHandleSize * 2);\n          },\n          // eslint-disable-next-line no-unused-vars\n          beforeResize: function beforeResize(width, height, fromLeft) {\n            this.config.maxWidth = dimensions.rightWidth + (dimensions.innerWidth - constrains.minWidth);\n            this.config.minWidth = constrains.minWidth;\n            this.config.maxHeight = dimensions.outerHeight - dimensions.topHeight - constrains.minBottomHeight;\n          },\n          onResize: function onResize(width, height, fromLeft, fromTop, x) {\n            setRightWidth(width, x, fromLeft);\n            setInnerHeight(height);\n            applyTransformsToMasks();\n          }\n        });\n\n        // South-west\n        createPart({\n          id: 'sw',\n          edges: {\n            top: false,\n            right: false,\n            bottom: false,\n            left: false\n          },\n          edgesBorders: {\n            top: false,\n            right: false,\n            bottom: true,\n            left: true\n          },\n          minHeight: constrains.minBottomHeight,\n          place: function place() {\n            this.moveTo(position.outerX, position.innerY + dimensions.innerHeight).setSize(dimensions.leftWidth, dimensions.bottomHeight);\n          },\n          placeOverlay: function placeOverlay(overlay) {\n            var pos = this.getPosition(),\n              size = this.getSize();\n            overlay.moveTo(pos.x + options.resizeHandleSize, pos.y + options.resizeHandleSize).setSize(size.width - options.resizeHandleSize, size.height - options.resizeHandleSize * 2);\n          },\n          onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n            setBottomHeight(height, y, fromTop);\n            setLeftWidth(width, x, fromLeft);\n            applyTransformsToMasks();\n          }\n        });\n\n        // West\n        createPart({\n          id: 'w',\n          edges: {\n            top: false,\n            right: false,\n            bottom: false,\n            left: false\n          },\n          edgesBorders: {\n            top: false,\n            right: true,\n            bottom: false,\n            left: true\n          },\n          place: function place() {\n            this.moveTo(position.outerX, position.innerY).setSize(dimensions.leftWidth, dimensions.innerHeight);\n          },\n          placeOverlay: function placeOverlay(overlay) {\n            var pos = this.getPosition(),\n              size = this.getSize();\n            overlay.moveTo(pos.x + options.resizeHandleSize, pos.y - options.resizeHandleSize).setSize(size.width - options.resizeHandleSize * 2, size.height + options.resizeHandleSize * 2);\n          },\n          beforeResize: function beforeResize(width, height, fromLeft) {\n            this.config.maxWidth = fromLeft ? null : dimensions.leftWidth + (dimensions.innerWidth - constrains.minWidth);\n          },\n          onResize: function onResize(width, height, fromLeft, fromTop, x) {\n            setLeftWidth(width, x, fromLeft);\n            applyTransformsToMasks();\n          }\n        });\n\n        // North-west\n        createPart({\n          id: 'nw',\n          edges: {\n            top: false,\n            right: false,\n            bottom: false,\n            left: false\n          },\n          edgesBorders: {\n            top: true,\n            right: false,\n            bottom: false,\n            left: true\n          },\n          minHeight: constrains.minTopHeight,\n          place: function place() {\n            this.moveTo(position.outerX, position.outerY).setSize(dimensions.leftWidth, dimensions.topHeight);\n          },\n          placeOverlay: function placeOverlay(overlay) {\n            var pos = this.getPosition(),\n              size = this.getSize();\n            overlay.moveTo(pos.x + options.resizeHandleSize, pos.y + options.resizeHandleSize).setSize(size.width - options.resizeHandleSize, size.height - options.resizeHandleSize * 2);\n          },\n          onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n            setTopHeight(height, y, fromTop);\n            setLeftWidth(width, x, fromLeft);\n            applyTransformsToMasks();\n          }\n        });\n      }\n      function createPart(partConfig) {\n        allParts[partConfig.id] = {\n          mask: createMask(_.assign({}, constrains, partConfig)),\n          overlay: partConfig.addOverlay ? createOverlay(partConfig) : null\n        };\n      }\n      function createVisualGuides() {\n        visualGuides.$maskBg = $('<div>', {\n          class: 'mask-bg'\n        });\n        visualGuides.$innerWindow = $('<div>', {\n          class: 'inner-window'\n        });\n      }\n\n      /**\r\n       * =========================\r\n       * The compoundMask instance\r\n       * =========================\r\n       */\n\n      dimensions = _.defaults(dimensions || {}, defaultDimensions);\n      position = _.defaults(position || {}, defaultPosition);\n      options = _.defaults(options || {}, defaultOptions);\n      constrains = {\n        minWidth: options.resizeHandleSize * 2 + options.dragMinWidth,\n        minHeight: options.resizeHandleSize * 2 + options.dragMinHeight,\n        minBottomHeight: options.resizeHandleSize * 2 + options.innerDragHeight,\n        minTopHeight: options.resizeHandleSize * 2 + 18 // make sure that top will fit header size\n      };\n\n      compoundMask = {\n        init: function init() {\n          var self = this;\n          this.setTransforms(dimensions, position);\n          createCompoundMask();\n          createVisualGuides();\n          createInnerDragHandle();\n          createCloser();\n          closer.on('click', function () {\n            self.hide();\n            self.trigger('close');\n          });\n          return this;\n        },\n        render: function render($container) {\n          invokeOnAll('render', [$container]);\n          innerDrag.render($container);\n          closer.render($container);\n          applyTransforms();\n          return this;\n        },\n        destroy: function destroy() {\n          invokeOnAll('destroy');\n          visualGuides = null;\n          innerDrag = null;\n          closer = null;\n          return this;\n        },\n        show: function show() {\n          invokeOnAll('show');\n          innerDrag.show();\n          closer.show();\n          this.setState('hidden', false);\n          return this;\n        },\n        hide: function hide() {\n          invokeOnAll('hide');\n          innerDrag.hide();\n          closer.hide();\n          this.setState('hidden', true);\n          return this;\n        },\n        /**\r\n         * Allow updating the transform model\r\n         * @param {Object} dim\r\n         * @param {Number} dim.outerWidth - overall mask width\r\n         * @param {Number} dim.outerHeight - overall mask height\r\n         * @param {Number} dim.innerWidth - inner window width\r\n         * @param {Number} dim.innerHeight - inner window height\r\n         * @param {Number} pos\r\n         * @param {Number} pos.outerX - overall mask x\r\n         * @param {Number} pos.outerY - overall mask y\r\n         * @param {Number} pos.innerX - inner window x\r\n         * @param {Number} pos.innerY - inner window y\r\n         */\n        setTransforms: function setTransforms(dim, pos) {\n          dimensions = _.defaults(dim || {}, dimensions);\n          position = _.defaults(pos || {}, position);\n\n          // automatically complete the dimensions\n          dimensions.topHeight = pos.innerY - pos.outerY;\n          dimensions.rightWidth = dim.outerWidth - (pos.innerX - pos.outerX) - dim.innerWidth;\n          dimensions.bottomHeight = dim.outerHeight - (pos.innerY - pos.outerY) - dim.innerHeight;\n          dimensions.leftWidth = pos.innerX - pos.outerX;\n          correctTransforms();\n          applyTransforms();\n        },\n        getDimensions: function getDimensions() {\n          return dimensions;\n        },\n        getPosition: function getPosition() {\n          return position;\n        },\n        getParts: function getParts() {\n          return allParts;\n        }\n      };\n      statifier(compoundMask);\n      eventifier(compoundMask);\n      return compoundMask;\n    }\n\n    return compoundMaskFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/lineReader/plugin',['lodash', 'i18n', 'taoTests/runner/plugin', 'ui/hider', 'util/shortcut', 'util/namespace', 'taoQtiTest/runner/helpers/map', 'taoQtiTest/runner/plugins/tools/lineReader/compoundMask'], function (_, __, pluginFactory, hider, shortcut, namespaceHelper, mapHelper, compoundMaskFactory) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n    compoundMaskFactory = compoundMaskFactory && Object.prototype.hasOwnProperty.call(compoundMaskFactory, 'default') ? compoundMaskFactory['default'] : compoundMaskFactory;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\n    var pluginName = 'line-reader';\n\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\n    var actionPrefix = `tool-${pluginName}-`;\n\n    /**\r\n     * Options for the compoundMask factory\r\n     * @type {Object}\r\n     */\n    var maskOptions = {\n      dragMinWidth: 17,\n      dragMinHeight: 7,\n      resizeHandleSize: 7,\n      innerDragHeight: 20\n    };\n    var dimensions, position;\n\n    /**\r\n     * These functions are a first effort to place the mask on the first line on the item\r\n     * They make a lot of assumptions:\r\n     * - the item starts with a text\r\n     * - the padding is set on the .qti-item container\r\n     * - the padding is consistent with the minWidth/minHeight configuration of the mask\r\n     * - and some other...\r\n     * @param {jQuery} $container - where the mask is appended\r\n     */\n    function getDimensions($container) {\n      var $qtiContent = $container.find('#qti-content'),\n        $qtiItem = $qtiContent.find('.qti-item'),\n        lineHeight = Math.ceil(parseFloat($qtiContent.css('line-height'))) || 20; // reasonable default line height\n\n      return {\n        outerWidth: $qtiItem.width() + maskOptions.resizeHandleSize * 4 + maskOptions.dragMinWidth * 2,\n        outerHeight: 175,\n        // reasonable default height\n        innerWidth: $qtiItem.width(),\n        innerHeight: lineHeight\n      };\n    }\n    function getPosition($container) {\n      var $qtiContent = $container.find('#qti-content'),\n        $qtiItem = $qtiContent.find('.qti-item'),\n        itemPosition = $qtiItem.position() || {},\n        paddingLeft = parseInt($qtiItem.css('padding-left'), 10),\n        paddingTop = parseInt($qtiItem.css('padding-top'), 10),\n        textPadding = 3,\n        // this is to let the text breathe a bit\n        innerX = parseInt(itemPosition.left, 10) + paddingLeft - textPadding,\n        innerY = parseInt(itemPosition.top, 10) + paddingTop - textPadding;\n      return {\n        outerX: innerX - maskOptions.resizeHandleSize * 2 - maskOptions.dragMinWidth,\n        outerY: 0,\n        innerX: innerX,\n        innerY: innerY\n      };\n    }\n    function containerWidthHasChanged($container) {\n      var newDimensions = getDimensions($container);\n      return newDimensions.outerWidth !== dimensions.outerWidth;\n    }\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var plugin = pluginFactory({\n      name: pluginName,\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[pluginName] || {};\n        const $container = testRunner.getAreaBroker().getContentArea().parent();\n        this.compoundMask = compoundMaskFactory(maskOptions).init().render($container).on('close', function () {\n          closeMask();\n        }).hide();\n\n        /**\r\n         * Checks if the plugin is currently available\r\n         * @returns {Boolean}\r\n         */\n        function isEnabled() {\n          //to be activated with the special category x-tao-option-lineReader\n          return mapHelper.hasItemCategory(testRunner.getTestMap(), testRunner.getTestContext().itemIdentifier, 'lineReader', true);\n        }\n        function toggleButton() {\n          if (isEnabled()) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        }\n        function toggleMask() {\n          if (self.compoundMask.getState('hidden')) {\n            if (containerWidthHasChanged($container)) {\n              transformMask($container);\n            }\n            openMask();\n          } else {\n            closeMask();\n          }\n        }\n        function openMask() {\n          self.compoundMask.show();\n          self.trigger('start');\n          self.button.turnOn();\n        }\n        function closeMask() {\n          if (!self.compoundMask.getState('hidden')) {\n            self.compoundMask.hide();\n          }\n          self.trigger('end');\n          self.button.turnOff();\n        }\n        function transformMask($maskContainer) {\n          dimensions = getDimensions($maskContainer);\n          position = getPosition($maskContainer);\n          self.compoundMask.setTransforms(_.clone(dimensions), _.clone(position));\n        }\n\n        // create button\n        this.button = this.getAreaBroker().getToolbox().createEntry({\n          title: __('Line Reader'),\n          icon: 'insert-horizontal-line',\n          control: 'line-reader',\n          text: __('Line Reader')\n        });\n\n        // attach user events\n        this.button.on('click', function (e) {\n          e.preventDefault();\n          testRunner.trigger(`${actionPrefix}toggle`);\n        });\n        if (testRunnerOptions.allowShortcuts) {\n          if (pluginShortcuts.toggle) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n              testRunner.trigger(`${actionPrefix}toggle`);\n            }, {\n              avoidInput: true,\n              prevent: true\n            });\n          }\n        }\n\n        //start disabled\n        this.disable();\n\n        //update plugin state based on changes\n        testRunner.on('loaditem', toggleButton).on('renderitem', function () {\n          transformMask($container);\n        }).on('enabletools renderitem', function () {\n          self.enable();\n        }).on('disabletools unloaditem', function () {\n          self.disable();\n          closeMask();\n        }).on(`${actionPrefix}toggle`, function () {\n          if (isEnabled()) {\n            toggleMask();\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        this.compoundMask.destroy();\n        shortcut.remove(`.${this.getName()}`);\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable: function enable() {\n        this.button.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable: function disable() {\n        this.button.disable();\n      },\n      /**\r\n       * Show the button\r\n       */\n      show: function show() {\n        this.button.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide: function hide() {\n        this.button.hide();\n      }\n    });\n\n    return plugin;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel',['jquery', 'lodash', 'ui/component', 'handlebars', 'lib/handlebars/helpers', 'ui/dynamicComponent'], function ($$1, _, component, Handlebars, Helpers0, dynamicComponent) { 'use strict';\n\n    $$1 = $$1 && Object.prototype.hasOwnProperty.call($$1, 'default') ? $$1['default'] : $$1;\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    component = component && Object.prototype.hasOwnProperty.call(component, 'default') ? component['default'] : component;\n    Handlebars = Handlebars && Object.prototype.hasOwnProperty.call(Handlebars, 'default') ? Handlebars['default'] : Handlebars;\n    Helpers0 = Helpers0 && Object.prototype.hasOwnProperty.call(Helpers0, 'default') ? Helpers0['default'] : Helpers0;\n    dynamicComponent = dynamicComponent && Object.prototype.hasOwnProperty.call(dynamicComponent, 'default') ? dynamicComponent['default'] : dynamicComponent;\n\n    if (!Helpers0.__initialized) {\n      Helpers0(Handlebars);\n      Helpers0.__initialized = true;\n    }\n    var Template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n      this.compilerInfo = [4,'>= 1.0.0'];\n    helpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n      var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n      buffer += \"<div class=\\\"magnifier\\\">\\r\\n    <div class=\\\"level\\\">\";\n      if (helper = helpers.level) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n      else { helper = (depth0 && depth0.level); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n      buffer += escapeExpression(stack1)\n        + \"</div>\\r\\n    <div class=\\\"overlay\\\"></div>\\r\\n    <div class=\\\"inner\\\"></div>\\r\\n    <div class=\\\"controls close\\\">\\r\\n        <a href=\\\"#\\\" class=\\\"control\\\" data-control=\\\"zoomIn\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify more\", options) : helperMissing.call(depth0, \"__\", \"Magnify more\", options)))\n        + \"\\\"><span class=\\\"icon-add\\\"></span></a>\\r\\n        <a href=\\\"#\\\" class=\\\"control\\\"  data-control=\\\"zoomOut\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify less\", options) : helperMissing.call(depth0, \"__\", \"Magnify less\", options)))\n        + \"\\\"><span class=\\\"icon-remove\\\"></span></a>\\r\\n        <a href=\\\"#\\\" class=\\\"closeMagnifier\\\" data-control=\\\"closeMagnifier\\\" title=\\\"\"\n        + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close Magnifier\", options) : helperMissing.call(depth0, \"__\", \"Close Magnifier\", options)))\n        + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n      return buffer;\n      });\n    function magnifierPanelTpl(data, options, asString) {\n      var html = Template(data, options);\n      return (asString || true) ? html : $(html);\n    }\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The screen pixel ratio\r\n     * @type {Number}\r\n     */\n    var screenRatio = window.screen.width / window.screen.height;\n\n    /**\r\n     * Standard debounce delay for heavy process\r\n     * @type {Number}\r\n     */\n    var debounceDelay = 50;\n\n    /**\r\n     * Standard scrolling throttling for the scrolling\r\n     * It can be lower than the debounce delay as it is lighter in process and it improves the user experience\r\n     * @type {Number}\r\n     */\n    var scrollingDelay = 20;\n\n    /**\r\n     * The default base size\r\n     * @type {Number}\r\n     */\n    var defaultBaseSize = 116;\n\n    /**\r\n     * The minimum zoom level\r\n     * @type {Number}\r\n     */\n    var defaultLevelMin = 2;\n\n    /**\r\n     * The maximum zoom level\r\n     * @type {Number}\r\n     */\n    var defaultLevelMax = 8;\n\n    /**\r\n     * The default zoom level\r\n     * @type {Number}\r\n     */\n    var defaultLevel = defaultLevelMin;\n\n    /**\r\n     * Some default values\r\n     * @type {Object}\r\n     */\n    var defaultConfig = {\n      level: defaultLevel,\n      levelMin: defaultLevelMin,\n      levelMax: defaultLevelMax,\n      levelStep: 0.5,\n      baseSize: defaultBaseSize,\n      maxRatio: 0.5\n    };\n    var dynamicComponentDefaultConfig = {\n      draggable: true,\n      resizable: true,\n      preserveAspectRatio: false,\n      width: defaultBaseSize * defaultLevel,\n      height: defaultBaseSize * defaultLevel / screenRatio,\n      minWidth: defaultBaseSize * defaultLevelMin,\n      minHeight: defaultBaseSize * defaultLevelMin / screenRatio,\n      stackingScope: 'test-runner',\n      top: 50,\n      left: 10\n    };\n\n    /**\r\n     * Creates a magnifier panel component\r\n     * @param {Object} config\r\n     * @param {Number} [config.level] - The default zoom level\r\n     * @param {Number} [config.levelMin] - The minimum allowed zoom level\r\n     * @param {Number} [config.levelMax] - The maximum allowed zoom level\r\n     * @param {Number} [config.levelStep] - The level increment applied when using the controls + and -\r\n     * @param {Number} [config.baseSize] - The base size used to assign the width and the height according to the zoom level\r\n     * @param {Number} [config.maxRatio] - The ratio for the maximum size regarding the size of the window\r\n     * @returns {magnifierPanel} the component (initialized)\r\n     */\n    function magnifierPanelFactory(config) {\n      var initConfig = _.defaults(config || {}, defaultConfig);\n      var zoomLevelMin = parseFloat(initConfig.levelMin);\n      var zoomLevelMax = parseFloat(initConfig.levelMax);\n      var zoomLevelStep = parseFloat(initConfig.levelStep);\n      var zoomLevel = adjustZoomLevel(initConfig.level);\n      var maxRatio = parseFloat(initConfig.maxRatio);\n      var $initTarget = null;\n      var controls = null;\n      var observer = null;\n      var targetWidth, targetHeight, dx, dy;\n      var scrolling = [];\n      var dynamicComponentInstance;\n      var dynamicComponentConfig = _.defaults(config ? config.component || {} : {}, dynamicComponentDefaultConfig);\n\n      /**\r\n       * @typedef {Object} magnifierPanel\r\n       */\n      var magnifierPanel = component({\n        /**\r\n         * Gets the current zoom level\r\n         * @returns {Number}\r\n         */\n        getZoomLevel: function getZoomLevel() {\n          return zoomLevel;\n        },\n        /**\r\n         * Gets the targeted content the magnifier will zoom\r\n         * @returns {jQuery}\r\n         */\n        getTarget: function getTarget() {\n          return controls && controls.$target;\n        },\n        /**\r\n         * Sets the targeted content the magnifier will zoom\r\n         * @param {jQuery} $newTarget\r\n         * @returns {magnifierPanel}\r\n         * @fires targetchange\r\n         * @fires update\r\n         */\n        setTarget: function setTarget($newTarget) {\n          if (controls) {\n            controls.$target = $newTarget;\n            controls.$viewTarget = null;\n            setScrollingListener();\n\n            /**\r\n             * @event magnifierPanel#targetchange\r\n             * @param {jQuery} $target\r\n             */\n            this.trigger('targetchange', controls.$target);\n            this.update();\n          } else {\n            $initTarget = $newTarget;\n          }\n          return this;\n        },\n        /**\r\n         * Sets the zoom level of the magnifier\r\n         * @param {Number} level\r\n         * @returns {magnifierPanel}\r\n         * @fires zoom\r\n         */\n        zoomTo: function zoomTo(level) {\n          if (level && _.isFinite(level)) {\n            zoomLevel = adjustZoomLevel(level);\n          }\n          applyZoomLevel();\n          showZoomLevel();\n          updateMaxSize();\n          updateZoom();\n\n          /**\r\n           * @event magnifierPanel#zoom\r\n           * @param {Number} zoomLevel\r\n           */\n          this.trigger('zoom', zoomLevel);\n          return this;\n        },\n        /**\r\n         * Increments the zoom level of the magnifier\r\n         * @param {Number} step\r\n         * @returns {magnifierPanel}\r\n         * @fires zoom\r\n         */\n        zoomBy: function zoomBy(step) {\n          if (step && _.isFinite(step)) {\n            this.zoomTo(zoomLevel + parseFloat(step));\n          }\n          return this;\n        },\n        /**\r\n         * Zoom-in using the configured level step\r\n         * @returns {magnifierPanel}\r\n         * @fires zoom\r\n         */\n        zoomIn: function zoomIn() {\n          return this.zoomBy(zoomLevelStep);\n        },\n        /**\r\n         * Zoom-out using the configured level step\r\n         * @returns {magnifierPanel}\r\n         * @fires zoom\r\n         */\n        zoomOut: function zoomOut() {\n          return this.zoomBy(-zoomLevelStep);\n        },\n        /**\r\n         * Places the magnifier sight at a particular position on the target content\r\n         * @param {Number} x\r\n         * @param {Number} y\r\n         * @returns {magnifierPanel}\r\n         */\n        zoomAt: function zoomAt(x, y) {\n          var position;\n          if (controls) {\n            position = this.translate(x, y);\n            controls.$inner.css({\n              top: -position.top,\n              left: -position.left\n            });\n          }\n        },\n        /**\r\n         * Translates screen coordinates to zoom coordinates\r\n         * @param {Number} x\r\n         * @param {Number} y\r\n         * @returns {Object}\r\n         */\n        translate: function translate(x, y) {\n          return {\n            top: translateMagnifier(y, targetHeight, dynamicComponentInstance.position.height),\n            left: translateMagnifier(x, targetWidth, dynamicComponentInstance.position.width)\n          };\n        },\n        /**\r\n         * Updates the magnifier with the target content\r\n         * @returns {magnifierPanel}\r\n         * @fires update\r\n         */\n        update: function update() {\n          if (controls && controls.$target) {\n            controls.$clone = controls.$target.clone().removeAttr('id');\n            controls.$clone.find('iframe').remove();\n            controls.$clone.find('[name],[id],[data-serial]').removeAttr('name id data-serial');\n            controls.$inner.empty().append(controls.$clone);\n            controls.$clone.find('audio').prop('muted', true);\n            applySize();\n            applyZoomLevel();\n            updateZoom();\n            updateMaxSize();\n            applyScrolling();\n\n            /**\r\n             * @event magnifierPanel#update\r\n             */\n            this.trigger('update');\n          }\n          return this;\n        }\n      }, defaultConfig);\n\n      /**\r\n       * Will update the magnifier content with the actual content\r\n       * @type {Function}\r\n       */\n      var updateMagnifier = _.debounce(_.bind(magnifierPanel.update, magnifierPanel), debounceDelay);\n\n      /**\r\n       * Will update the magnifier content with the scrolling position\r\n       * @type {Function}\r\n       */\n      var scrollingListenerCallback = _.throttle(function (event) {\n        var $target = $$1(event.target);\n        var scrollingTop = event.target.scrollTop;\n        var scrollLeft = event.target.scrollLeft;\n        var scrollId, scrollData;\n\n        //check if the element is already known as a scrollable element\n        if (controls && controls.$clone && $target.data('magnifier-scroll')) {\n          scrollId = $target.data('magnifier-scroll');\n          scrollData = _.find(scrolling, {\n            id: scrollId\n          });\n          scrollData.scrollTop = scrollingTop;\n          scrollData.scrollLeft = scrollLeft;\n\n          //if in clone, scroll it\n          scrollInClone(scrollData);\n        } else {\n          //if the element is not yet identified as a scrollable element, tag it and register its id\n          scrollId = _.uniqueId('scrolling_');\n          $target.attr('data-magnifier-scroll', scrollId);\n          scrolling.push({\n            id: scrollId,\n            scrollTop: scrollingTop,\n            scrollLeft: scrollLeft\n          });\n\n          //update all\n          magnifierPanel.update();\n        }\n      }, scrollingDelay);\n\n      /**\r\n       * Scroll an element in the clone\r\n       *\r\n       * @param {Object} scrollData\r\n       * @param {String} scrollData.id\r\n       * @param {Number} [scrollData.scrollTop]\r\n       * @param {Number} [scrollData.scrollLeft]\r\n       */\n      function scrollInClone(scrollData) {\n        var $clonedTarget;\n        if (controls && controls.$clone && scrollData && scrollData.id) {\n          $clonedTarget = controls.$clone.find(`[data-magnifier-scroll=${scrollData.id}]`);\n          if ($clonedTarget.length) {\n            if (_.isNumber(scrollData.scrollTop)) {\n              $clonedTarget[0].scrollTop = scrollData.scrollTop;\n            }\n            if (_.isNumber(scrollData.scrollLeft)) {\n              $clonedTarget[0].scrollLeft = scrollData.scrollLeft;\n            }\n          }\n        }\n      }\n\n      /**\r\n       * Capture all scroll positions of elements inside current target\r\n       */\n      function updateScrollPositions() {\n        if (!controls || !controls.$target) {\n          return;\n        }\n        const elements = [controls.$target];\n        let scrollOffsetsChanged = false;\n        while (elements.length) {\n          const $currentElement = $$1(elements.shift());\n          const scrollLeft = $currentElement.scrollLeft();\n          const scrollTop = $currentElement.scrollTop();\n          let scrollId = $currentElement.data('magnifier-scroll');\n          elements.push(...Array.from($currentElement.children()));\n          if (scrollLeft > 0 || scrollTop > 0 || scrollId) {\n            scrollOffsetsChanged = true;\n            if (scrollId) {\n              const scrollData = _.find(scrolling, {\n                id: scrollId\n              });\n              scrollData.scrollTop = scrollTop;\n              scrollData.scrollLeft = scrollLeft;\n            } else {\n              scrollId = _.uniqueId('scrolling_');\n              $currentElement.attr('data-magnifier-scroll', scrollId);\n              scrolling.push({\n                id: scrollId,\n                scrollTop,\n                scrollLeft\n              });\n            }\n          }\n        }\n\n        // If there is any changes to scroll offset inside the target the magnifier should be updated\n        if (scrollOffsetsChanged) {\n          magnifierPanel.update();\n        }\n      }\n\n      /**\r\n       * Initializes the listener for scrolling event and transfer the scrolling\r\n       */\n      function setScrollingListener() {\n        updateScrollPositions();\n        window.addEventListener('scroll', scrollingListenerCallback, true);\n      }\n\n      /**\r\n       * Stops the listener for scrolling event\r\n       */\n      function removeScrollingListener() {\n        window.removeEventListener('scroll', scrollingListenerCallback, true);\n      }\n\n      /**\r\n       * Applies scrolling programmatically from the recorded list of elements to be scrolled\r\n       */\n      function applyScrolling() {\n        _.forEach(scrolling, scrollInClone);\n      }\n\n      /**\r\n       * Adjusts a provided zoom level to fit the constraints\r\n       * @param {Number|String} level\r\n       * @returns {Number}\r\n       */\n      function adjustZoomLevel(level) {\n        return Math.max(zoomLevelMin, Math.min(parseFloat(level), zoomLevelMax));\n      }\n\n      /**\r\n       * Applies the zoom level to the content\r\n       */\n      function applyZoomLevel() {\n        if (controls) {\n          controls.$inner.css({\n            transform: `scale(${zoomLevel})`\n          });\n        }\n      }\n\n      /**\r\n       * Shows the zoom level using a CSS animation\r\n       */\n      function showZoomLevel() {\n        var $newZoomLevel;\n        if (controls) {\n          $newZoomLevel = controls.$zoomLevel.clone(true).html(zoomLevel);\n          controls.$zoomLevel.before($newZoomLevel).remove();\n          controls.$zoomLevel = $newZoomLevel;\n        }\n      }\n\n      /**\r\n       * Updates the max size according to the window's size\r\n       */\n      function updateMaxSize() {\n        if (!dynamicComponentInstance) {\n          return;\n        }\n        const $window = $$1(window);\n        dynamicComponentInstance.config.maxWidth = $window.width() * maxRatio;\n        dynamicComponentInstance.config.maxHeight = $window.height() * maxRatio;\n      }\n\n      /**\r\n       * Forwards the size of the target to the cloned content\r\n       */\n      function applySize() {\n        if (controls && controls.$clone) {\n          targetWidth = controls.$target.width();\n          targetHeight = controls.$target.height();\n          controls.$clone.width(targetWidth).height(targetHeight);\n        }\n      }\n\n      /**\r\n       * Place the zoom sight at the right place inside the magnifier\r\n       */\n      function updateZoom() {\n        var position;\n        if (controls && controls.$target) {\n          position = dynamicComponentInstance.position;\n          position.x += dx + controls.$target.scrollLeft();\n          position.y += dy + controls.$target.scrollTop();\n          magnifierPanel.zoomAt(position.x, position.y);\n        }\n      }\n\n      /**\r\n       * Creates the observer that will react to DOM changes to update the magnifier\r\n       */\n      function createObserver() {\n        observer = new window.MutationObserver(updateMagnifier);\n      }\n\n      /**\r\n       * Starts to observe the DOM of the magnifier target\r\n       */\n      function startObserver() {\n        if (controls && controls.$target) {\n          observer.observe(controls.$target.get(0), {\n            childList: true,\n            // Set to true if additions and removals of the target node's child elements (including text nodes) are to be observed.\n            attributes: true,\n            // Set to true if mutations to target's attributes are to be observed.\n            characterData: true,\n            // Set to true if mutations to target's data are to be observed.\n            subtree: true // Set to true if mutations to target and target's descendants are to be observed.\n          });\n        }\n\n        setScrollingListener();\n      }\n\n      /**\r\n       * Stops to observe the DOM of the magnifier target\r\n       */\n      function stopObserver() {\n        observer.disconnect();\n        removeScrollingListener();\n      }\n\n      /**\r\n       * Translates a screen coordinate into the magnifier\r\n       * @param {Number} coordinate\r\n       * @param {Number} actualSize\r\n       * @param {Number} magnifierSize\r\n       * @returns {Number}\r\n       */\n      function translateMagnifier(coordinate, actualSize, magnifierSize) {\n        var delta = 0;\n        var ratio = zoomLevel;\n        if (actualSize) {\n          delta = actualSize * (zoomLevel - 1) / 2;\n          ratio = (actualSize * zoomLevel - magnifierSize) / (actualSize - magnifierSize);\n        }\n        return coordinate * ratio - delta;\n      }\n\n      /**\r\n       * Gets the top element from a particular absolute point.\r\n       * @param {Number} x - the page X-coordinate of the point\r\n       * @param {Number} y - the page Y-coordinate of the point\r\n       * @returns {HTMLElement}\r\n       */\n      function getElementFromPoint(x, y) {\n        var el;\n\n        // this is done to prevent working with undefined coordinates\n        x = x || 0;\n        y = y || 0;\n        if (controls) {\n          controls.$overlay.addClass('hidden');\n        }\n        el = document.elementFromPoint(x, y);\n        if (controls) {\n          controls.$overlay.removeClass('hidden');\n        }\n        return el;\n      }\n\n      /**\r\n       * Find the related node in the target. The both trees must have the same content.\r\n       * @param {jQuery|HTMLElement} node - the node for which find a relation\r\n       * @param {jQuery|HTMLElement} root - the root of the tree that contains the actual node\r\n       * @param {jQuery|HTMLElement} target - the root of the tree that could contains the related node\r\n       * @returns {jQuery}\r\n       */\n      function findSourceNode(node, root, target) {\n        var $node = $$1(node);\n        var $root = $$1(root);\n        var $target = $$1(target);\n        var indexes = [$node.index()];\n\n        // compute map of node's parents indexes\n        $node.parents().each(function () {\n          var $this = $$1(this);\n          if (!$this.is($root)) {\n            indexes.push($this.index());\n          } else {\n            return false;\n          }\n        });\n\n        // the last index is related to the root, so ignore it\n        indexes.pop();\n\n        // now try to find the same node using the path provided by the indexes map\n        if (indexes.length) {\n          $node = $target;\n          _.forEachRight(indexes, function (index) {\n            $node = $node.children().eq(index);\n            if (!$node.length) {\n              return false;\n            }\n          });\n        } else {\n          // nothing to search for...\n          $node = $$1();\n        }\n        return $node;\n      }\n      dynamicComponentInstance = dynamicComponent({}).on('rendercontent', function ($content) {\n        // eslint-disable-next-line consistent-this\n        var dynamicComponentContext = this;\n        var $element = this.getElement();\n        $element.addClass('magnifier-container');\n        magnifierPanel.setTemplate(magnifierPanelTpl).on('render', function () {\n          var self = this;\n          var $component = this.getElement();\n          this.setState('hidden', true);\n\n          // compute the padding of the magnifier content\n          dx = ($component.outerWidth() - $component.width()) / 2;\n          dy = ($component.outerHeight() - $component.height()) / 2;\n          controls = {\n            $target: $initTarget,\n            $inner: $$1('.inner', $component),\n            $zoomLevel: $$1('.level', $component),\n            $overlay: $$1('.overlay', $component)\n          };\n          $initTarget = null;\n\n          // click on zoom-out control\n          $component.on('click touchstart', '.control[data-control=\"zoomOut\"]', function (event) {\n            event.preventDefault();\n            self.zoomOut();\n          });\n\n          // click on zoom-in control\n          $component.on('click touchstart', '.control[data-control=\"zoomIn\"]', function (event) {\n            event.preventDefault();\n            self.zoomIn();\n          });\n\n          // click on close controls\n          $component.on('click touchstart', '.closeMagnifier', function (event) {\n            event.preventDefault();\n            self.hide();\n            self.trigger('close');\n          });\n\n          // interact through the magnifier glass with the zoomed content\n          $component.on('click touchstart', '.overlay', function (event) {\n            findSourceNode(getElementFromPoint(event.pageX, event.pageY), controls.$inner, controls.$target).click().focus();\n          });\n          createObserver();\n          updateMaxSize();\n          applyZoomLevel();\n        }).on('show', function () {\n          updateMagnifier();\n          startObserver();\n          dynamicComponentContext.show();\n        }).on('hide', function () {\n          stopObserver();\n          dynamicComponentContext.hide();\n        }).on('destroy', function () {\n          stopObserver();\n          $initTarget = null;\n          controls = null;\n          observer = null;\n          dynamicComponentContext.destroy();\n        }).init(initConfig).render($content);\n      }).on('down move resize', function () {\n        updateZoom();\n      }).on('resize', function () {\n        updateMaxSize();\n      }).init(dynamicComponentConfig);\n      return magnifierPanel;\n    }\n\n    return magnifierPanelFactory;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/magnifier/magnifier',['lodash', 'i18n', 'taoTests/runner/plugin', 'ui/hider', 'util/shortcut', 'util/namespace', 'taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel', 'taoQtiTest/runner/helpers/map'], function (_, __, pluginFactory, hider, shortcut, namespaceHelper, magnifierPanelFactory, mapHelper) { 'use strict';\n\n    _ = _ && Object.prototype.hasOwnProperty.call(_, 'default') ? _['default'] : _;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    magnifierPanelFactory = magnifierPanelFactory && Object.prototype.hasOwnProperty.call(magnifierPanelFactory, 'default') ? magnifierPanelFactory['default'] : magnifierPanelFactory;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n     */\n\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\n    var pluginName = 'magnifier';\n\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\n    var actionPrefix = `tool-${pluginName}-`;\n\n    /**\r\n     * Some default options for the plugin\r\n     * @type {Object}\r\n     */\n    var defaultOptions = {\n      zoomMin: 2,\n      // Smallest magnification factor\n      zoomMax: 8,\n      // Biggest magnification factor\n      zoomStep: 0.5 // Increment between min an max\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var magnifier = pluginFactory({\n      name: pluginName,\n      /**\r\n       * Initializes the plugin (called during runner's init)\r\n       */\n      init: function init() {\n        const self = this;\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginConfig = Object.assign({}, defaultOptions, this.getConfig());\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[pluginName] || {};\n        let magnifierPanel = null;\n\n        /**\r\n         * Creates the magnifier panel on demand\r\n         * @returns {magnifierPanel}\r\n         * @fires plugin-magnifier-create.magnifier\r\n         */\n        function getMagnifierPanel() {\n          var $container;\n          if (!magnifierPanel) {\n            $container = testRunner.getAreaBroker().getContainer();\n            magnifierPanel = magnifierPanelFactory({\n              levelMin: pluginConfig.zoomMin,\n              levelMax: pluginConfig.zoomMax,\n              levelStep: pluginConfig.zoomStep,\n              component: {\n                renderTo: $container.parent(),\n                draggableContainer: $container.parent()\n              }\n            }).on('show', function () {\n              /**\r\n               * @event plugin-magnifier-show.magnifier\r\n               */\n              self.trigger('magnifier-show');\n            }).on('hide', function () {\n              /**\r\n               * @event plugin-magnifier-hide.magnifier\r\n               */\n              self.trigger('magnifier-hide');\n            }).on('zoom', function (level) {\n              /**\r\n               * @event plugin-magnifier-zoom.magnifier\r\n               * @param {Number} zoomLevel\r\n               */\n              self.trigger('magnifier-zoom', level);\n            }).on('close', function () {\n              hideMagnifier();\n            }).setTarget($container);\n\n            /**\r\n             * @event plugin-magnifier-create.magnifier\r\n             */\n            self.trigger('magnifier-create');\n          }\n          return magnifierPanel;\n        }\n\n        /**\r\n         * Checks if the plugin is currently available\r\n         * @returns {Boolean}\r\n         */\n        function isEnabled() {\n          //to be activated with the special category x-tao-option-magnifier\n          return mapHelper.hasItemCategory(testRunner.getTestMap(), testRunner.getTestContext().itemIdentifier, 'magnifier', true);\n        }\n\n        /**\r\n         * Shows/hides the plugin GUI according to context\r\n         */\n        function togglePlugin() {\n          if (isEnabled()) {\n            self.show();\n          } else {\n            self.hide();\n          }\n        }\n\n        /**\r\n         * Shows/hides the magnifier\r\n         */\n        function toggleMagnifier() {\n          if (self.getState('enabled')) {\n            if (self.getState('active')) {\n              hideMagnifier();\n            } else {\n              showMagnifier();\n            }\n          }\n        }\n\n        /**\r\n         * Opens the magnifier panel\r\n         * @fires plugin-magnifier-show.magnifier\r\n         */\n        function showMagnifier() {\n          getMagnifierPanel();\n          if (magnifierPanel.is('hidden')) {\n            magnifierPanel.show();\n          }\n          self.button.turnOn();\n          testRunner.trigger(`plugin-open.${pluginName}`);\n          self.setState('active', true);\n        }\n\n        /**\r\n         * Closes the magnifier panel\r\n         * @fires plugin-magnifier-hide.magnifier\r\n         */\n        function hideMagnifier() {\n          self.setState('active', false);\n          self.button.turnOff();\n          testRunner.trigger(`plugin-close.${pluginName}`);\n          if (magnifierPanel && !magnifierPanel.is('hidden')) {\n            magnifierPanel.hide();\n          }\n        }\n\n        // build element\n        this.button = this.getAreaBroker().getToolbox().createEntry({\n          control: 'magnify',\n          title: __('Displays a customisable magnifier'),\n          text: __('Magnifying Glass'),\n          icon: 'find'\n        });\n\n        // attach behavior\n        this.button.on('click', function (event) {\n          event.preventDefault();\n          testRunner.trigger(`${actionPrefix}toggle`);\n        });\n\n        // handle the plugin's shortcuts\n        if (testRunnerOptions.allowShortcuts) {\n          _.forEach(pluginShortcuts, function (command, key) {\n            shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n              // just fire the action using the event loop\n              testRunner.trigger(actionPrefix + key);\n            }, {\n              avoidInput: true\n            });\n          });\n        }\n\n        //start disabled\n        togglePlugin();\n        this.disable();\n\n        //update plugin state based on changes\n        testRunner\n        // runner life cycle\n        .on('loaditem', function () {\n          togglePlugin();\n          self.disable();\n        }).on('renderitem', function () {\n          if (magnifierPanel) {\n            magnifierPanel.update().zoomTo(pluginConfig.zoomMin);\n          }\n        }).on('enabletools renderitem', function () {\n          self.enable();\n        }).on('disabletools unloaditem', function () {\n          if (self.getState('active')) {\n            hideMagnifier();\n          }\n          self.disable();\n        }).on('destroy', function () {\n          if (magnifierPanel) {\n            magnifierPanel.destroy();\n          }\n          magnifierPanel = null;\n        })\n\n        // commands that controls the magnifier\n        .on(`${actionPrefix}toggle`, function () {\n          if (isEnabled()) {\n            toggleMagnifier();\n          }\n        }).on(`${actionPrefix}in`, function () {\n          if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n            getMagnifierPanel().zoomIn();\n          }\n        }).on(`${actionPrefix}out`, function () {\n          if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n            getMagnifierPanel().zoomOut();\n          }\n        }).on(`${actionPrefix}close`, function () {\n          if (self.getState('active')) {\n            hideMagnifier();\n          }\n        });\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy: function destroy() {\n        shortcut.remove(`.${pluginName}`);\n      },\n      /**\r\n       * Enables the button\r\n       */\n      enable: function enable() {\n        this.button.enable();\n      },\n      /**\r\n       * Disables the button\r\n       */\n      disable: function disable() {\n        this.button.disable();\n      },\n      /**\r\n       * Shows the button\r\n       */\n      show: function show() {\n        this.button.show();\n      },\n      /**\r\n       * Hides the button\r\n       */\n      hide: function hide() {\n        this.button.hide();\n      }\n    });\n\n    return magnifier;\n\n});\n\n","define('taoQtiTest/runner/plugins/tools/zoom',['jquery', 'i18n', 'ui/hider', 'ui/transformer', 'util/shortcut', 'util/namespace', 'taoTests/runner/plugin', 'taoQtiTest/runner/helpers/map'], function ($, __, hider, transformer, shortcut, namespaceHelper, pluginFactory, mapHelper) { 'use strict';\n\n    $ = $ && Object.prototype.hasOwnProperty.call($, 'default') ? $['default'] : $;\n    __ = __ && Object.prototype.hasOwnProperty.call(__, 'default') ? __['default'] : __;\n    transformer = transformer && Object.prototype.hasOwnProperty.call(transformer, 'default') ? transformer['default'] : transformer;\n    shortcut = shortcut && Object.prototype.hasOwnProperty.call(shortcut, 'default') ? shortcut['default'] : shortcut;\n    namespaceHelper = namespaceHelper && Object.prototype.hasOwnProperty.call(namespaceHelper, 'default') ? namespaceHelper['default'] : namespaceHelper;\n    pluginFactory = pluginFactory && Object.prototype.hasOwnProperty.call(pluginFactory, 'default') ? pluginFactory['default'] : pluginFactory;\n    mapHelper = mapHelper && Object.prototype.hasOwnProperty.call(mapHelper, 'default') ? mapHelper['default'] : mapHelper;\n\n    /**\r\n     * This program is free software; you can redistribute it and/or\r\n     * modify it under the terms of the GNU General Public License\r\n     * as published by the Free Software Foundation; under version 2\r\n     * of the License (non-upgradable).\r\n     *\r\n     * This program is distributed in the hope that it will be useful,\r\n     * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n     * GNU General Public License for more details.\r\n     *\r\n     * You should have received a copy of the GNU General Public License\r\n     * along with this program; if not, write to the Free Software\r\n     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n     *\r\n     * Copyright (c) 2016-2022  (original work) Open Assessment Technologies SA;\r\n     *\r\n     * @author dieter <dieter@taotesting.com>\r\n     * @author Alexander Zagovorichev <zagovorichev@1pt.com>\r\n     */\n\n    /**\r\n     * The standard zoom level, in percentage\r\n     * @type {Number}\r\n     */\n    const standard = 100;\n\n    /**\r\n     * Zoom-In/Zoom-Out steps\r\n     * @type {Number}\r\n     */\n    const increment = 10;\n\n    /**\r\n     * The zoom boundaries, in percentage\r\n     * @type {Object}\r\n     */\n    const threshold = {\n      lower: 10,\n      upper: 200\n    };\n\n    /**\r\n     * Sets the zoom level\r\n     * @param {jQuery} $target\r\n     * @param {Number} level - Zoom percentage\r\n     */\n    const _setZoomLevel = ($target, level) => {\n      const $parent = $target.parent();\n      const newScale = level / standard;\n      const isOverZoom = $parent.outerWidth(true) < $target.width() * newScale;\n      if (isOverZoom) {\n        transformer.setTransformOrigin($target, '0 0');\n        $parent.css('margin-left', '0');\n      } else {\n        transformer.setTransformOrigin($target, '50% 0');\n        $parent.css('margin-left', '');\n      }\n      transformer.scale($target, newScale);\n    };\n\n    /**\r\n     * Restores the standard zoom level\r\n     * @param {jQuery} $target\r\n     */\n    const _resetZoom = $target => {\n      transformer.reset($target);\n    };\n\n    /**\r\n     * Forces a browser repaint\r\n     * Solution from http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes?answertab=votes#tab-top\r\n     * @param {jQuery} $target\r\n     */\n    const forceRepaint = $target => {\n      const sel = $target[0];\n      if (sel) {\n        sel.style.display = 'none';\n        sel.offsetHeight; // no need to store this anywhere, the reference is enough\n        sel.style.display = '';\n      }\n    };\n\n    /**\r\n     * Returns the configured plugin\r\n     */\n    var zoom = pluginFactory({\n      name: 'zoom',\n      /**\r\n       * Initialize the plugin (called during runner's init)\r\n       */\n      init() {\n        const testRunner = this.getTestRunner();\n        const testRunnerOptions = testRunner.getOptions();\n        const pluginShortcuts = (testRunnerOptions.shortcuts || {})[this.getName()] || {};\n        const testRunnerContainer = this.getAreaBroker().getContainer().get(0);\n\n        /**\r\n         * Checks if the plugin is currently available\r\n         * @returns {Boolean}\r\n         */\n        const isConfigured = () => {\n          //to be activated with the special category x-tao-option-zoom\n          return mapHelper.hasItemCategory(testRunner.getTestMap(), testRunner.getTestContext().itemIdentifier, 'zoom', true);\n        };\n\n        /**\r\n         * Is zoom activated ? if not, then we hide the plugin\r\n         */\n        const togglePlugin = () => {\n          if (isConfigured()) {\n            //allow zoom\n            this.show();\n          } else {\n            this.hide();\n          }\n        };\n        const zoomAction = dir => {\n          const inc = increment * dir;\n          if (this.$zoomTarget) {\n            const el = this.$zoomTarget[0];\n            const before = el.getBoundingClientRect();\n            let sx = this.$container.scrollLeft();\n            let sy = this.$container.scrollTop();\n            this.zoom = Math.max(threshold.lower, Math.min(threshold.upper, this.zoom + inc));\n            if (this.zoom === standard) {\n              _resetZoom(this.$zoomTarget);\n            } else {\n              _setZoomLevel(this.$zoomTarget, this.zoom);\n            }\n            testRunnerContainer.style.setProperty('--tool-zoom-level', this.zoom / standard);\n\n            // force a browser repaint to fix a scrollbar issue with WebKit\n            forceRepaint(this.$zoomTarget);\n            const after = el.getBoundingClientRect();\n            sx = Math.max(0, sx + (after.width - before.width) / 2);\n            sy = Math.max(0, sy + (after.height - before.height) / 2);\n            this.$container.scrollLeft(sx).scrollTop(sy);\n          }\n        };\n        const zoomIn = () => {\n          if (this.getState('enabled') !== false) {\n            zoomAction(1);\n          }\n        };\n        const zoomOut = () => {\n          if (this.getState('enabled') !== false) {\n            zoomAction(-1);\n          }\n        };\n\n        /**\r\n         * Reapplys the same zoom level to the target\r\n         * It can be useful if the element was (visually-)hidden why zoom happened\r\n         */\n        const zoomReApply = () => {\n          if (this.zoom !== standard) {\n            _setZoomLevel(this.$zoomTarget, this.zoom);\n          }\n        };\n\n        //build element (detached)\n        this.buttonZoomOut = this.getAreaBroker().getToolbox().createEntry({\n          control: 'zoomOut',\n          title: __('Zoom out'),\n          icon: 'remove'\n        });\n        this.buttonZoomIn = this.getAreaBroker().getToolbox().createEntry({\n          control: 'zoomIn',\n          title: __('Zoom in'),\n          icon: 'add'\n        });\n\n        //attach behavior\n        this.buttonZoomIn.on('click', e => {\n          e.preventDefault();\n          testRunner.trigger('tool-zoomin');\n        });\n\n        //attach behavior\n        this.buttonZoomOut.on('click', e => {\n          e.preventDefault();\n          testRunner.trigger('tool-zoomout');\n        });\n        if (testRunnerOptions.allowShortcuts) {\n          if (pluginShortcuts.in) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.in, this.getName(), true), () => {\n              testRunner.trigger('tool-zoomin');\n            }, {\n              avoidInput: true\n            });\n          }\n          if (pluginShortcuts.out) {\n            shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.out, this.getName(), true), () => {\n              testRunner.trigger('tool-zoomout');\n            }, {\n              avoidInput: true\n            });\n          }\n        }\n\n        //start disabled\n        togglePlugin();\n        this.disable();\n\n        //update plugin state based on changes\n        testRunner.on('loaditem', () => {\n          this.zoom = standard;\n          togglePlugin();\n          this.disable();\n        }).on('renderitem', () => {\n          this.$container = $('#qti-content');\n          this.$zoomTarget = $('.qti-item');\n          this.enable();\n        }).on('enabletools', () => {\n          this.enable();\n        }).on('disabletools unloaditem', () => {\n          this.disable();\n        }).on('tool-zoomin', zoomIn).on('tool-zoomout', zoomOut).on('tool-zoomreapply', zoomReApply);\n      },\n      /**\r\n       * Called during the runner's destroy phase\r\n       */\n      destroy() {\n        shortcut.remove(`.${this.getName()}`);\n      },\n      /**\r\n       * Enable the button\r\n       */\n      enable() {\n        this.buttonZoomIn.enable();\n        this.buttonZoomOut.enable();\n      },\n      /**\r\n       * Disable the button\r\n       */\n      disable() {\n        this.buttonZoomIn.disable();\n        this.buttonZoomOut.disable();\n      },\n      /**\r\n       * Show the button\r\n       */\n      show() {\n        this.buttonZoomIn.show();\n        this.buttonZoomOut.show();\n      },\n      /**\r\n       * Hide the button\r\n       */\n      hide() {\n        this.buttonZoomIn.hide();\n        this.buttonZoomOut.hide();\n      }\n    });\n\n    return zoom;\n\n});\n\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('/*\\nUsage:\\n- linear-gradient((color1, color2, color3)) - returns linear-gradient with evenly distributed colors,\\n   if 3 colors used then the position of each will be 33,33%\\n- linear-gradient((color1 0%, color2 30%, color3 80%)) - returns linear-gradient with manually distributed colors,\\n   first param - color, second - position. Also you can use px or other valid units for set position.\\n*/\\n/* based on \\\"visually-hidden\\\" mixin in LDS for accessibility goals */\\n/* Do not edit */\\n.test-runner-scope .content-wrapper p.key-navigation-group, .test-runner-scope .content-wrapper div.key-navigation-group:not(.select2-container) {\\n    padding: 5px !important;\\n}\\n\\n.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction):not(.qti-customInteraction) {\\n    border-width: 1px !important;\\n    border-style: solid;\\n    border-color: transparent;\\n}\\n\\n.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction):not(.qti-customInteraction).focusin {\\n    border-color: #0e5d91 !important;\\n    outline: none;\\n}\\n\\n.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction):not(.qti-customInteraction).qti-interaction .qti-choice.key-navigation-highlight:not(.tts-content-node) {\\n    background: #e7eff4 !important;\\n}\\n\\n.test-runner-scope .content-wrapper span.key-navigation-group {\\n    border: none !important;\\n}\\n\\n.test-runner-scope .content-wrapper span.key-navigation-group.focusin {\\n    outline: solid #0e5d91 1px !important;\\n    outline-offset: 1px;\\n}\\n\\n.test-runner-scope .test-sidebar .key-navigation-group.focusin {\\n    background: #e7eff4;\\n}\\n\\n.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight .qti-navigator-tab {\\n    border-width: 2px;\\n}\\n\\n.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus {\\n    outline: none;\\n}\\n\\n.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus .qti-navigator-tab {\\n    border-top-color: #222 !important;\\n    border-left-color: #222 !important;\\n    border-right-color: #222 !important;\\n}\\n\\n.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight {\\n    padding-left: 8px;\\n    border-left: solid 2px #222;\\n}\\n\\n.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight .key-navigation-highlight:focus {\\n    outline: none;\\n}\\n\\n.test-runner-scope .test-sidebar .qti-navigator-fizzy .key-navigation-group.focusin {\\n    background: #f2f2f2;\\n}\\n\\n.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group.focusin {\\n    -ms-box-shadow: 0 0 6px 2px #3e7da7;\\n    -o-box-shadow: 0 0 6px 2px #3e7da7;\\n    box-shadow: 0 0 6px 2px #3e7da7;\\n}\\n\\n.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus {\\n    margin-bottom: 0;\\n    border-bottom-color: #e7eff4 !important;\\n    outline: none;\\n}\\n\\n.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus.active {\\n    border-bottom-color: transparent !important;\\n    background: #e7eff4 !important;\\n}\\n\\n.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus:not(.active):not(:active) .li-inner {\\n    color: #e7eff4;\\n}\\n\\nheader .settings-menu .key-navigation-group {\\n    padding-right: 5px;\\n}\\n\\nheader .settings-menu .key-navigation-group.focusin {\\n    background-color: rgba(14, 93, 145, 0.5);\\n    padding-bottom: 10px;\\n}\\n\\nheader .settings-menu .key-navigation-highlight:focus {\\n    height: 54px;\\n    color: white !important;\\n    border-bottom: solid 2px white !important;\\n}\\n\\n/*# sourceMappingURL=../../../taoQtiTest/views/node_modules/@oat-sa/tao-test-runner-qti/dist/plugins/content/accessibility/css/key-navigation.css.map *//*\\nUsage:\\n- linear-gradient((color1, color2, color3)) - returns linear-gradient with evenly distributed colors,\\n   if 3 colors used then the position of each will be 33,33%\\n- linear-gradient((color1 0%, color2 30%, color3 80%)) - returns linear-gradient with manually distributed colors,\\n   first param - color, second - position. Also you can use px or other valid units for set position.\\n*/\\n/* based on \\\"visually-hidden\\\" mixin in LDS for accessibility goals */\\n/* Do not edit */\\n.countdown {\\n    opacity: 0;\\n    position: relative;\\n    display: inline-block;\\n    overflow: hidden;\\n    text-align: center;\\n    vertical-align: top;\\n    line-height: 1.2;\\n    padding: 0 20px;\\n    margin-top: -1px;\\n    height: 100%;\\n}\\n\\n.countdown.rendered {\\n    opacity: 1;\\n    transition: opacity, 300ms, linear, 0s;\\n}\\n\\n.countdown .label {\\n    max-width: 130px;\\n    display: block;\\n    font-size: 12px;\\n    font-size: 1.2rem;\\n}\\n\\n/*# sourceMappingURL=../../../taoQtiTest/views/node_modules/@oat-sa/tao-test-runner-qti/dist/plugins/controls/timer/component/css/countdown.css.map *//*\\nUsage:\\n- linear-gradient((color1, color2, color3)) - returns linear-gradient with evenly distributed colors,\\n   if 3 colors used then the position of each will be 33,33%\\n- linear-gradient((color1 0%, color2 30%, color3 80%)) - returns linear-gradient with manually distributed colors,\\n   first param - color, second - position. Also you can use px or other valid units for set position.\\n*/\\n/* based on \\\"visually-hidden\\\" mixin in LDS for accessibility goals */\\n/* Do not edit */\\n.timer-box {\\n    opacity: 0;\\n    padding-top: 0;\\n    white-space: nowrap;\\n    /*flex item of control-box */\\n    flex: 1 0 auto;\\n    /* is also a flex container for .qti-timer */\\n    display: flex;\\n    flex-direction: row;\\n    flex-wrap: nowrap;\\n    justify-content: flex-end;\\n}\\n\\n.timer-box.rendered {\\n    opacity: 1;\\n    transition: opacity, 300ms, linear, 0s;\\n}\\n\\n.timer-box .timer-toggler {\\n    text-decoration: none;\\n    color: white;\\n    line-height: 1.3;\\n    opacity: .68;\\n    padding: 8px 20px;\\n    position: relative;\\n    top: -1px;\\n    left: 20px;\\n    z-index: 2;\\n    transition: opacity, 0.5s, ease-out, 0s;\\n}\\n\\n.timer-box .timer-toggler:hover, .timer-box .timer-toggler:active, .timer-box .timer-toggler:focus {\\n    outline: unset;\\n}\\n\\n.timer-box .timer-toggler:active, .timer-box .timer-toggler:focus {\\n    border: 2px solid white;\\n}\\n\\n.timer-box .timer-toggler:hover {\\n    opacity: .93;\\n    transition: opacity, 0.5s, ease-out, 0s;\\n}\\n\\n.timer-box.zen .timer-toggler {\\n    opacity: .93;\\n    transition: opacity, 0.5s, ease-out, 0s;\\n}\\n\\n.timer-box.zen .countdown .time {\\n    opacity: 0;\\n    transition: opacity, 1s, ease-out, 0s;\\n}\\n\\n.timer-box .countdown::before {\\n    content: \\' \\';\\n    background: rgba(255, 255, 255, 0.3);\\n    width: 1px;\\n    height: 20px;\\n    position: absolute;\\n    left: 0;\\n    top: 5px;\\n}\\n\\n.timer-box .countdown:first-child::before {\\n    content: none;\\n}\\n\\n.timer-box .countdown[data-scope=test][data-type=min] {\\n    order: 5;\\n}\\n\\n.timer-box .countdown[data-scope=test] {\\n    order: 10;\\n}\\n\\n.timer-box .countdown[data-scope=testPart][data-type=min] {\\n    order: 15;\\n}\\n\\n.timer-box .countdown[data-scope=testPart] {\\n    order: 20;\\n}\\n\\n.timer-box .countdown[data-scope=section][data-type=min] {\\n    order: 25;\\n}\\n\\n.timer-box .countdown[data-scope=section] {\\n    order: 30;\\n}\\n\\n.timer-box .countdown[data-scope=item][data-type=min] {\\n    order: 35;\\n}\\n\\n.timer-box .countdown[data-scope=item] {\\n    order: 40;\\n}\\n\\n/*# sourceMappingURL=../../../taoQtiTest/views/node_modules/@oat-sa/tao-test-runner-qti/dist/plugins/controls/timer/component/css/timerbox.css.map */');\n","\ndefine(\"taoQtiTest/loader/testPlugins.bundle\", function(){});\n"]}